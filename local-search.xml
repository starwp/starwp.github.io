<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Time Complexity</title>
    <link href="/2020/12/27/Time-Complexity/"/>
    <url>/2020/12/27/Time-Complexity/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The key idea of time complexity.</p></blockquote><a id="more"></a><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h1><h2 id="Formula-1"><a href="#Formula-1" class="headerlink" title="Formula 1"></a>Formula 1</h2><p>时间复杂度的描述如下：</p><p>$$\begin{equation}\label{eq1}<br>T(n) = T(n/2) + O(1) = O(\log n) \tag{1}<br>\end{equation}$$</p><p>一个size为n的问题T(n), 可以被拆分为一个size为n/2的问题T(n/2)，拆分时间为O(1)。由此，上式的公式推导如下：</p><p>$$\begin{equation}\label{eq2}<br>\begin{aligned}<br>T(n) &amp;= T(\frac{n}{2}) + O(1)\\<br>T(\frac{n}{2}) &amp;= T(\frac{n}{4}) + O(1) \\<br>T(\frac{n}{4}) &amp;= T(\frac{n}{8}) + O(1) \\<br>&amp;…\\<br>T(1) &amp;= T(\frac{n}{2^{\log n}}) + O(1)<br>\end{aligned}<br>\end{equation}$$</p><p>左右相消可得，T(n) = O(1)*log n</p><p><span style="color:red"><strong>注意：整个推导过程中，因为O(1)为最小unit，所以一直未变.</strong></span></p><h2 id="Formula-2"><a href="#Formula-2" class="headerlink" title="Formula 2"></a>Formula 2</h2><p>$$\begin{equation}\label{eq3}<br>T(n) = T(n/2) + O(n) = O(2n) \tag{2}<br>\end{equation}$$</p><p>一个size为n的问题T(n), 可以被拆分为一个size为n/2的问题T(n/2)，拆分时间为O(1)。由此，上式的公式推导如下：</p><p>$$\begin{equation}\label{eq4}<br>\begin{aligned}<br>T(n) &amp;= T(\frac{n}{2}) + O(n)\\<br>T(\frac{n}{2}) &amp;= T(\frac{n}{4}) + O(n/2) \\<br>T(\frac{n}{4}) &amp;= T(\frac{n}{8}) + O(n/4) \\<br>&amp;…\\<br>T(1) &amp;= T(\frac{n}{2^{\log n}}) + O(1)<br>\end{aligned}<br>\end{equation}$$</p><p>进行变形，可得</p><p>$$\begin{equation}\label{eq5}<br>T(n) = O(n) + O(\frac{n}{2})+ O(\frac{n}{4})+O(\frac{n}{8})…+O(1) = O(2n)<br>\end{equation}$$</p><p>参考：<a href="https://en.wikipedia.org/wiki/1/2_%2B_1/4_%2B_1/8_%2B_1/16_%2B_%E2%8B%AF" target="_blank" rel="noopener">wiki</a></p><p><span style="color:red"><strong>注意：整个推导过程中，每一个公式对应的O(n)size一直在变化.</strong></span></p><h2 id="Formula-3"><a href="#Formula-3" class="headerlink" title="Formula 3"></a>Formula 3</h2><p>$$\begin{equation}\label{eq6}<br>T(n) = 2T(n/2) + O(1) = O(n) \tag{3}<br>\end{equation}$$</p><p>一个size为n的问题T(n), 可以被拆分为2个size为n/2的问题T(n/2)，拆分时间为O(1)。由此，上式的公式推导如下：</p><p>$$\begin{equation}\label{eq7}<br>\begin{aligned}<br>T(n) &amp;= 2T(\frac{n}{2}) + O(1)\\<br>2T(\frac{n}{2}) &amp;= 4T(\frac{n}{4}) + 2O(1) \\<br>&amp;…\\<br>2^{\log n -1}T(1) &amp;= 2^{\log n}T(\frac{n}{2^{\log n}}) + 2^{\log n -1}O(1)<br>\end{aligned}<br>\end{equation}$$</p><p>进行变形，可得</p><p>$$\begin{equation}\label{eq8}<br>T(n) = (2^0 + 2^1+ 2^2+ 2^3 +  2^{\log n -1})O(1) = O(n)<br>\end{equation}$$</p><p>参考：<a href="https://en.wikipedia.org/wiki/1_%2B_2_%2B_4_%2B_8_%2B_%E2%8B%AF" target="_blank" rel="noopener">wiki</a></p><p>左右相消可得，T(n) = O(n)</p><h2 id="Formula-4"><a href="#Formula-4" class="headerlink" title="Formula 4"></a>Formula 4</h2><p>$$\begin{equation}\label{eq9}<br>T(n) = 2T(n/2) + O(n) = O(n\log n) \tag{4}<br>\end{equation}$$</p><p>一个size为n的问题T(n), 可以被拆分为2个size为n/2的问题T(n/2)，拆分时间为O(1)。由此，上式的公式推导如下：</p><p>$$\begin{equation}\label{eq10}<br>\begin{aligned}<br>T(n) &amp;= 2T(\frac{n}{2}) + O(n)\\<br>2T(\frac{n}{2}) &amp;= 4T(\frac{n}{4}) + 2O(n/2) \\<br>2^2T(\frac{n}{2^2}) &amp;= 2^3T(\frac{n}{2^3}) + 2^2O(n/2^2) \\<br>&amp;…\\<br>2^{\log n -1}T(1) &amp;= 2^{\log n}T(\frac{n}{2^{\log n}}) + 2^{\log n -1}O(1)<br>\end{aligned}<br>\end{equation}$$</p><p>进行变形，可得</p><p>$$\begin{equation}\label{eq11}<br>T(n) = O(n) + 2^1O(\frac{n}{2})+ 2^2O(\frac{n}{2^2})+ 2^3O(\frac{n}{2^3}) +  2^{\log n -1}O(1) = O(n*\log n)<br>\end{equation}$$</p><p>左右相消可得，T(n) = O(n)*log n</p><h2 id="General-Formula"><a href="#General-Formula" class="headerlink" title="General Formula"></a>General Formula</h2><p>$$\begin{equation}\label{eq12}<br>T(n) = aT(\frac{n}{b}) + O(n^d) \tag{5}<br>\end{equation}$$</p><p>这个通用公式的解为：</p><ul><li>case1: If $\log_b^a &gt; d$, then $O(n^{\log_b ^a})$</li><li>case2: If $\log_b^a = d$, then $O(n^d*\log n)$</li><li>case3: If $\log_b^a &lt; d$, then $O(n^d)$</li></ul><p>因此，如果考虑如下公式，因为$\log_b^a = \log_2^2 &lt; 2=d$</p><p>$$\begin{equation}\label{eq13}<br>T(n) = 2T(n/2) + O(n^2) = O(n^2) \tag{6}<br>\end{equation}$$</p><h1 id="2-Time-complexity-to-different-problems"><a href="#2-Time-complexity-to-different-problems" class="headerlink" title="2. Time complexity to different problems"></a>2. Time complexity to different problems</h1><table><thead><tr><th>time complexity</th><th>possible problems</th></tr></thead><tbody><tr><td>$O(1)$</td><td>rare</td></tr><tr><td>$O(\log n)$</td><td>almost binary search</td></tr><tr><td>$O(\sqrt n)$</td><td>factorization</td></tr><tr><td>$O(n)$</td><td>all</td></tr><tr><td>$O(n^2)$</td><td>array, enumerate, DP</td></tr><tr><td>$O(n^3)$</td><td>array, enumerate, DP</td></tr><tr><td>$O(2^n)$</td><td>combination</td></tr><tr><td>$O(n!)$</td><td>permutation</td></tr></tbody></table><table><thead><tr><th>range</th><th>possible problems</th></tr></thead><tbody><tr><td>$n \leq 30$</td><td>指数级别, dfs+剪枝, 状态压缩dp</td></tr><tr><td>$n\leq 100 $</td><td>$O(n^3)$, floyd, dp, 高斯消元</td></tr><tr><td>$n\leq 1000$</td><td>$O(n^2), O(n^2 \log n)$, dp, 二分, 朴素版Dijkstra, 朴素版Prim, Bellman-Ford</td></tr><tr><td>$n\leq 10^4$</td><td>$O(n∗n^{0.5}$, 块状链表, 分块, 莫队</td></tr><tr><td>$n\leq 10^5$</td><td>$O(n\log n)$, 各种sort，线段树, 树状数组, set/map, heap, 拓扑排序, dijkstra+heap, prim+heap, spfa, 求凸包, 求半平面交, 二分, CDQ分治, 整体二分</td></tr><tr><td>$n\leq 10^6$</td><td>$O(n)$, 以及常数较小的$O(n\log n)$ 算法, 单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，常数比较小的$O(n\log n)$的做法：sort、树状数组、heap、dijkstra、spfa</td></tr><tr><td>$n\leq 10^7$</td><td>$O(n)$，双指针扫描、kmp、AC自动机、线性筛素数</td></tr><tr><td>$n\leq 10^9$</td><td>$O(n^{0.5})$, 判断质数</td></tr></tbody></table><p><a href="https://www.acwing.com/blog/content/32/" target="_blank" rel="noopener">https://www.acwing.com/blog/content/32/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Permutation DP</title>
    <link href="/2020/10/28/Permutation-DP/"/>
    <url>/2020/10/28/Permutation-DP/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Permutation problems based on dynamic programming</p></blockquote><a id="more"></a><h1 id="Permutation"><a href="#Permutation" class="headerlink" title="Permutation"></a>Permutation</h1><p>From O(n!) to O(2^n), 这类问题的处理形式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LFU</title>
    <link href="/2020/10/28/LFU/"/>
    <url>/2020/10/28/LFU/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Complicated cache data structure.</p></blockquote><a id="more"></a><h1 id="Least-Frequent-Cache"><a href="#Least-Frequent-Cache" class="headerlink" title="Least Frequent Cache"></a>Least Frequent Cache</h1><p>这类数据结构的典型实现就是利用双向链表</p><h2 id="doubly-Linked-List"><a href="#doubly-Linked-List" class="headerlink" title="doubly Linked List"></a>doubly Linked List</h2><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRU</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, capacity)</span>:</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Heap</title>
    <link href="/2020/10/28/Heap/"/>
    <url>/2020/10/28/Heap/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Heap data structure and its applications</p></blockquote><a id="more"></a><h1 id="Heap-Data-Structure"><a href="#Heap-Data-Structure" class="headerlink" title="Heap Data Structure"></a>Heap Data Structure</h1><p>由于python自带的的堆结构heapq的删除时间为O(n)，因此设计如下延迟删除。</p><h2 id="Lazy-Pop"><a href="#Lazy-Pop" class="headerlink" title="Lazy Pop"></a>Lazy Pop</h2><p>加上延迟删除功能，代码如下</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> *<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Heap</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>        self.arr = []        self.deleted = &#123;&#125;        self.size = <span class="hljs-number">0</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">return</span> self.size    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, val)</span>:</span>        heappush(self.arr, val)        self.size += <span class="hljs-number">1</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span>        self._clean_top()        val = heappop(self.arr)self.size -= <span class="hljs-number">1</span>        <span class="hljs-keyword">return</span> val    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(self, val)</span>:</span>        self.deleted[val] = self.deleted.get(val,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>        self.size -= <span class="hljs-number">1</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span><span class="hljs-params">(self)</span>:</span>        self._clean_top()        <span class="hljs-keyword">return</span> self.arr[<span class="hljs-number">0</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_clean_top</span><span class="hljs-params">()</span>:</span>        <span class="hljs-keyword">while</span> self.arr <span class="hljs-keyword">and</span> self.arr[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> self.deleted:            val = heappop(self.arr)   self.deleted[val] -= <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> self.deleted[val] == <span class="hljs-number">0</span>:                <span class="hljs-keyword">del</span> self.deleted[val]</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Josephus Problem</title>
    <link href="/2020/10/09/Josephus-Problem/"/>
    <url>/2020/10/09/Josephus-Problem/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Do you know the <a href="https://www.youtube.com/watch?v=uCsD3ZGzMgE" target="_blank" rel="noopener">Josephus Problem</a>?</p></blockquote><a id="more"></a><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Calculator</title>
    <link href="/2020/10/08/Calculator/"/>
    <url>/2020/10/08/Calculator/</url>
    
    <content type="html"><![CDATA[<blockquote><p>implementing the calculator. </p></blockquote><a id="more"></a><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>这一类问题通常需要一部分优先级较高的需要处理，于是需要利用栈的原理。</p><h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><h2 id="Basic-Calculator"><a href="#Basic-Calculator" class="headerlink" title="Basic Calculator"></a><a href="https://www.lintcode.com/problem/basic-calculator-iii/" target="_blank" rel="noopener">Basic Calculator</a></h2><p>问题: Implement a basic calculator to evaluate a simple expression string. The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <code>non-negative</code> integers and empty spaces . The expression string contains only non-negative integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> operators , open <code>(</code> and closing parentheses <code>)</code> and empty spaces . The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2147483648, 2147483647]</code>.</p><p>分析: 因为运算的优先级别需要处理，我们考虑这样一个方式，当遇到了一个符号<code>+-/*</code>后，认为这个符号前的数字<code>preNum</code>已经准备完毕，然后根据这个数字前的符号<code>preOp</code>进行计算，对于乘除法采用弹栈计算的处理方式，加减法直接放在stack里。此外，对于括号，我们发现这样一个现象，左括号前和又括号后，一定是符号。这样的话，我们就可以利用递归，将括号的计算看成一个数字<code>preNum</code>, 然后递归返回这个数字以及这个数字后的<code>index</code>，利于后续处理。代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calculator</span><span class="hljs-params">(self, s)</span>:</span>    <span class="hljs-keyword">return</span> self.helper(s, <span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helper</span><span class="hljs-params">(self, s, i)</span>:</span>    stack, preNum, preOp = [], <span class="hljs-number">0</span>, <span class="hljs-string">'+'</span>    <span class="hljs-keyword">while</span> i &lt; len(s) <span class="hljs-keyword">and</span> s[i] != <span class="hljs-string">')'</span>:        <span class="hljs-keyword">if</span> s[i].isdigit():            preNum = preNum * <span class="hljs-number">10</span> + int(s[i])            i += <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> s[i] <span class="hljs-keyword">in</span> <span class="hljs-string">'+-/*'</span>:            self.saveNum(stack, preNum, preOp)            preNum, preOp = <span class="hljs-number">0</span>, s[i]            i += <span class="hljs-number">1</span>            <span class="hljs-keyword">elif</span> s[i] == <span class="hljs-string">'('</span>:            preNum, i = self.helper(s, i + <span class="hljs-number">1</span>)        <span class="hljs-keyword">else</span>:            i += <span class="hljs-number">1</span> <span class="hljs-comment"># 处理其他无用的字符</span>    self.saveNum(stack, preNum, preOp)    <span class="hljs-keyword">return</span> sum(stack), i + <span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">saveNum</span><span class="hljs-params">(self, stack, num, op)</span>:</span>    <span class="hljs-keyword">if</span> op == <span class="hljs-string">'+'</span>:        stack.append(num)    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">'-'</span>:        stack.append(-num)    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">'*'</span>:        stack.append(stack.pop()*num)    <span class="hljs-keyword">elif</span> op == <span class="hljs-string">'/'</span>:        stack.append(int(stack.pop()/num))</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Subarray Sum</title>
    <link href="/2020/10/05/Subarray-Sum/"/>
    <url>/2020/10/05/Subarray-Sum/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Interesting topics on subarray sum.</p></blockquote><a id="more"></a><h1 id="Classical-Problems"><a href="#Classical-Problems" class="headerlink" title="Classical Problems"></a>Classical Problems</h1><p>We discuss basic problems based on subarray sum.</p><h2 id="Maximum-Subarray"><a href="#Maximum-Subarray" class="headerlink" title="Maximum Subarray"></a><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">Maximum Subarray</a></h2><p>题目: Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>分析: 两种做法，贪心和动态规划。</p><ul><li>贪心: 利用prefix sum的记录，找出之前的最低点，做差即可求current subarray sum，然后全局统计max_sum</li><li>动态规划: 定义当前元素为结尾的最大值，递推关系为是否考虑当前元素。</li></ul><p>贪心的写法如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(self, nums: List[int])</span> -&gt; int:</span>    cur, min_sum, max_sum = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -sys.maxsize    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):        cur += nums[i]        max_sum = max(max_sum, cur - min_sum)        min_sum = min(min_sum, cur)    <span class="hljs-keyword">return</span> max_sum <span class="hljs-keyword">if</span> max_sum != -sys.maxsize <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></code></pre><ul><li>初始化的min_sum为0.</li></ul><p>动他规划如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(self, nums: List[int])</span> -&gt; int:</span>    cur, max_sum = <span class="hljs-number">0</span>, -sys.maxsize    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):        cur = max(cur + nums[i], nums[i])        max_sum = max(max_sum, cur)    <span class="hljs-keyword">return</span> max_sum <span class="hljs-keyword">if</span> max_sum != -sys.maxsize <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></code></pre><ul><li>关键的代码就是<code>cur_sum[i] = max(nums[i], nums[i]+cur_sum[i-1])</code></li></ul><h2 id="Subarray-Sum-Equals-K"><a href="#Subarray-Sum-Equals-K" class="headerlink" title="Subarray Sum Equals K"></a><a href="https://leetcode.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">Subarray Sum Equals K</a></h2><p>问题: Given an array of integers and an integer <strong>k</strong>, you need to find the total number of continuous subarrays whose sum equals to <strong>k</strong>.</p><p>分析: 利用贪心和hash表，可以查到总数，代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(self, nums: List[int], k: int)</span> -&gt; int:</span>    cur, preSum, cnt = <span class="hljs-number">0</span>, &#123;<span class="hljs-number">0</span>:<span class="hljs-number">1</span>&#125;, <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):        cur += nums[i]        <span class="hljs-keyword">if</span> cur - k <span class="hljs-keyword">in</span> preSum:            cnt += preSum[cur-k]        preSum[cur] = preSum.get(cur,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> cnt</code></pre><h2 id="Minimum-Size-Subarray-Sum"><a href="#Minimum-Size-Subarray-Sum" class="headerlink" title="Minimum Size Subarray Sum"></a><a href="https://leetcode.com/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener">Minimum Size Subarray Sum</a></h2><p>问题: Given an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a <strong>contiguous</strong> subarray of which the sum ≥ <strong>s</strong>. If there isn’t one, return 0 instead.</p><p>分析: 利用sliding window和greedy的方式，求最短长度。代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(self, s: int, nums: List[int])</span> -&gt; int:</span>    left, right, min_len, cur = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, sys.maxsize, <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> right &lt; len(nums):        cur += nums[right]        right += <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> cur &gt;= s:            min_len = min(min_len, right-left)            cur -= nums[left]            left += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> min_len <span class="hljs-keyword">if</span> min_len != sys.maxsize <span class="hljs-keyword">else</span> <span class="hljs-number">0</span></code></pre><h2 id="Maximum-sum-subarray-of-size-range-L-R"><a href="#Maximum-sum-subarray-of-size-range-L-R" class="headerlink" title="Maximum sum subarray of size range [L, R]"></a><a href="https://www.geeksforgeeks.org/maximum-sum-subarray-of-size-range-l-r/" target="_blank" rel="noopener">Maximum sum subarray of size range [L, R]</a></h2><p>问题: Given an integer array <strong>arr[]</strong> of size <strong>N</strong> and two integer <strong>L</strong> and <strong>R</strong>. The task is to find the maximum sum subarray of size between <strong>L</strong> and <strong>R</strong> (both inclusive).</p><p>分析: 处理prefix Sum, 单调队列+推迟加入单调队列即可。代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sizeRangeSubarraySum</span><span class="hljs-params">(A, a, b)</span>:</span>    <span class="hljs-keyword">if</span> a &lt;= <span class="hljs-number">0</span>: a = <span class="hljs-number">1</span>    <span class="hljs-keyword">if</span> b &gt; len(A): b = len(A)    preSum, cur, max_sum = [<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, -sys.maxsize     q = collections.deque([])    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        cur += A[i]        <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> q[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] &lt; i - b:            q.popleft()        <span class="hljs-keyword">if</span> i - a + <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>:            <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> q[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] &gt; preSum[i-a+<span class="hljs-number">1</span>]:                q.pop()            q.append([preSum[i-a+<span class="hljs-number">1</span>], i - a])            max_sum = max(max_sum, cur - q[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])         preSum.append(cur)    <span class="hljs-keyword">return</span> max_sum    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">brute_size</span><span class="hljs-params">(A, a, b)</span>:</span>    preSum, max_sum = [<span class="hljs-number">0</span>], -sys.maxsize    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        preSum.append(A[i] + preSum[<span class="hljs-number">-1</span>])        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> a &lt;= i+<span class="hljs-number">1</span>-j &lt;= b:                max_sum = max(max_sum, preSum[<span class="hljs-number">-1</span>] - preSum[j])    <span class="hljs-keyword">return</span> max_sum</code></pre><ul><li>注意: 代码中<code>i-a</code>是真实的index，但是由于preSum对应的index需要加1，所以推迟加入的判定变为，<code>i-a+1</code>，但是我们实际append，和popleft查询都使用的<code>i-a</code>和<code>i-b</code>.</li></ul><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p>接下来，主要讨论技巧性的subarray sum的问题:</p><h2 id="Largest-Subarray-Having-Sum-Greater-Than-or-Equal-to-k"><a href="#Largest-Subarray-Having-Sum-Greater-Than-or-Equal-to-k" class="headerlink" title="Largest Subarray Having Sum Greater Than or Equal to k"></a><a href="https://www.geeksforgeeks.org/largest-subarray-having-sum-greater-than-k/" target="_blank" rel="noopener">Largest Subarray Having Sum Greater Than or Equal to k</a></h2><p>问题: Given an array of integers and a value k, find the length of largest subarray having a sum greater than or equal to k.</p><p>分析: 因为要求最长，且sum有一个lower bound，画图如下:</p><p><img src="image-20201005175755596.png" srcset="/img/loading.gif" alt="image-20201005181055167"></p><p>对于这个feasible区域的数据，我们只用求最找的一个，于是我们引入如下技巧处理prefix Sum。</p><h3 id="Technique-Sorting-Prefix-Sum-and-adding-earliest-index"><a href="#Technique-Sorting-Prefix-Sum-and-adding-earliest-index" class="headerlink" title="Technique: Sorting Prefix Sum and adding earliest index"></a>Technique: Sorting Prefix Sum and adding earliest index</h3><p>这样我们的prefix Sum就变成了</p><p><img src="image-20201005182218986.png" srcset="/img/loading.gif" alt="image-20201005182218986"></p><ul><li>我们排序prefix Sum，然后对于每一个prefix Sum，附带一个到目前为止当前最小的index</li></ul><p>这样，对于每一个<code>preSum[i]</code>，我们可以用二分法定位<code>preSum[i]-k</code>的位置，而这个位置的<code>preSum</code>值的<code>index</code>记录了最早的<code>index</code>，这样我们就可以统计到到当前位置的最长subarray Sum.</p><p>技巧总结:</p><ul><li>利用prefix Sum排序建立单调的数据，利于使用二分法。</li><li>其次，利用记录当前为止最小<code>index</code>，使得二分查找的位置就代表最早的<code>preSum[j]</code>，而不红查找范围，妙啊！</li></ul><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">import</span> collections<span class="hljs-keyword">import</span> copy<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestI</span><span class="hljs-params">(A, k)</span>:</span>    max_len, preSum = <span class="hljs-number">0</span>, [[<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>]]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        preSum.append([A[i]+preSum[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],i])    preSum.sort()    minIdx, cur = [preSum[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]], <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(preSum)):        minIdx.append(min(minIdx[<span class="hljs-number">-1</span>], preSum[i][<span class="hljs-number">1</span>]))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        cur += A[i]        j = binarySearch_last_smallerthan_equal(preSum, cur - k)        <span class="hljs-keyword">if</span> j != <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> minIdx[j] &lt; i:            max_len = max(max_len, i - minIdx[j])     <span class="hljs-keyword">return</span> max_len    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binarySearch_last_smallerthan_equal</span><span class="hljs-params">(preSum, target)</span>:</span>    start, end = <span class="hljs-number">0</span>, len(preSum)<span class="hljs-number">-1</span>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:        mid = (start + end) // <span class="hljs-number">2</span>        <span class="hljs-keyword">if</span> preSum[mid][<span class="hljs-number">0</span>] &gt;= target:            end = mid        <span class="hljs-keyword">else</span>:            start = mid    <span class="hljs-keyword">if</span> preSum[end][<span class="hljs-number">0</span>] &lt;= target:        <span class="hljs-keyword">return</span> end    <span class="hljs-keyword">if</span> preSum[start][<span class="hljs-number">0</span>] &lt;= target:        <span class="hljs-keyword">return</span> start    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><span class="hljs-comment">## 以下代码为暴力求解</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bruteForce</span><span class="hljs-params">(A, k)</span>:</span>    max_len, preSum, cur = <span class="hljs-number">0</span>, [<span class="hljs-number">0</span>], <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        preSum.append(A[i]+preSum[<span class="hljs-number">-1</span>])    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        cur += A[i]        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> cur - preSum[j] &gt;= k:            max_len = max(max_len, i-j+<span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> max_len<span class="hljs-comment">## 以下为验证正确性</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span><span class="hljs-params">(count)</span>:</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(count):        A = np.random.choice(list(range(<span class="hljs-number">-20</span>, <span class="hljs-number">20</span>)),\        size = randint(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>), replace= <span class="hljs-literal">True</span>, p=<span class="hljs-literal">None</span>)        k = randint(<span class="hljs-number">-20</span>, <span class="hljs-number">20</span>)        B = copy.deepcopy(A)        res1 = longestI(A, k)         res2 = bruteForce(B, k)        <span class="hljs-keyword">if</span> res1 != res2:            print(A)            print(B)            print(res1, res2, k)            print(<span class="hljs-string">'Fail-----------'</span>)            <span class="hljs-keyword">return</span>    print(<span class="hljs-string">'Success!!'</span>)    test(<span class="hljs-number">1000</span>)</code></pre><p><a href="https://www.programiz.com/python-programming/online-compiler/" target="_blank" rel="noopener">Try Online Test</a></p><ul><li>Prefix Sum的index从<code>-1</code>开始技术的，所以<code>i-j</code>多表示subarray的长度了。</li><li>对于防止二分法越界，返回-1的情况，需要进行判定。</li><li>注意: 求最长的代码是<code>max_len = max(max_len, i - minIdx[j])</code>，而不是<code>i-j</code>这个容易出错。</li></ul><p>实际上，我们还存在另一种二分的方法。这种方法是采用了以下的技巧:</p><h3 id="Technique-Creating-Monotonic-Prefix-Sum-from-Original-Prefix-Sum"><a href="#Technique-Creating-Monotonic-Prefix-Sum-from-Original-Prefix-Sum" class="headerlink" title="Technique: Creating Monotonic Prefix Sum from Original Prefix Sum"></a>Technique: Creating Monotonic Prefix Sum from Original Prefix Sum</h3><p>根据产生prefix sum数组产生了单调递减的，helper Sum数组。根据贪心的原理，我们只要使用二分法找到，最找出现小于等于<code>cur_sum-k</code>的index就可以得到current元素的最长subarray。找helper Sum如下图，所示。</p><p><img src="image-20201005212908643.png" srcset="/img/loading.gif" alt="image-20201005212908643"></p><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestII</span><span class="hljs-params">(A, k)</span>:</span>    preSum, helperSum, max_len = [<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>], <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        preSum.append(preSum[<span class="hljs-number">-1</span>] + A[i])        j = decrease_binarySearch(helperSum, preSum[<span class="hljs-number">-1</span>]-k)        <span class="hljs-keyword">if</span> j != <span class="hljs-number">-1</span>:            max_len = max(max_len, i - j + <span class="hljs-number">1</span>)        helperSum.append(min(preSum[<span class="hljs-number">-1</span>], helperSum[<span class="hljs-number">-1</span>]))    <span class="hljs-keyword">return</span> max_len<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrease_binarySearch</span><span class="hljs-params">(A, target)</span>:</span>    start, end = <span class="hljs-number">0</span>, len(A)<span class="hljs-number">-1</span>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:        mid = (start + end)//<span class="hljs-number">2</span>        <span class="hljs-keyword">if</span> A[mid] &lt;= target:            end = mid        <span class="hljs-keyword">else</span>:            start = mid    <span class="hljs-keyword">if</span> A[start] &lt;= target:        <span class="hljs-keyword">return</span> start    <span class="hljs-keyword">if</span> A[end] &lt;= target:        <span class="hljs-keyword">return</span> end    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></code></pre><ul><li><p>利用prefix Sum建立helper Sum具有单调递减特性，使得二分法可用</p></li><li><p>因为递减特性，使得小于等于<code>preSum[i]-k</code>的index在helper Sum中，一定是最早的一个，满足贪心的性质。</p></li><li><p>注意: <code>helperSum</code>存的元素的<code>index</code>(二分法求出来的<code>j</code>)，对比<code>A</code>是加1的，所以计数<code>max_len</code>的时候，需要再加上1。</p></li></ul><h3 id="Technique-Subarray-Min-Max-Sum-Making-it-O-n-time"><a href="#Technique-Subarray-Min-Max-Sum-Making-it-O-n-time" class="headerlink" title="Technique: Subarray Min/Max Sum Making it O(n) time"></a>Technique: Subarray Min/Max Sum Making it O(n) time</h3><p>利用subarray max/min sum的单调特性:</p><ul><li>给定一个起点A[i]，以其为起点的subarray max sum代表最慢递减方式的一个subarray。</li></ul><p>考虑下面这个数据:</p><pre><code class="hljs python">       A = [<span class="hljs-number">1</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">-3</span>]subarray = [<span class="hljs-number">3</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">9</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">-3</span>] <span class="hljs-comment"># subarray max sum</span><span class="hljs-comment">#单独看位置0</span>           [<span class="hljs-number">1</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] = <span class="hljs-number">3</span>                               [<span class="hljs-number">-6</span>, <span class="hljs-number">4</span>] = <span class="hljs-number">-2</span>                                      [<span class="hljs-number">-3</span>] = <span class="hljs-number">-3</span></code></pre><ul><li>我们发现以subarray max sum形成了单调递减的特性，这样我们只要利用sliding window技巧进行窗口添加或者删除即可找到最长的长度。</li></ul><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestIII</span><span class="hljs-params">(A, k)</span>:</span>    subMaxSums, subMaxEnds = [<span class="hljs-number">0</span>]*(len(A)<span class="hljs-number">-1</span>) + [A[<span class="hljs-number">-1</span>]], [<span class="hljs-number">0</span>]*(len(A)<span class="hljs-number">-1</span>) + [len(A)<span class="hljs-number">-1</span>]     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):        <span class="hljs-keyword">if</span> subMaxSums[i+<span class="hljs-number">1</span>] + A[i] &gt;= A[i]:            subMaxSums[i] = subMaxSums[i+<span class="hljs-number">1</span>]+A[i]            subMaxEnds[i] = subMaxEnds[i+<span class="hljs-number">1</span>]        <span class="hljs-keyword">else</span>:            subMaxSums[i] = A[i]            subMaxEnds[i] = i    left = right = max_len = cur = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> right &lt; len(A):        cur += subMaxSums[right]        right = subMaxEnds[right] + <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> cur &lt; k <span class="hljs-keyword">and</span> left &lt; right:            cur -= A[left]            left += <span class="hljs-number">1</span>        max_len = max(max_len, right-left)    <span class="hljs-keyword">return</span> max_len</code></pre><ul><li>注意代码中，sliding window 部分需要检查<code>left&lt;right</code>因为给定的<code>k</code>可能会小于0。</li></ul><p>与此对应的，这里我们可以利用subarray min sum的特点:</p><ul><li>给定一个起点<code>A[i]</code>，以其为起点的的subarray min sum最慢增长的方式的一个subarray。</li></ul><p>考虑下面这个数据:</p><pre><code class="hljs python">       A = [<span class="hljs-number">1</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">4</span>]subarray = [<span class="hljs-number">-6</span>,<span class="hljs-number">-7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">4</span>] <span class="hljs-comment"># subarray min sum</span><span class="hljs-comment">#单独看位置0</span>                                    [<span class="hljs-number">4</span>] = <span class="hljs-number">4</span>                         [<span class="hljs-number">4</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">-6</span>] = <span class="hljs-number">3</span>                  [<span class="hljs-number">3</span>, <span class="hljs-number">-3</span>] = <span class="hljs-number">0</span>           [<span class="hljs-number">1</span>, <span class="hljs-number">-7</span>] = <span class="hljs-number">-6</span></code></pre><ul><li>我们发现以subarray min sum形成了单调递增的特性，这样我们只要利用sliding window技巧进行窗口添加或者删除即可找到最长的长度。</li></ul><h2 id="Longest-Subarray-Sum-Smaller-than-or-Equal-to-k"><a href="#Longest-Subarray-Sum-Smaller-than-or-Equal-to-k" class="headerlink" title="Longest Subarray Sum Smaller than or Equal to k"></a>Longest Subarray Sum Smaller than or Equal to k</h2><p>问题: 给定一个无序数组<code>arr</code>，其中元素可正、可负、可 0。 给定一个整数<code>k</code>  ，求<code>arr</code> 所有的子数组中累加和小于或等于<code>k</code>的最长子数组长度。</p><p>分析:  此题，通用可以使用上述两种形式的二分法。先考虑prefix Sum排序的方式，因为需要找到第一个大于<code>preSum[i]-k</code>的元素，所以这里我们依然对prefix Sum从排序，且对index倒叙做记录当前最小的处理，这样二分法只用查找第一个大于等于<code>preSum[i]-k</code>的元素即可，图如下:</p><p><img src="image-20201005221722683.png" srcset="/img/loading.gif" alt="image-20201005221722683"></p><p>处理后prefix Sum和index array.</p><p><img src="image-20201005222225305.png" srcset="/img/loading.gif" alt="image-20201005222225305"></p><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestIV</span><span class="hljs-params">(A, k)</span>:</span>    preSum, max_len, minIdx, cur = [[<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>]], <span class="hljs-number">0</span>, [<span class="hljs-number">0</span>] * (len(A)+<span class="hljs-number">1</span>), <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        preSum.append([preSum[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] + A[i], i])    preSum.sort()    preS = [preSum[i][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(preSum))]    minIdx[<span class="hljs-number">-1</span>] = preSum[<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(preSum)<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):        minIdx[i] = (min(preSum[i][<span class="hljs-number">1</span>], minIdx[i+<span class="hljs-number">1</span>]))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        cur += A[i]        j = binarySearch_first_largerthan_equal(preS, cur-k)        <span class="hljs-keyword">if</span> j != <span class="hljs-number">-1</span> <span class="hljs-keyword">and</span> minIdx[j] &lt; i:            max_len = max(max_len, i - minIdx[j])    <span class="hljs-keyword">return</span> max_len<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binarySearch_first_largerthan_equal</span><span class="hljs-params">(A, target)</span>:</span>    start, end = <span class="hljs-number">0</span>, len(A) - <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:        mid = (start + end)//<span class="hljs-number">2</span>        <span class="hljs-keyword">if</span> A[mid] &gt;= target:            end = mid        <span class="hljs-keyword">else</span>:            start = mid    <span class="hljs-keyword">if</span> A[start] &gt;= target:        <span class="hljs-keyword">return</span> start    <span class="hljs-keyword">if</span> A[end] &gt;= target:        <span class="hljs-keyword">return</span> end    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></code></pre><p>使用technique: Creating Monotonic Prefix Sum from Original Prefix Sum的图，处理如下:</p><p><img src="image-20201005223425826.png" srcset="/img/loading.gif" alt="image-20201005223425826"></p><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestV</span><span class="hljs-params">(A, k)</span>:</span>    max_len, preSum, helperSum = <span class="hljs-number">0</span>, [<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        preSum.append(A[i] + preSum[<span class="hljs-number">-1</span>])        j = binarySearch_first_largerthan_equal(helperSum, preSum[<span class="hljs-number">-1</span>]-k)        <span class="hljs-keyword">if</span> j != <span class="hljs-number">-1</span>:        max_len = max(max_len, i - j + <span class="hljs-number">1</span>)        helperSum.append(max(preSum[<span class="hljs-number">-1</span>], helperSum[<span class="hljs-number">-1</span>]))    <span class="hljs-keyword">return</span> max_len</code></pre><p>根据Technique: Subarray Min/Max Sum Making it O(n) time的单调特性，代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestVI</span><span class="hljs-params">(A, k)</span>:</span>    subMinSums, subMinEnds = [<span class="hljs-number">0</span>]*(len(A)<span class="hljs-number">-1</span>) + [A[<span class="hljs-number">-1</span>]], [<span class="hljs-number">0</span>]*(len(A)<span class="hljs-number">-1</span>) + [len(A)<span class="hljs-number">-1</span>]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):        <span class="hljs-keyword">if</span> subMinSums[i+<span class="hljs-number">1</span>] + A[i] &lt; A[i]:            subMinSums[i] = subMinSums[i+<span class="hljs-number">1</span>] + A[i]            subMinEnds[i] = subMinEnds[i+<span class="hljs-number">1</span>]        <span class="hljs-keyword">else</span>:            subMinSums[i] = A[i]            subMinEnds[i] = i    cur = max_len = right =left = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> right &lt; len(A):        cur += subMinSums[right]        right = subMinEnds[right] + <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> cur &gt; k <span class="hljs-keyword">and</span> left &lt; right:            cur -= A[left]            left += <span class="hljs-number">1</span>        max_len = max(max_len, right-left)    <span class="hljs-keyword">return</span> max_len</code></pre><h2 id="Maximum-Average-Subarray-II"><a href="#Maximum-Average-Subarray-II" class="headerlink" title="Maximum Average Subarray II"></a><a href="https://www.lintcode.com/problem/maximum-average-subarray-ii/" target="_blank" rel="noopener">Maximum Average Subarray II</a></h2><p>to be continued.</p><h2 id="Maximum-Subarray-XOR-https-my-oschina-net-u-4265926-blog-3304565"><a href="#Maximum-Subarray-XOR-https-my-oschina-net-u-4265926-blog-3304565" class="headerlink" title="[Maximum Subarray XOR]https://my.oschina.net/u/4265926/blog/3304565"></a>[Maximum Subarray XOR]<a href="https://my.oschina.net/u/4265926/blog/3304565" target="_blank" rel="noopener">https://my.oschina.net/u/4265926/blog/3304565</a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Greedy</tag>
      
      <tag>Dynamic Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Morris Traversal</title>
    <link href="/2020/10/03/Morris-Traversal/"/>
    <url>/2020/10/03/Morris-Traversal/</url>
    
    <content type="html"><![CDATA[<blockquote><p>A constant space traversal algorithm, which is amazing.</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Monotonic Queue</title>
    <link href="/2020/10/03/Monotonic-Queue/"/>
    <url>/2020/10/03/Monotonic-Queue/</url>
    
    <content type="html"><![CDATA[<blockquote><p>A very strong data structure.</p></blockquote><a id="more"></a><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>数据按照单调的方式加入，对于新加入的不满足单调形式的数据，踢除队列中原有的数据，使得当前的数据能满足单调性。其操作如下图:</p><p align="center">  <img width="600" src="https://miro.medium.com/max/6638/1*xFvh11sgRi0hf662wAAhkQ.jpeg" srcset="/img/loading.gif"></p><h2 id="Important-observations"><a href="#Important-observations" class="headerlink" title="Important observations:"></a>Important observations:</h2><ul><li><p>单调栈维护区域最小(最大)值。</p><ul><li>单调递增栈: 区域最小值</li><li>单调递减栈: 区域最大值</li></ul></li><li><p>弹栈能找到当前元素的在栈元素区间的次大(次小)值</p></li><li><p>单调栈快速定位比当前元素大的最近的左右两个元素。如图所示</p></li></ul><p><img src="image-20201003164019321.png" srcset="/img/loading.gif" alt="image-20201003164019321"></p><ul><li>维护最慢增长(减少)的数字序列(字典序列)</li></ul><p><img src="image-20201003175326373.png" srcset="/img/loading.gif" alt="image-20201003175326373"></p><ul><li>维护最慢增长(减少)的不重复数字的序列(字典序列，利用hash判断存在就不进栈了)</li></ul><p><img src="image-20201003223632570.png" srcset="/img/loading.gif" alt="image-20201003223632570"></p><ul><li>维护距离当前元素最近的差距值为x的元素</li></ul><p><img src="image-20201003175501817.png" srcset="/img/loading.gif" alt="image-20201003175501817"></p><ul><li><p>单调递减栈: 两两栈元素A[i]和A[j]区间的元素大于max(A[i], A[j])</p></li><li><p>单调递增栈: 两两栈元素A[i]和A[j]区间的元素小于min(A[i], A[j])</p></li></ul><h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><p>基于这些特性，我们可以解决如下的问题。</p><h2 id="Largest-Rectangle-in-Histogram"><a href="#Largest-Rectangle-in-Histogram" class="headerlink" title="Largest Rectangle in Histogram"></a><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/" target="_blank" rel="noopener">Largest Rectangle in Histogram</a></h2><p>问题:  Given n non-negative integers representing the histogram’s bar height where the width of each bar is <code>1</code>, find the area of largest rectangle in the histogram.</p><p>分析: 对于每一个柱体来说，我们需要找出左右第一个比其矮的数字，这样就可以确定包含当前柱体最大矩形面积。于是单调递增栈正好具备这个用法。虽然知道了使用单调栈的大方向，但是需要注意的细节有:</p><ul><li>如果一个柱体左右没有比其矮的柱子，我们需要默认添加0的柱子</li><li>单调栈遇到相同的柱子并不能踢除</li></ul><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">largestRectangleArea</span><span class="hljs-params">(self, heights: List[int])</span> -&gt; int:</span>    heights.append(<span class="hljs-number">0</span>)    max_gram, stack = <span class="hljs-number">0</span>, [<span class="hljs-number">-1</span>]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(heights)):         <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> heights[stack[<span class="hljs-number">-1</span>]] &gt; heights[i]:            idx = stack.pop()            max_gram = max(max_gram, heights[idx]*(i-stack[<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>))        stack.append(i)    <span class="hljs-keyword">return</span> max_gram</code></pre><p>这里的代码设计，我们再heights中添加一个0的好处是，确保末尾有一个高度为0的柱子，能弹出单调栈所有的东西。其次，我们需要开始有一个位置-1高度为0的柱子，我们在stack初始化的时候添加[-1]，便确保了这个最初的高度为0的柱子可以被调用(利用最后一个为0，复用他们)</p><h2 id="Remove-K-Digits"><a href="#Remove-K-Digits" class="headerlink" title="Remove K Digits"></a><a href="https://leetcode.com/problems/remove-k-digits/" target="_blank" rel="noopener">Remove K Digits</a></h2><p>问题: Given a non-negative integer <code>num</code> represented as a string, remove <code>k</code> digits from the number so that the new number is the smallest possible.</p><p>分析: 实现单调栈的过程就已经删除了元素且形成最小的数字，所以直接应用单调递增栈。但是，需要注意的细节有:</p><ul><li>如果删除元素的数量k超过数组长度，则直接反回0</li><li>如果删除元素的数量k大于单调栈形成最小数删除的数量，需要对形成的单调栈的进行尾部(栈顶)删除。</li><li>单调栈保留相同的元素。</li></ul><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeKdigits</span><span class="hljs-params">(self, num: str, k: int)</span> -&gt; str:</span>    <span class="hljs-keyword">if</span> k &gt;= len(num): <span class="hljs-keyword">return</span> <span class="hljs-string">'0'</span>    stack, cnt = [], <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(num)):        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> stack[<span class="hljs-number">-1</span>] &gt; num[i] <span class="hljs-keyword">and</span> cnt &lt; k:            stack.pop()            cnt += <span class="hljs-number">1</span>            stack.append(num[i])    <span class="hljs-keyword">return</span> str(int(<span class="hljs-string">''</span>.join(stack[:len(stack)-(k-cnt)])))</code></pre><p>这里利用cnt计数，实现了对需要删除的数量统计。</p><h2 id="Remove-Duplicate-Letters"><a href="#Remove-Duplicate-Letters" class="headerlink" title="Remove Duplicate Letters"></a><a href="https://leetcode.com/problems/remove-duplicate-letters/" target="_blank" rel="noopener">Remove Duplicate Letters</a></h2><p>问题: Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p><p>分析:  利用单调栈求最慢增长序列的性质。 由于没有重复元素，于是需要对于已经出现的元素进行保留，利用hash查询。</p><ul><li>当前元素可以被踢除的必要条件是，其在后续会出现</li></ul><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeDuplicateLetters</span><span class="hljs-params">(self, s: str)</span> -&gt; str:</span>    pos = &#123;s[i]:i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s))&#125;    stack, stored = [], set([])    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(s)):        <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">in</span> stored:            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> ord(stack[<span class="hljs-number">-1</span>]) &gt;= ord(s[i]) <span class="hljs-keyword">and</span> pos[stack[<span class="hljs-number">-1</span>]] &gt;= i:            stored.remove(stack.pop())          stack.append(s[i])        stored.add(s[i])    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(stack)</code></pre><h2 id="132-Pattern"><a href="#132-Pattern" class="headerlink" title="132 Pattern"></a><a href="https://leetcode.com/problems/132-pattern/" target="_blank" rel="noopener">132 Pattern</a></h2><p>问题: Given an array of <code>n</code> integers <code>nums</code>, a <strong>132 pattern</strong> is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>. Return <code>true</code> if there is a <strong>132 pattern</strong> in <code>nums</code>, otherwise return <code>false</code>.</p><p>分析:  两种思路，一般会先想到，遍历3，定1再找2，对于每一个<code>i</code>元素13很好找，因为3可以认为是最大的元素，但是2就需要遍历了。这样无法做到线性时间。所以，转而回到另一种思路，遍历3，定2再找1。其中对于每一个3来说，其最好的2就是次大元素，然而如何快速找到次大元素，而不是O(n)的遍历。这里的关键是，利用逆序单调递减栈的弹栈特点，弹栈元素必有次大，接下来的问题就是分析，这个local次大是否能代替global次大的作用。假设当前为<code>nums[i]</code>，栈顶元素为<code>s[-1]</code>，讨论如下:</p><ul><li><code>nums[i]&lt;s[-1]</code>， 入栈。这是由于单调递减栈，两两元素间隔的元素一定大于其最大，<code>nums[i]</code>左边的元素一定没有小它的。</li><li><code>nums[i]&gt;=s[-1]</code> ，能在弹栈的时候找到一个次大<code>nums[i]</code>的数，定为其对应的2。<ul><li>反证: 对于<code>nums[i]</code>的次大数来说，假设在<code>s[-1]</code>之左边还有比其大的次大值<code>s[-1]&#39;</code>。那么，<code>s[-1]</code>， <code>s[0]</code>， <code>s[-1]&#39;</code>，已经构成132pattern.</li></ul></li></ul><p>这样我们就确定了，单调栈弹栈的local次大能代替global次大，代码如下。</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find132pattern</span><span class="hljs-params">(self, nums: List[int])</span> -&gt; bool:</span>    stack, _2nd_largest = [], -sys.maxsize    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):        <span class="hljs-keyword">if</span> nums[i] &lt; _2nd_largest:            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> stack[<span class="hljs-number">-1</span>] &lt; nums[i]:            _2nd_largest = stack.pop()        stack.append(nums[i])    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span></code></pre><p>代码的细节中，因为每次次大找到，所以只用判定新元素是否小于次大则return True。</p><h2 id="Shortest-Subarray-with-Sum-at-Least-K"><a href="#Shortest-Subarray-with-Sum-at-Least-K" class="headerlink" title="Shortest Subarray with Sum at Least K"></a><a href="https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/" target="_blank" rel="noopener">Shortest Subarray with Sum at Least K</a></h2><p>问题: Return the <strong>length</strong> of the shortest, non-empty, contiguous subarray of <code>A</code> with sum at least <code>K</code>. If there is no non-empty subarray with sum at least <code>K</code>, return <code>-1</code>.</p><p>分析: 因为是nearest的differecen至少为K，直接利用单调栈的性质，这里我们维护一个单调队列即可。细想一下，对于每一个元素，其最近距离至少为k的值就是单调队列维护的元素。注意点就是，因为求最短，需要实时踢除队列头部元素即可。</p><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shortestSubarray</span><span class="hljs-params">(self, A: List[int], K: int)</span> -&gt; int:</span>    preSum, min_len, q = [<span class="hljs-number">0</span>], sys.maxsize, collections.deque([])    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> A:        preSum.append(preSum[<span class="hljs-number">-1</span>] + e)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(preSum)):        <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> preSum[q[<span class="hljs-number">-1</span>]] &gt; preSum[i]:            q.pop()        <span class="hljs-keyword">while</span> q <span class="hljs-keyword">and</span> preSum[i] - K &gt;= preSum[q[<span class="hljs-number">0</span>]]:            min_len = min(min_len, i-q.popleft())               q.append(i)    <span class="hljs-keyword">return</span> min_len <span class="hljs-keyword">if</span> min_len != sys.maxsize <span class="hljs-keyword">else</span> <span class="hljs-number">-1</span></code></pre><h2 id="Longest-Continuous-Subarray-With-Absolute-Diff"><a href="#Longest-Continuous-Subarray-With-Absolute-Diff" class="headerlink" title="Longest Continuous Subarray With Absolute Diff"></a><a href="https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/" target="_blank" rel="noopener">Longest Continuous Subarray With Absolute Diff</a></h2><p>问题: Given an array of integers <code>nums</code> and an integer <code>limit</code>, return the size of the longest <strong>non-empty</strong> subarray such that the absolute difference between any two elements of this subarray is less than or equal to <code>limit</code><em>.</em></p><p>分析: 利用单调栈能记录区间最大，最小值的性质。维护两个单调队列，且当队列头的diff超过limit的时候，踢除队头元素。这里第二个运用单调队列的性质是，单调递增，任意队列两元素之间的值必然大于其俩最大值，于是左指针停留在最后一个被踢的位置加1。</p><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestSubarray</span><span class="hljs-params">(self, nums: List[int], limit: int)</span> -&gt; int:</span>    ascend, descend, max_len, j = collections.deque(), collections.deque(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(nums)):        <span class="hljs-keyword">while</span> ascend <span class="hljs-keyword">and</span> nums[ascend[<span class="hljs-number">-1</span>]] &gt; nums[i]:            ascend.pop()        <span class="hljs-keyword">while</span> descend <span class="hljs-keyword">and</span> nums[descend[<span class="hljs-number">-1</span>]] &lt; nums[i]:            descend.pop()        ascend.append(i)        descend.append(i)        <span class="hljs-keyword">while</span> abs(nums[ascend[<span class="hljs-number">0</span>]]-nums[descend[<span class="hljs-number">0</span>]]) &gt; limit:             j = min(ascend[<span class="hljs-number">0</span>], descend[<span class="hljs-number">0</span>]) + <span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> ascend[<span class="hljs-number">0</span>] &gt; descend[<span class="hljs-number">0</span>]:                descend.popleft()            <span class="hljs-keyword">else</span>:                ascend.popleft()        max_len = max(max_len, i-j+<span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> max_len</code></pre><h2 id="烽火-https-blog-csdn-net-zxzxzx0119-article-details-81662792"><a href="#烽火-https-blog-csdn-net-zxzxzx0119-article-details-81662792" class="headerlink" title="[烽火]https://blog.csdn.net/zxzxzx0119/article/details/81662792"></a>[烽火]<a href="https://blog.csdn.net/zxzxzx0119/article/details/81662792" target="_blank" rel="noopener">https://blog.csdn.net/zxzxzx0119/article/details/81662792</a></h2>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP Algorithm</title>
    <link href="/2020/10/03/KMP-Algorithm/"/>
    <url>/2020/10/03/KMP-Algorithm/</url>
    
    <content type="html"><![CDATA[<blockquote><p>A linear time string matching algorithm.</p></blockquote><a id="more"></a>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2020/08/23/MySQL/"/>
    <url>/2020/08/23/MySQL/</url>
    
    <content type="html"><![CDATA[<blockquote><p>It&#39;s my MySQL learning note.</p></blockquote><a id="more"></a><h1 id="MySQL-Note"><a href="#MySQL-Note" class="headerlink" title="MySQL Note"></a>MySQL Note</h1><h2 id="Common-command"><a href="#Common-command" class="headerlink" title="Common command"></a>Common command</h2><ol><li>mysql -uroot - p</li><li>show databases</li><li>show table</li><li>desc tableName</li></ol><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><h3 id="Basic-query"><a href="#Basic-query" class="headerlink" title="Basic query:"></a>Basic query:</h3><ol><li>select colomn1, colomn2, … from table;<ul><li>end with “;”</li><li>no uppercase and lower case</li></ul></li><li>select empno, ename, sal*12 yearsal from emp;<ul><li>modify the column name</li></ul></li><li>select * from emp;<ul><li>check all, but not recommend</li></ul></li></ol><h3 id="Condition-query"><a href="#Condition-query" class="headerlink" title="Condition query"></a>Condition query</h3><ol><li><p>select col1, col2 from tableName where condition;</p><ul><li><p>First from, then where, last select</p></li><li><p>eg: select sal from emp where ename = ‘SMITH’;</p></li><li><p>eg: select ename, sal from emp where sal &gt; 3000;</p></li></ul></li></ol><ol start="2"><li><p>select ename, sal from emp where sal &gt;= 1100 and sal &lt;= 3000;</p><ul><li>select ename, sal from emp where between 1100 and 3000; </li><li>between x and  y means [x, y]</li><li>x &lt;= y</li></ul></li><li><p>between and also applies to varchar</p><ul><li>[‘a’, ‘c’) a little difference</li></ul></li><li><p>NULL means empty, represents nothing can not be used with ‘=’, only used with ‘is null’ or ‘is not null’.</p><ul><li>eg: select ename, comm from emp where comm is null;</li><li>eg: select ename, sal, comm from emp where comm is null or comm = 0;</li></ul></li><li><p>and or</p><ul><li>eg: select ename, sal, deptno from emp where sal &gt; 1000 and (deptno = 30 or deptno = 20);</li></ul></li><li><p>in (or)</p><ul><li>select ename, job from emp where job in (‘salesman’, ‘manager’);</li><li>select ename, job from emp where sal in (800, 5000);</li></ul></li><li><p>like</p><ul><li>% represents any number of char</li><li>_ represents a single char</li><li>select ename from emp where ename like ‘%O%’;</li><li>select ename from emp where ename like ‘_A%’;</li><li>select ename from emp where ename like ‘%\_%’;</li><li>‘\<em>‘ can check the symbol ‘\</em>‘;</li></ul></li></ol><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><ol><li>order by (default ascending order)<ul><li>select ename, sal from emp order by sal;</li><li>select ename, sal from emp order by sal desc;</li></ul></li><li>sort multiple colums<ul><li>select ename, sal from emp order by sal desc, ename asc;</li></ul></li><li>order by index<ul><li>select ename, sal from emp order by 2;</li></ul></li><li>1 from, 2 where, 3 select, 4 order by<ul><li>select ename, job, sal from emp where job=’salesman’ order by sal desc;</li></ul></li></ol><h3 id="Multi-col-Function"><a href="#Multi-col-Function" class="headerlink" title="Multi-col Function"></a>Multi-col Function</h3><ol><li>count<ul><li>select count(ename) from emp;</li><li>count(*) is not releted to column data</li></ul></li><li>sum<ul><li>select sum(sal) from emp;</li></ul></li><li>avg</li><li>max<ul><li>select max(sal) from emp;</li></ul></li><li>min<ul><li>select min(sal) from emp;</li></ul></li><li>sd</li></ol><p>Those functions apply to a group of data, and they will <strong>ignore null</strong>.</p><p>They <strong>can’t</strong> be used in <strong>where</strong> condition/ </p><h3 id="Single-col-Function"><a href="#Single-col-Function" class="headerlink" title="Single-col Function"></a>Single-col Function</h3><p><strong>If null is in calculation, the result is null</strong>.</p><ol><li>ifnull()<ul><li>select ename, (sal + ifnull(comm, 0))*12 yearsal from emp;</li></ul></li></ol><h3 id="Function-Group-by-Having"><a href="#Function-Group-by-Having" class="headerlink" title="Function: Group by, Having"></a>Function: Group by, Having</h3><ol><li><p>group by:</p><ul><li>select max(sal) from emp group by job;</li></ul></li><li><p>having</p></li><li><p>select ename, sal from emp where sal &gt; avg(sal) wrong!</p><ul><li>select       5</li><li>from        1</li><li>where      2</li><li>group by 3</li><li>having     4</li><li>order by  6</li></ul><p>this means group function can only be used after employing group by. </p><p>select ename, sal from emp where sal &gt; (select avg(sal) from emp);</p></li><li><p>if using group by: only A and group function (B) can be after select </p><ul><li>select A, max(B) from x group by A.</li></ul></li><li><p>select deptno, job, max(sal) from emp group by deptno, job</p></li><li><p>select max(sal),deptno from emp group by deptno having max(sal) &gt; 2900; not efficient</p><ul><li>select max(sal),deptno from emp where sal &gt; 2900 group by deptno; more efficient</li><li>select avg(sal),deptno from emp group by deptno having avg(sal) &gt; 2000; this case we must use having.</li></ul></li><li><p>having must be used with group by</p></li><li><p>a complete DQL:</p><ul><li>select          5</li><li>from           1</li><li>where         2</li><li>group by    3</li><li>having        4</li><li>order by     6</li></ul></li><li><p>select distinct job from emp,</p><ul><li>select ename, distinct job from emp: wrong</li><li>distinct must be first one</li></ul></li><li><p>select distinct deptno, job from emp; remove combo duplicates</p></li><li><p>how many positions</p><ul><li>select count(distinct job) from emp;</li></ul></li></ol><h3 id="LInked-Query"><a href="#LInked-Query" class="headerlink" title="LInked Query"></a>LInked Query</h3><ol><li>select e.ename, d.dname from emp e, dept d; </li></ol><ul><li>dikirl </li></ul><ol start="2"><li><p>select e.ename, d.dname from emp e, dept d where e.deptno = d.deptno (sql 92)</p></li><li><p>equal link</p><ul><li>select e.ename, d.dname from emp e join dept d on e.deptno = d.deptno where ..(sql 99)</li></ul></li><li><p>select (inequal link)</p><p>​    e.ename, s.sal, sal.grade </p><p>from </p><p>​    emp</p><p>join</p><p>​    sal</p><p>on</p><p>​    e.sal between s.losal and s.hisal;  </p></li><li><p>self link</p><ul><li>select<ul><li>a.ename as ‘emplee’, b.ename as ‘boss’</li></ul></li><li>from<ul><li>emp a</li></ul></li><li>join<ul><li>emp b</li></ul></li><li>on <ul><li>a.mgr = b.empno;</li></ul></li></ul></li><li><p>sd</p></li><li><p>sd</p></li><li></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Two Pointers</title>
    <link href="/2020/08/05/Two-Pointers/"/>
    <url>/2020/08/05/Two-Pointers/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The forward pattern generally requires to move two pointers in one direction.</p></blockquote><a id="more"></a><h1 id="Forward-Pattern"><a href="#Forward-Pattern" class="headerlink" title="Forward Pattern"></a>Forward Pattern</h1><p>前向双指针: 两个指针同向运行进行判定。</p><h2 id="Problem1-Remove-Duplicate"><a href="#Problem1-Remove-Duplicate" class="headerlink" title="Problem1: Remove Duplicate"></a>Problem1: Remove Duplicate</h2><p>This problem asks to remove duplicates. In fact, there are variety of versions, depending on what needs to be kept in the array. In the following, we present a nice template of it, which can be easily extended to satisfy different needs.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    <span class="hljs-comment"># stored means the stored element in the new defined list</span>    stored, i, cnt = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> i &lt; len(A):        <span class="hljs-comment"># this piece is for counting the repeated elements</span>        <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> nums[i] == nums[stored]:            i, cnt = i+<span class="hljs-number">1</span>, cnt+<span class="hljs-number">1</span>        <span class="hljs-comment"># this piece keeps the element (of the given cnt)   </span>        <span class="hljs-keyword">if</span> cnt &lt;= k0:            <span class="hljs-comment"># in fact, copy the stored elemetns k-1 times, element nums[i] 1 time</span>            kept_times = min(min_kept_times, cnt)            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(kept_times<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):                <span class="hljs-keyword">if</span> i-j &lt; len(A):                    stored += <span class="hljs-number">1</span>                     nums[stored] = nums[i-j]                            <span class="hljs-comment"># this piece removes the element (totally)</span>        <span class="hljs-keyword">if</span> cnt == k2:            <span class="hljs-keyword">if</span> i &lt; len(A):            nums[stored] = nums[i]            <span class="hljs-keyword">else</span>:        <span class="hljs-comment"># this piece removes the last element for i cross the length         </span>                stored -= <span class="hljs-number">1</span>        <span class="hljs-comment"># this piece update i and cnt</span>        i += <span class="hljs-number">1</span>      cnt = <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> stored + <span class="hljs-number">1</span></code></pre><p>模板中的关键语句:</p><ul><li><p>模板中，<code>nums[stored]</code>存储的时重复一次的元素。</p></li><li><p>统计重复元素</p></li></ul><pre><code class="hljs python"><span class="hljs-comment"># 统计重复数据的起始位置</span><span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> nums[i] == nums[stored]:    i, cnt = i+<span class="hljs-number">1</span>, cnt+<span class="hljs-number">1</span><span class="hljs-comment"># 退出循环，给出不同的位置。其中stored是左指针，用于存放重复元素的第一个</span><span class="hljs-comment"># 退出循环时，nums[i]表示当前不重复的nums[stored]的元素了</span><span class="hljs-keyword">pass</span><span class="hljs-comment"># other pieces</span>i += <span class="hljs-number">1</span> cnt = <span class="hljs-number">1</span> <span class="hljs-comment"># cnt 置1，时因为之前nums[i]已经被存到了nums[stored],此时nums[i]变化到了nums[i+1]上面，所以默认计数为1。</span></code></pre><ul><li>达到重复的数量，进行彻底删除</li></ul><pre><code class="hljs python"><span class="hljs-keyword">if</span> cnt == k1:    <span class="hljs-keyword">if</span> i &lt; len(A):        nums[stored] = nums[i] <span class="hljs-comment"># 因为是彻底删除，所以stored不用加1</span>    <span class="hljs-keyword">else</span>:    <span class="hljs-comment"># 因为对于重复需要彻底删除，所以末尾的时候，stored回退1，才是正常的index位置。</span>        stored -= <span class="hljs-number">1</span></code></pre><ul><li>对于不满重复limit的元素，进行赋值保留。</li></ul><pre><code class="hljs python"><span class="hljs-keyword">if</span> cnt &lt;= k0:    <span class="hljs-comment"># 只用重复 cnt-1 次, 因为nums[i]已经算了1次了。</span>    kept_times = min(min_kept_times, cnt)    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(kept_times<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):        <span class="hljs-keyword">if</span> i-j &lt; len(A): <span class="hljs-comment">#这句很重要，保证最后退出的时候，操作的nums[i]不越界， 且保证最后i=len(A)的时候，也处理了nums[i-1]的那些重复元素。</span>            stored += <span class="hljs-number">1</span>             nums[stored] = nums[i-j]</code></pre><p>Based on the above template, we take a look at a few questions of removing duplicates.</p><h3 id="Basic-Version-Remove-Duplicates-from-Sorted-Array"><a href="#Basic-Version-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Basic Version Remove Duplicates from Sorted Array"></a>Basic Version <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array</a></h3><p>For the basic one, we present an answer based on the template and another shorter one.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    stored = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">if</span> nums[i] != nums[stored]:            stored += <span class="hljs-number">1</span>            nums[stored] = nums[i]    <span class="hljs-keyword">return</span> stored + <span class="hljs-number">1</span></code></pre><p>The answer based on the template is shown as</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    stored, i = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> i &lt; len(A):        <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> nums[i] == nums[stored]:            i += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> i &lt; len(A):            stored += <span class="hljs-number">1</span>            nums[stored] = nums[i]        i += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> stored + <span class="hljs-number">1</span></code></pre><ul><li>个人倾向于模板，更利于理解。</li></ul><h3 id="Keeping-Two-Version-Remove-Duplicates-from-Sorted-Array-II"><a href="#Keeping-Two-Version-Remove-Duplicates-from-Sorted-Array-II" class="headerlink" title="Keeping Two Version Remove Duplicates from Sorted Array II "></a>Keeping Two Version <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array II </a></h3><p>For this one, we also display two answers. First, we show the shorter one.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    <span class="hljs-keyword">if</span> len(A) &lt; <span class="hljs-number">3</span>: <span class="hljs-keyword">return</span> len(A)    stored = <span class="hljs-number">2</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, len(A)):        <span class="hljs-keyword">if</span> A[i] != A[stored<span class="hljs-number">-1</span>]:            stored += <span class="hljs-number">1</span>            A[stored] = A[i]    <span class="hljs-keyword">return</span> stored + <span class="hljs-number">1</span></code></pre><p>The next is the template one.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    stored, i, cnt = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> i &lt; len(A):    <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> A[i] == A[stored]:    i += <span class="hljs-number">1</span>    cnt += <span class="hljs-number">1</span>    cnt = min(<span class="hljs-number">2</span>, cnt)        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(cnt<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):            <span class="hljs-keyword">if</span> i-k &lt; len(A):            stored += <span class="hljs-number">1</span>            A[stored] = A[i-k]        cnt = <span class="hljs-number">1</span>        i += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> stored + <span class="hljs-number">1</span></code></pre><ul><li>个人倾向于模板，更利于理解。</li></ul><h3 id="Removing-duplicates-totally"><a href="#Removing-duplicates-totally" class="headerlink" title="Removing duplicates totally"></a>Removing duplicates totally</h3><p>The first one is shorter version.</p><p>The second is the template one.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    stored, i, cnt = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> i &lt; len(A):        <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> A[i] == A[stored]:            i += <span class="hljs-number">1</span>            cnt += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> i &lt; len(A):            <span class="hljs-keyword">if</span> cnt &lt;= <span class="hljs-number">1</span>: <span class="hljs-comment"># not repeated</span>                stored += <span class="hljs-number">1</span>            A[stored] = A[i]        <span class="hljs-keyword">else</span>:            stored -= <span class="hljs-number">1</span>        i += <span class="hljs-number">1</span>        cnt = <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> stored += <span class="hljs-number">1</span></code></pre><h3 id="Removing-triple-keeping-double-and-keeping-one-quadruple"><a href="#Removing-triple-keeping-double-and-keeping-one-quadruple" class="headerlink" title="Removing triple, keeping double and keeping one quadruple"></a>Removing triple, keeping double and keeping one quadruple</h3><p>For this complicated problem, we only show the template version.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove</span><span class="hljs-params">(A)</span>:</span>    stored, i, cnt = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> i &lt; len(A):    <span class="hljs-keyword">while</span> i &lt; len(A) <span class="hljs-keyword">and</span> A[i] == A[stored]:            i += <span class="hljs-number">1</span>            cnt += <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> cnt &lt;= <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> cnt &gt;= <span class="hljs-number">4</span>:            <span class="hljs-keyword">if</span> cnt &gt;= <span class="hljs-number">4</span>: j = <span class="hljs-number">1</span>             <span class="hljs-keyword">else</span>: j = min(cnt,<span class="hljs-number">2</span>)            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(j<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):                <span class="hljs-keyword">if</span> i-k &lt; len(A):                    stored += <span class="hljs-number">1</span>                    A[stored] = A[i-k]        <span class="hljs-keyword">elif</span> cnt == <span class="hljs-number">3</span>:            <span class="hljs-keyword">if</span> i &lt; len(A):                A[stored] = A[i]            <span class="hljs-keyword">else</span>:                stored -= <span class="hljs-number">1</span>        i += <span class="hljs-number">1</span>        cnt = <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> stored + <span class="hljs-number">1</span></code></pre><h1 id="Opposite-Direction-Pattern"><a href="#Opposite-Direction-Pattern" class="headerlink" title="Opposite Direction Pattern"></a>Opposite Direction Pattern</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Catalan Number</title>
    <link href="/2020/08/02/Catalan-Number/"/>
    <url>/2020/08/02/Catalan-Number/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Do you know what the Catalan number is?</p></blockquote><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The introduction problem is to find the number of paths from bottom left to top right withouting crossing the diagnal line as it shown in the figure above.</p><h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><h2 id="Problem-1-Buy-the-tickets"><a href="#Problem-1-Buy-the-tickets" class="headerlink" title="Problem 1: Buy the tickets"></a>Problem 1: Buy the tickets</h2><h2 id="Problem-2-Stand-in-two-lines"><a href="#Problem-2-Stand-in-two-lines" class="headerlink" title="Problem 2: Stand in two lines"></a>Problem 2: Stand in two lines</h2><h2 id="Problem-3-Correct-combo-of-parenthesis"><a href="#Problem-3-Correct-combo-of-parenthesis" class="headerlink" title="Problem 3: Correct combo of parenthesis"></a>Problem 3: Correct combo of parenthesis</h2><h2 id="Problem-4-Stack-Operation"><a href="#Problem-4-Stack-Operation" class="headerlink" title="Problem 4: Stack Operation"></a>Problem 4: Stack Operation</h2><h2 id="Problem-5-BST"><a href="#Problem-5-BST" class="headerlink" title="Problem 5: BST"></a>Problem 5: BST</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Space Complexity</title>
    <link href="/2020/07/29/Space-Complexity/"/>
    <url>/2020/07/29/Space-Complexity/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Interesting techniques on saving space.</p></blockquote><a id="more"></a><h1 id="On-Space-Complexity"><a href="#On-Space-Complexity" class="headerlink" title="On Space Complexity"></a>On Space Complexity</h1><p>We discuss some techniques to save space complexity. We will use some problems to illustrate them.</p><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1:"></a>Problem 1:</h2><p>Given an unsorted integer array, find the smallest missing positive integer.</p><p><strong>Example 1:</strong></p><pre><code class="hljs angelscript">Input: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>]Output: <span class="hljs-number">3</span></code></pre><p><strong>Example 2:</strong></p><pre><code class="hljs angelscript">Input: [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>]Output: <span class="hljs-number">2</span></code></pre><p><strong>Example 3:</strong></p><pre><code class="hljs angelscript">Input: [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]Output: <span class="hljs-number">1</span></code></pre><p>To achieve a O(n) algorithm, we can easily come up with an idea using hash. Or in a simpler way, we use array instead of hash to store the information. However, this requires O(n) space time complexity.</p><h3 id="Technique-1"><a href="#Technique-1" class="headerlink" title="Technique 1:"></a>Technique 1:</h3><p><strong>Using the given input to store the information</strong></p><p>Since we need a O(n) extra space to store the information, we in fact can use the input nums to store the needed information. For this question, this information, should be the number in [1, n], we just utilize the values in nums in [1, n] to negation the corresponding index of value.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findMissing</span><span class="hljs-params">(nums)</span>:</span>    f, n = <span class="hljs-number">0</span>, len(nums) - <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):        <span class="hljs-keyword">if</span> nums[i] == <span class="hljs-number">1</span>: f = <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> nums[i] &lt;= <span class="hljs-number">0</span>: nums[i] = n + <span class="hljs-number">2</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):        <span class="hljs-keyword">if</span> abs(nums[i]) &gt; n: <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> nums[abs(nums[i])<span class="hljs-number">-1</span>] &gt; <span class="hljs-number">0</span>:             nums[abs(nums[i])<span class="hljs-number">-1</span>] = -nums[abs(nums[i])<span class="hljs-number">-1</span>]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):        <span class="hljs-keyword">if</span> nums[i] &gt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span></code></pre><h2 id="Problem-2-Populating-Next-Right-Pointers-in-Each-Node"><a href="#Problem-2-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="Problem 2: Populating Next Right Pointers in Each Node"></a>Problem 2: Populating Next Right Pointers in Each Node</h2><p>Given a binary tree</p><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span>  <span class="hljs-keyword">int</span> val;  Node *left;  Node *right;  Node *next;&#125;</code></pre><p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p><strong>Follow up:</strong></p><ul><li>You may only use constant extra space.</li><li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li></ul><p>To lower the space complexity, we must utilize the information that has been stored in the data structure. In this case, the stored information is the linked list in the last row, we in fact can traverse it add the new right pointers.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connect</span><span class="hljs-params">(root)</span>:</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> root    cur, dummy = root, Node()    p = dummy    <span class="hljs-keyword">while</span> cur:        <span class="hljs-keyword">if</span> cur.left:            p.next = cur.left            p = p.next        <span class="hljs-keyword">if</span> cur.right:            p.next = cur.right            p = p.next        <span class="hljs-keyword">if</span> cur.next:            cur = cur.next        <span class="hljs-keyword">else</span>:            cur = dummy.next            dummy.next = <span class="hljs-literal">None</span>            p = dummy    <span class="hljs-keyword">return</span> root</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Combination and Permutation</title>
    <link href="/2020/07/28/Combination-and-Permutation/"/>
    <url>/2020/07/28/Combination-and-Permutation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>How do you find the combination with/without replacement?</p></blockquote><a id="more"></a><h1 id="Combination"><a href="#Combination" class="headerlink" title="Combination"></a>Combination</h1><p>This section discusses how to find the combination with/without replacement.</p><h2 id="Without-Replacement"><a href="#Without-Replacement" class="headerlink" title="Without Replacement"></a>Without Replacement</h2><p>Generally, if we find the combination based on the for loop, we need to a big amount of loops. To make it easier, we employ the recursion to find the combination.</p><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>,len(A)):        <span class="hljs-comment"># deal with the combination, [A[i], A[i]]</span></code></pre><p>To make it efficent, the recursion is introduced.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(A, start, target, combo, res)</span>:</span><span class="hljs-keyword">if</span> len(combo) == target:    res.append(list(combo))    <span class="hljs-keyword">return</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(start, len(A)):    combo.append(A[i])    dfs(A, start+<span class="hljs-number">1</span>, target, combo, res)    combo.pop()</code></pre><p>To avoid the repeative combinations:</p><ul><li>First, sort the array A</li><li>Then, using the following technique</li></ul><h3 id="Technique-1"><a href="#Technique-1" class="headerlink" title="Technique 1"></a>Technique 1</h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(A, start, target, combo, res)</span>:</span><span class="hljs-keyword">if</span> len(combo) == target:    res.append(list(combo))    <span class="hljs-keyword">return</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(start, len(A)):    <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i<span class="hljs-number">-1</span>]: <span class="hljs-comment">### technique 1, avoid repeatitions</span>    <span class="hljs-keyword">continue</span>    combo.append(A[i])    dfs(A, start+<span class="hljs-number">1</span>, target, combo, res)    combo.pop()</code></pre><p>This technique works because, On the same level, for the same elements, we only choose one of them! This also indicates we need to group the same elements together by sorting or any other methods.</p><h3 id="Technique-2"><a href="#Technique-2" class="headerlink" title="Technique 2"></a>Technique 2</h3><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(A, start, target, combo, res)</span>:</span><span class="hljs-keyword">if</span> len(combo) == target:    res.append(list(combo))    <span class="hljs-keyword">return</span>    used = set([])  <span class="hljs-comment">### technique 2, avoid repeatitions</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(start, len(A)):    <span class="hljs-keyword">if</span> A[i] <span class="hljs-keyword">in</span> used: <span class="hljs-comment">### technique 2, avoid repeatitions</span>    <span class="hljs-keyword">continue</span>    combo.append(A[i])    dfs(A, start+<span class="hljs-number">1</span>, target, combo, res)    combo.pop()</code></pre><p>This works as the same principle as Technique 1.</p><h2 id="With-Replacement"><a href="#With-Replacement" class="headerlink" title="With Replacement"></a>With Replacement</h2><p>To achieve the replacement, the code is shown as follows</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(A, start, target, combo, res)</span>:</span><span class="hljs-keyword">if</span> len(combo) == target:    res.append(list(combo))    <span class="hljs-keyword">return</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(start, len(A)):    combo.append(A[i])    dfs(A, start, target, combo, res) <span class="hljs-comment"># difference is here, don't need to be start + 1</span>    combo.pop()</code></pre><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1:"></a>Problem 1:</h2><p>How many combinations of getting n balls out of m type of balls with replacement?</p><h3 id="Solotion-1-Divider"><a href="#Solotion-1-Divider" class="headerlink" title="Solotion 1: Divider"></a>Solotion 1: Divider</h3><p>For the general problem without replacement, we consdier the following introduction problem:</p><p><strong>Problem</strong>: Suppose we are required to get n balls, and at least we need to get one type of each of m. How many combintaions are there?</p><p><strong>Solution</strong>: Based on the divider method, there are n-1 positions for m-1 dividers to set to solve the introduction problem. That is $$C^(m-1)_(n-1)$$.</p><p>Since the above problem assigns each type at least one ball, we extend it to our original problem by adding m balls, so that we solve the same problem with size of n + m, but with the two adjacient dividers with a difference of 1 we regard the ball in the middle means we assign no ball to this type. Therefore, the answer is $$C^(m-1)_(n+m-1)$$.</p><h3 id="Solution-2-DP"><a href="#Solution-2-DP" class="headerlink" title="Solution 2: DP"></a>Solution 2: DP</h3><p>It is interesing to notice that we can use DP to solve the problem. Based on the last step principle. We define dp[m][n] as the number of combinations to get n balls from the first m types</p><pre><code class="hljs python">dp[m][n] = d[m][n<span class="hljs-number">-1</span>] + dp[m<span class="hljs-number">-1</span>][n]</code></pre><ul><li><p>dp[m][n-1] represents the mth type is used as the nth ball, so the remmaing n-1 balls can still use first m types.</p></li><li><p>dp[m-1][n] represnets the mth type is not in any of the combinations. </p></li></ul><p>The inital conditions are:</p><pre><code class="hljs python">dp[m][<span class="hljs-number">1</span>] = mdp[<span class="hljs-number">1</span>][n] = <span class="hljs-number">1</span></code></pre><h1 id="Permutation"><a href="#Permutation" class="headerlink" title="Permutation"></a>Permutation</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode Note</title>
    <link href="/2020/07/24/Leetcode-Note/"/>
    <url>/2020/07/24/Leetcode-Note/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="3469f2925557d0db7277ca3ed91f2d70b68157283b6ab14d180d2dc3fd4e3515"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Coordinate Transformation</title>
    <link href="/2020/07/19/Coordinate-Transformation/"/>
    <url>/2020/07/19/Coordinate-Transformation/</url>
    
    <content type="html"><![CDATA[<p>Interesting coordinate transformation problem.</p><a id="more"></a><h1 id="Preliminary"><a href="#Preliminary" class="headerlink" title="Preliminary"></a>Preliminary</h1><p>Lemma 1. Given a problem <strong>P(y)</strong> with its coordinate y, if there exists an polynomial time algorithm A which solves the problem <strong>P(x)</strong> by using the coordinates x, where y = f(x) and f(x) is a <strong>bijective</strong> function, then the problem can be solved by A. </p><p>It is straightforward to prove the correctness of the above lemma, which is omitted.</p><h1 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h1><p>Problem: Wiggle sort II</p><p>P(x): The wiggle sort II with the true index system x</p><p>A: Using 3-3-color sort on the array in <span style="color:red"><strong>descending order</strong></span>.</p><p>P(y):  The wiggle sort II with the fake index system y,</p><p>It can be observed that we can solve the problem P(y) by using A.</p><p><img src="image-20200719130026567.png" srcset="/img/loading.gif" alt="image-20200719130950411"></p><p>So, we can solve the problem P(x) by solving the problem P(y) first and then apply the coordinate transfomation y=f(x) on it. The coordinate transformation function f(x) is given as:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getIndex</span><span class="hljs-params">(x)</span>:</span>    <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span>*x + <span class="hljs-number">1</span>)%(self.n|<span class="hljs-number">1</span>)</code></pre><p>This is because we consider odd and even cases. The function consider both by dividing len(nums)|1. </p><p>Hence, the coding is presented as:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wiggleSort</span><span class="hljs-params">(nums)</span>:</span>    self.n = n = len(nums)    median = findKNumber((n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>)    <span class="hljs-comment">## _2_time_partition(nums, median) which works the same as 3-color sort</span>    _3_color_sort(nums, median)    <span class="hljs-keyword">return</span> nums<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_3_color_sort</span><span class="hljs-params">(nums, pivot)</span>:</span>    left, cur, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, len(nums)<span class="hljs-number">-1</span>     <span class="hljs-keyword">while</span> cur &lt;= right:        <span class="hljs-keyword">if</span> nums[getIndex(cur)] &gt; pivot:        nums[getIndex(cur)], nums[getIndex(left)] = nums[getIndex(left)], nums[getIndex(cur)]            cur += <span class="hljs-number">1</span>            left += <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> nums[getIndex(cur)] &lt; pivot:            nums[getIndex(cur)], nums[getIndex(right)] = nums[getIndex(right)], nums[getIndex(cur)]        right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:    cur += <span class="hljs-number">1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_2_time_partition</span><span class="hljs-params">(nums, pivot)</span>:</span>    partition(nums, pivot, <span class="hljs-number">1</span>)    partition(nums, pivot, <span class="hljs-number">0</span>)     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(nums, pivot, tag)</span>:</span>    left, right = <span class="hljs-number">0</span>, len(nums)<span class="hljs-number">-1</span>    <span class="hljs-keyword">while</span> left &lt;= right:        <span class="hljs-keyword">if</span> tag == <span class="hljs-number">1</span>:            <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[getIndex(left)] &gt; pivot:                left += <span class="hljs-number">1</span>            <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[getIndex(right)] &lt;= pivot:                right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[getIndex(left)] &gt;= pivot:                left += <span class="hljs-number">1</span>            <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[getIndex(right)] &lt; pivot:                right -= <span class="hljs-number">1</span>                    <span class="hljs-keyword">if</span> left &lt;= right:            nums[getIndex(left)], nums[getIndex(right)] = nums[getIndex(right)], nums[getIndex(left)]            left += <span class="hljs-number">1</span>            right -= <span class="hljs-number">1</span></code></pre><p><img src="image-20200719144842314.png" srcset="/img/loading.gif" alt="image-20200719144842314"></p><h1 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2020 Plan</title>
    <link href="/2020/07/12/2020-Plan/"/>
    <url>/2020/07/12/2020-Plan/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7c266a2f0b6dbf5954ad1bde768d2f79ea43a5e514c40651e1df30f258633800">43a406129cb8bb9ccc0811537daf6a9974760ba48bbc62f699a1a64abbeef985ba119eb556a764551ad711d51b8e6e5967257360790e06fbd100905f8d7bd233357047e3d70b121bedea6958369f8324095ddf76a9781f6893e9b2d44b3c30d47d8d6ede156832ee0e0aa2c102be524b95e8b4347f79ac27fd3df981abd23bbfef521055197766dd4b932788111fe741a9da90700b55460a7f1da779d19f802bfe38e5f4841f9f4465e1f379f5939fda62afa3a3a3b664316deb505bea3f29f1441678563c35238680c632a14c8c52fe1f739c91b3c1012ff742b917267cf4ac4e85875bd1e256f979377e8d44f08c0a8303d385a367535031e5b4cab2c6005f587109fbf092b6877c4eb59bae03e2c08b2e6e55f309284d8bd8b6a902420a16895653c9d078cd9340931e2c70d05c73c2fc0bb042fb8de5e6500f0b60368627d0beae7b0e74e683e449e1635b072d0d65507c6abec7cd6667c7a86b1f2073a70cd97fde1b42f76070199d71fdfe6a136aa6cc5f791465b6237ec106d5df0c1f4d7581804bdad576867b9e6efcdf7fd57f41a34526564550689bda4b0d00fa218b7d7e23e101dbb3a53e5aad344bf82d9eb890c1c49365d1c664ad5072c679e0457beea748541c021621fc18f96b25b9c74af7bf892f5902909deac3487d786e097019a59cc4f75db0e40cd3be8b865a6a563d04055da2fd6f6404c59579689f33a3c816fc8d4911d6ac85d798fbdb57370e133e5730b4c23a37d86cee617b335b7751326839a48c92110401aabab1cac2494916e40b5277934ed5af99bcab80d100ee2cf46bc54f44c31c1b4c85397abfd4b44eec90120c94531c8b30c203729264721da6dba2ba47ef41a6d201031287700a03df960b426de6bb2301d8f2dfdba0a564674c389d88486ef068c97f4035af727132c439fa052a866af150de5d58cde94369c3d193deaaed362c589354440a2a2d148949b5c52c7838b93de05537316a30244f95b41567531720e1d60a708d0bc734a44abd1c10fbf246851d8b56da0f563555380f032f27a5351e6cb49d1bf4983ced093cf6fbc8a2f7246843cdee95bcc68282b3707fcb9c0407c73763fbc7ae31b3ac6c66742da6552920763e5916cde213e99f893ce529e6f1256e75c6085dc5aab018c89a6479e6cb2732f3cf6a4a0cb71cd2e3c1db392813e307a4541ebd559425aee3489089e8f703448a0496273a7cb5307dd4a769c587a8cf1e65112ba9302deb1d6968efd00d87123bc34a24fce382ac4aa65421d0a619c50ef35e434fbd76ca7cf84bd52b5cfc45aaa9d41f0eecbb0035256365ed8c2f4da4511a4e7832e06291c0ce2117b68ee3ec11bf12802577984e1b2b56fd47a5be8ef29245e10aea81e3d212a2e7b7e3cd0b963ecabe7c6f6b2e801035007ebbe4220b37890a37b4d511944ac819dbb7ee906b7c3d55755c14d3a9d59a2c5290bbcb9da68893d0d6e5fc331eb839753620b770b4e035468283a62eadff34f745cbfd52480c7267ea3e3f061f0c1d73f95d53436438283c018180cfb8c6eab3b5b2b07161d7bf19c8f60946895443f16ff38477b201049bbf580f2e7b56f62a4284da0a84f855ce788db5a6d7d58c25d7f58de33fed3cc42af9c778b4d5098cbce9ef7c297b38f9995cbd17c31cd9f321b34aeba35a4b5bce8fbdb5532bb2d5ea3a8983e9812d956614951d08316036177ea6c9afce972a5b81df318fc2cac09b3b66a65bc00c75baf9506dadb60b28dfb0bbc2e231f49179ae2958a13e179f77921c4c71ccd4819537da60353d59745ee0cd9ea499749c8e234f759c2579d7fa0c5cf3a8d3eb5e119fd804b7cea18067921f1d56a2a4d2c490a562fa869d62983b2a550d86edd54bd817c9484077f41494301974f3d7251039ef10cc696092262c23cdffb50c4ee41f224b8c03077de90ec421ee906532408d3b5e06a05cc9caa2337943e2e0d5a6d2023733325886a296bd3ba0463a8361174812179ed003ad50c0ebaa8c5fa7c4188118a4756523a92cce9a1046f0997ebd709917e65e4f66d21b6e2c4b44c585b8cb8df43dd0adbe0f7672d9c8a08040ef651aa26359acb0af799efde863a6adddd921a0ccba13600e0df868792a62e040b68430a2a479ede938114f7e3af2493b46299a4e864c82c6d3ad112452de60f1bc04acc5b0e899a9052839c8080780aba4a9b90e5d35169df4fc145d7ac0dad3764720913e80bb0160942e591d65fa875d35f7381a19c903766e5d6e330855d0ef238289c99b39cbedf1cb6d4a97cc344241090d66e808843a77b6c194b98082a762b5150ba3005c11a5a78bd4bd2c067a704a17d6eca9b727f5a884866b62e36d1efc6ef39b3346c9252dc0eea2016794386b163162180cd3f8a028e758835bb0a0ab6228e3e7271fdb4c8b49cca68fc73b378d327f550d2b9a9ebcbf005109fa8cb3391993c1f8840b17f417bd4f1292a0f9ba92db9d66c2005d6ff92f5bd9093fed762c9917f783258830753057b26f441767333646617e7f6e9cfb9e4f191432ebee3cde4072952e28d6085e07d3ea36da54eca3a29c2770f93a650e41ee915dde21759e17536b62dbedbfc4d74bb719b0c38d086c24ca6b2037689ec9f785f956bf89ea292d41e86df70155bed93cfc363e492ac5b8c3d0d82b01c0301dee5a7a43867a8586c0f51c709727424149965938e8ed30147a1903412a66ed8307ba3fd10b5fa8b660ab9a140a4932c941458e1f816bfdcb1a5189c8e5200772b15c7c47ce3b90386795f0f8cebcc939a7ac250ba9d938a72c174373c35dab9a478605bd6de976a72bad204c33c2496f1b4945f8f9a6b4ce4cdbdc0b2a2900cc48d6943112d7204cffa3eecec666fb16b0ac1ddfd3ac4970a1a8359808932e9e3dc90e7c5ab72b3692b57a7a76221923632e5fd7b177aaa70212710986efae39e56c0ab8cd5bcbfb3fc2b73ace901899787f6bc02f990e9c5d507456f0cf3e8477d403b15b45a9eb263362e0064b6dc2cbd604d65111cc83412c4345b82fc6edd54e4d196370a0ddf0704833caf224bc042c3c09e1deda3e85c1e68a5cd93d22c3b872fa7b5d3511fbd05b71ac60b30151f5c929756334b3d98c8dd3106c5b81bd9d4df747f0baedf23fc8973c125cd4cf43c41366f622175ea8f186982ac52d02969ee3403b959504dd0ecd819267dbe3d9df22b79a35f40f1bfddd6f4302f0dc4f0e705ff807650d951b9222e946957973e180164792006b2cbc99df5220a679dfc79b4ce3e186b01fc3bdf47b6ed16873b8374b384123ecc4138c71f9bf46acc001f9ca46f738aa05a4df7034b939e840106206ad95be1be7ab30d851218279622e249aa20252c1f11d85d533bd5422df924d02cf99221336e3948e2c44d63113a8fe9628fa48650afac39e8313736b7353cc4c5edbb915b6538269a1d7149acd8541b8059256b891fe5ede4514a1b6a91edbb384c4dd30bb877555324eea7ed23d5fa0f7303725843207ec8b7f50458c0b3bd88bb1f219f338c64ebf18894419635f6016d1ebb244a09b7426a90eaf1a67000ddbd73660f6bacddefaf6d53eb5e626b2d818647d96e8a8bfd81ea422969498cb8f2e1e1607f58d85875a695d3e9c833bb28eda3c48ce36a83b114a92173d453512d4cfa3fb963e6eae20adf8bed4735925a3d8b8f9f765e3c4991c797229fffb3b1a0552f148dd2dd4f6148dc799232e688905d253a2de8ec12b970d251855b572818ecde26eabdb506862c58980471ca11ec2f47cf3d2a1806cd783a26f5d5c1c8ea68da91c2c7a184e2a3de2bbb8152be6fdfc60d338b9a4c85d7571cd271d8c03ca357b66b531197072e7ced983140304865492a6c1d6998f85a9d657146d4da7d86ff495a3419a74f52750d75f9fed5c116c525661ba42fc4868169ce2d541ac9caf14a7a0e1a249dfad44b2e810c2386f1d3d875f234c0e97ad8a6282fa7b57b78526fcbc638f2586d03cd033ede7996c063bf21ad1b0a955c8ab22154eaa7b23c0f20c6666dffb4a9656d17e6686e0bd095627b59f081eb9585fadeaee3cb80a0db8aec27461fffb19c43f91dd1f1c6c9f18baaab5e64dcc1ace133bbfcdebad8b6b0ba3a8b44350e5a6f20badb954f252992cb603fdf1e2a651beb09acd7fbea1afb63cdeeffc9c15fe20b3499b6b4e8d18556ac0a2e800630c738a05d5a5f76d3403d2be18a613655a3924932f375d786fe1777ee6cf0be4997f3cc975af595703f2cb8d75e03d52975477c331156ee0f1e2d54fb43306db5c50c54a9d58f11b085497700aab01e24760b1f5e418ac73b1cd5bbab3b77249da1942f5d0fbe09b7b48bebcb17ebfe59e99ce4272d94c7cccc3befa577ae33f7150b56af1c84aa38f30c81daf715a981e40b1d14a80d3d005e200dc81edf623ba20dc42d8f1b0fbee64b6a26edc01831c3b23ae922caa6777b9cbd1ce0fc11ae9be4e4f274ee7ae9971e0ef865ad7dc71c37d9948f6b912d70e966f368a7f72742ba6312799a921f0ef25f2ee2a6a709c13472cff36f2fc57a1007c0fc59bbdb43e5fa3bffd12ae1f8788f08385af1efca4e635de05e71410884064c0bbf51d5116e2e531040aff31e0fb51e7e7f7319f7961bef8ffb4702beaf0667367f3ed8ee040c9599596faf698086720efb8c06a8ba75ca277e3fc3414d3b6b4201b7f12ad62316ef4086384874cc5f4221cb2169371d668ef23bce0074468fb8a8c11db117bd78a1320e2400783ab255bbf443656732bdf1cd5ad1b531d491254c37d6716f0efdfe45274f9ccb2c5e263c5b4d5a2f2c483696a8af743ffdc36c37961ef07f0e2522bc72f1931e07d225490cda160a150e3c6712f4f33586739552996a528eb5cdb2ab5ade75d435e9ee870546c6988ef614c47cd7c3d186f2f7a8444b1ea77888a6bcfcbedf42f15f4e20121a89590f835fae805d8ed067557c4660b77be22784b5fcadd3bdc5f74da667bd1f1012515b80d5f10471dbfc929b8a163cd177641d33e857071567233cc0e087af5c61483f719e08f3d95219080097de7ce910065e3be60956073eb44e6c8d3b4823cc0df7c5205fa0ed873f186910884d63985936b2aa2b2900bb7f1beeb9f962beb3751de4014a03bb5c1e18d4eb30de8bde30a21fcb0a32859059a25c7b9b115e564ccd69db89c5526a0ac916e21aeebd0b7c200aab8571cbae2788e2d9489b0105b57f37a042376867fc3c52e8827aec54b308dd1f502216a976cacf10d580ced4b98e28237e0d4614865b7ab0bb6c8b4793f21816cbeaf58dc637276a22ec872316b8b62bd85d4fac05a26160b2c37a3b86d84b03a5ed9f7d333cfdd50ed44f098e2e427c6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Trie</title>
    <link href="/2020/07/09/Trie/"/>
    <url>/2020/07/09/Trie/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Trie tree data structure and its applications.</p></blockquote><a id="more"></a><h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><p>We first present the template of this data structure.</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrieNode</span><span class="hljs-params">()</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>        self.children = collections.defaultdict(TrieNode)        self.isWord = <span class="hljs-literal">False</span>        self.word = <span class="hljs-literal">None</span>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Trie</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__int__</span><span class="hljs-params">()</span>:</span>        self.root = TrieNode()        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span><span class="hljs-params">(self, word)</span>:</span>        node = self.root        <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> word:            node = node.children[w]        node.isWord = <span class="hljs-literal">True</span>        node.word = word        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span><span class="hljs-params">(self, word)</span>:</span>        node = self.root        <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> word:            node = node.children.get(w)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">return</span> node.isWord</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dynamic Programming</title>
    <link href="/2020/07/08/Dynamic-Programming/"/>
    <url>/2020/07/08/Dynamic-Programming/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Present types of DP problems and the techniques.</p></blockquote><a id="more"></a><h1 id="Knapsack-Problems"><a href="#Knapsack-Problems" class="headerlink" title="Knapsack Problems"></a>Knapsack Problems</h1><p>The following discussion focus on the series of knapsack problems.</p><h2 id="Problem-1-Basic-Version"><a href="#Problem-1-Basic-Version" class="headerlink" title="Problem 1: Basic Version"></a>Problem 1: Basic Version</h2><p>Given <code>n</code> items with size <code>Ai</code>, an integer <code>m</code> denotes the size of a backpack, find the maximum size we can fit.</p><p>问题：n个物品不同的size，一个大小m的背包，求背包能装的最大size。</p><p>分析：</p><ol><li>目标很明确，使用n个物品装大小为m背包的最大size</li><li>每个物品状态也很明确，每个物品可选，可不选(表明了combination problem, not permutation problem)</li></ol><p>因此，直接定义dp[n]为使用前n个物品求出的最大size，再根据<strong>最后一步原理</strong>倒退分析dp[n]和dp[n-1]的联系。</p><pre><code class="hljs python"><span class="hljs-comment">#condition 1: if nth item cannot be selected</span><span class="hljs-keyword">if</span> A[n<span class="hljs-number">-1</span>] &gt; current remaining volume:dp[n] = dp[n<span class="hljs-number">-1</span>] <span class="hljs-keyword">else</span>:<span class="hljs-comment">#condition 2: if nth item can be selected</span>dp[n] = dp[n<span class="hljs-number">-1</span>] + A[n<span class="hljs-number">-1</span>]</code></pre><p>   显然，我们发现，根据物品的状态无法直接显出有效的递归公式，因为我们少了一个背包当前的状态，于是我们补上当前背包状态，重新定于dp[n][m]如下:</p><p>dp[n][m]表示使用前n个物品装大小为m背包求出最大的size，于是递推公式如下:</p><pre><code class="hljs python"><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(m):    <span class="hljs-comment">#condition 1: if nth item cannot be selected</span>    <span class="hljs-keyword">if</span> A[n<span class="hljs-number">-1</span>] &gt; j: dp[n][j] = dp[n<span class="hljs-number">-1</span>][j] <span class="hljs-keyword">else</span>:<span class="hljs-comment">#condition 2: if nth item can be selected</span>dp[n][j] = max(dp[n<span class="hljs-number">-1</span>][j], dp[n<span class="hljs-number">-1</span>][j-A[n<span class="hljs-number">-1</span>]] + A[n<span class="hljs-number">-1</span>])</code></pre><h2 id="Technique-Last-Step-Principle"><a href="#Technique-Last-Step-Principle" class="headerlink" title="Technique: Last Step Principle"></a>Technique: Last Step Principle</h2><p>由上面的分析我们总结出最后一步原理: 考虑<strong>最后一步做什么</strong>可以实现目标。</p><p>对于上面这个题来说，实现最后一步的目标方式，一定是最后一个物品选，还是不选，所以，最后代码的实现，loop物品一定外循环，loop背包size一定是内循环。</p><p align="center">  <img width="400" src="image-20200721180707241.png" srcset="/img/loading.gif"></p><p>Then, the code is shown</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack_I</span><span class="hljs-params">(A, m)</span>:</span>    dp = collections.defaultdict(int)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(m + <span class="hljs-number">1</span>):            dp[i%<span class="hljs-number">2</span>,j] = dp[(i<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>,j]            <span class="hljs-keyword">if</span> j &gt;= A[i]:                 dp[i%<span class="hljs-number">2</span>,j] = max(dp[i%<span class="hljs-number">2</span>,j], dp[(i<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>,j-A[i]] + A[i])    <span class="hljs-keyword">return</span> dp[(len(A)<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>, m]</code></pre><ul><li>Notice that 背包大小范围在[0,m]建立内循环。我们使用二维dp节省空间。如果倒着loop内循环，可以只用exactly一维空间。</li></ul><h2 id="Problem-2-General-Version"><a href="#Problem-2-General-Version" class="headerlink" title="Problem 2: General Version"></a>Problem 2: General Version</h2><p>Given <code>n</code> items and a backpack with size <code>m</code>. Given array <code>A</code> representing the size of each item and array <code>V</code> representing the value of each item. What’s the maximum value can you put into the backpack?</p><p>问题：n物品有大小和价值，使用m大小的背包装最多的价值。</p><p>题解同上。</p><p>This one is similar to the basic version.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack_II</span><span class="hljs-params">(A, V, m)</span>:</span>            dp = [[<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>)]     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):            dp[i%<span class="hljs-number">2</span>][j] = dp[(i<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>][j]            <span class="hljs-keyword">if</span> j &gt;= A[i]:                dp[i%<span class="hljs-number">2</span>][j] = max(dp[i%<span class="hljs-number">2</span>][j], dp[(i<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>][j-A[i]] + V[i])    <span class="hljs-keyword">return</span> dp[(len(A)<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>][m]</code></pre><h2 id="Problem-3-Unbounded-Version"><a href="#Problem-3-Unbounded-Version" class="headerlink" title="Problem 3: Unbounded Version"></a>Problem 3: Unbounded Version</h2><p>Given <code>n</code> items and a backpack with size <code>m</code>. Given array <code>A</code> representing the size of each item and array <code>V</code> representing the value of each item. What’s the maximum value can you put into the backpack? (Each item has infinite number available)</p><p>问题：n物品有大小和价值，使用m大小的背包装最多的价值。物品可重复使用。</p><p>分析：根据最后一步构成原理，nth物品，不选，选1次，选2次，。。。无数次。</p><p>如果还是使用之前的定义dp[i][j]为使用前ith物品装背包j的最大价值，寻找其和i-1物品的关系</p><ul><li><p>condition 1: if nth item cannot be selected<br><code>dp[i][j] = dp[i-1][j] if nums[i] &gt; j</code> </p></li><li><p>condition 2: if nth item can be selected once<br><code>dp[i][j] = dp[i-1][j-A[i]] + V[i] if nums[i] &lt;= j</code></p></li><li><p>others:</p><p><code>dp[i][j] = dp[i-1][j-2*A[i]] + 2*V[i] if 2*nums[i] &lt;= j</code></p><p><code>dp[i][j] = dp[i-1][j-k*A[i]] + k*V[i] if k*nums[j] &lt;= j</code></p></li></ul><p>综上总结(包括，不选，选1次，选2次。。。。无数次) </p><pre><code class="hljs python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(sys.maxsize):    <span class="hljs-keyword">if</span> k*A[j] &lt;= j:    dp[i][j] = max(dp[i][j], dp[i<span class="hljs-number">-1</span>][j-k*A[i]] + k*V[i])    <span class="hljs-keyword">else</span>:    <span class="hljs-keyword">break</span></code></pre><p>可以看出来，多了一个for loop循环选择次数，但是重写递推(使用largeNumber次和largeNumber+1次)</p><p><code>dp[i][j] = max(dp[i-1][j-k*A[i]] + k*V[i] for k in range(largeNumber))</code><br><code>dp[i][j-A[i]] = max(dp[i-1][j-A[i]-k*A[i]] + k*V[i] for k in range(largeNumber))</code><br><code>dp[i][j-A[i]] = max(dp[i-1][j-(k+1)*A[i]] + k*V[i] for k in range(largeNumber))</code><br><code>dp[i][j] = max(dp[i-1][j], max(dp[i-1][j-(k+1)*A[i]] + k*V[i] for k in range(1, largeNumber)) + V[i])</code><br><code>dp[i][j] = max(dp[i-1][j], dp[i-1][j-(k+1)*A[i]] + (k+1)*V[i] for k in range(1, largeNumber))</code></p><p>可得：</p><p><code>dp[i][j] = max(dp[i-1][j], dp[i][j-A[i]]+V[i])</code></p><p>其对应的物理含义，dp[i][j-A[i]] 当前第ith物品被选中的时候，因此</p><p><code>前i物品装背包j最大价值   =  max(第ith不选的背包j,    第ith被选中了很多次的背包j-A[i])</code></p><p><code>dp[i][j]             =   max(dp[i-1][j],     dp[i][j-A[i]]+V[i])</code></p><p align="center">  <img width="400" src="image-20200721180235085.png" srcset="/img/loading.gif"></p><p>Thus, the code is shown as </p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack_III</span><span class="hljs-params">(A, V, m)</span>:</span>    dp = [<span class="hljs-number">0</span>] * (m + <span class="hljs-number">1</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> range(m+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> w &gt;= A[i]:                dp[w] = max(dp[w], dp[w-A[i]] + V[i])    <span class="hljs-keyword">return</span> dp[m]</code></pre><h2 id="Problem-4-Combination-Version"><a href="#Problem-4-Combination-Version" class="headerlink" title="Problem 4: Combination Version"></a>Problem 4: Combination Version</h2><p>Given n items with size <code>A[i]</code> which an integer array and all positive numbers. An integer <code>target</code> denotes the size of a backpack. Find the number of possible fill the backpack. Each item may only be used once.</p><p>问题：n个物品各有大小，背包大小为target，求出装满当前背包在组合数量。每个物品用一次。</p><p>分析：根据<strong>最后一步原理</strong>，最后一个物品装包，还是不装包的组合数为状态可以定义当前dp[i][j]，使用前i个物品装满背包大小j的组合数。有以下递推公式</p><pre><code class="hljs python">dp[i][j] = dp[i<span class="hljs-number">-1</span>][j] + dp[i][j-A[i]]</code></pre><p>As we consider the number of solutions in this problem, so the recurrence equation becomes</p><pre><code class="hljs python">dp[i][w] = dp[i<span class="hljs-number">-1</span>][w] + dp[i<span class="hljs-number">-1</span>][w-A[i]] <span class="hljs-comment"># w &gt;= A[i]</span></code></pre><p>where the definition dp[i][w] represents that <strong>the number of ways obtained by using the first i items to achieve the given target w</strong>. Therefore, the code is shown as</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack_IV</span><span class="hljs-params">(A, target)</span>        </span><span class="hljs-function">    <span class="hljs-title">if</span> <span class="hljs-title">sum</span><span class="hljs-params">(A)</span> &lt; <span class="hljs-title">target</span>:</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>    dp = [[<span class="hljs-number">0</span>] * (target + <span class="hljs-number">1</span>), [<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>] * target]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(target + <span class="hljs-number">1</span>):            dp[i%<span class="hljs-number">2</span>][j] = dp[(i<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>][j]            <span class="hljs-keyword">if</span> j &gt;= A[i]:                dp[i%<span class="hljs-number">2</span>][j] += dp[(i<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>][j-A[i]]      <span class="hljs-keyword">return</span> dp[(len(A)<span class="hljs-number">-1</span>)%<span class="hljs-number">2</span>][target]</code></pre><ul><li>Notice that the initial condition for this problem is that </li></ul><pre><code class="hljs python">dp[<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> <span class="hljs-comment"># initial condition</span></code></pre><p>This means using no items to obtain the target 0 is exactly one possible way.</p><h2 id="Problem-5-Unbounded-Combination-Version"><a href="#Problem-5-Unbounded-Combination-Version" class="headerlink" title="Problem 5: Unbounded Combination Version"></a>Problem 5: Unbounded Combination Version</h2><p>Given an integer array <code>A</code> which contains <code>n</code> unique positive numbers, <code>A[i]</code> indicate the size of <code>i</code>th item. An integer <code>target</code> denotes the size of backpack. Find the number of ways to fill the backpack. Each item may be chosen unlimited number of times. </p><p>问题：n个物品各有大小，背包大小为target，求出装满当前背包在组合数量。每个物品用无数次。</p><p>分析：根据之前的问题3的分析，依然可以直接定义dp[i][j]为前i物品装满背包j的组合数量，递归公式如下：</p><pre><code class="hljs markdown">dp[<span class="hljs-string">i</span>][<span class="hljs-symbol">j</span>] = dp[<span class="hljs-string">i-1</span>][<span class="hljs-symbol">j</span>] + dp[<span class="hljs-string">i</span>][<span class="hljs-symbol">j-A[i</span>]]</code></pre><p>Thus, the code is shown as</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack_V</span><span class="hljs-params">(A, target)</span>:</span>    dp = [<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>] * target    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> range(target + <span class="hljs-number">1</span>):        <span class="hljs-keyword">if</span> w &gt;= A[i]:            dp[w] += dp[w-A[i]]    <span class="hljs-keyword">return</span> dp[target]</code></pre><h2 id="Problem-6-Unbounded-Permutation-Version"><a href="#Problem-6-Unbounded-Permutation-Version" class="headerlink" title="Problem 6: Unbounded Permutation Version"></a>Problem 6: Unbounded Permutation Version</h2><p>Given an integer array <code>A</code> with all positive numbers and no duplicates, find the number of permutations that add up to a positve integer target. </p><p>eg. A=[1, 2, 4], target = 4. The solution [1,2,1] and [2,1,1] are considered different.</p><p>问题：n个物品各有unique大小，背包大小为target，求出装满当前背包在排列数量。每个物品用无数次。</p><p>分析：根据最后一步构成原理，构成最后一步的permutation可以来自于数组中任何一个物品。因此只能定义dp[target]为目标，递归公式为：</p><pre><code class="hljs python">dp[t] = sum([dp[t-A[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)) <span class="hljs-keyword">if</span> t&gt;=A[i]])</code></pre><p>这样就类似<strong>爬楼梯</strong>问题。</p><p align="center">  <img width="400" src="image-20200721183427683.png" srcset="/img/loading.gif"></p><p>Thus, the code is shown as</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack_VI</span><span class="hljs-params">(A, target)</span>:</span>    dp = [<span class="hljs-number">1</span>] + [<span class="hljs-number">0</span>] * target<span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span> + target):<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):<span class="hljs-keyword">if</span> w &gt;= A[i]:dp[w] += dp[w-A[i]]<span class="hljs-keyword">return</span> dp[target]</code></pre><h2 id="Thoughts-on-the-Knapsack-Problem"><a href="#Thoughts-on-the-Knapsack-Problem" class="headerlink" title="Thoughts on the Knapsack Problem"></a>Thoughts on the Knapsack Problem</h2><p>Today, I did the target sum problem, where I learned two ways to solve the problem.</p><ol><li>Pull: </li></ol><pre><code class="hljs python">dp[i][sum] = dp[i<span class="hljs-number">-1</span>][sum - A[i]] + dp[i<span class="hljs-number">-1</span>][sum + A[i]]</code></pre><ol start="2"><li>Push:</li></ol><pre><code class="hljs python">dp[i][sum + A[i]] += dp[i][sum]dp[i][sum - A[i]] += dp[i][sum]</code></pre><p>It is interesting to use push to solve the problem. In addition, we can use the dictionary to lower the search space in the initial stages.</p><pre><code class="hljs python"><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> A:    tmp = collections.defaultdict(int)    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dp:        tmp[key + e] += dp[key]        tmp[key - e] += dp[key]    dp = tmp<span class="hljs-keyword">return</span> dp[target]</code></pre><p>However, more interesting thing is that we don’t need to do the minus part by considering the following reduction. As it holds that </p><p>P - N = Target</p><p>P - N + P + N = Target + Sum(A)</p><p>P = (T + Sum) / 2</p><p>where P is a set of positive integers and N is the set of negative integers. </p><p>So the problem can be transformed to a subset sum problem to find a target sum at (T + Sum) / 2, by using this condition, we further pruning the search. </p><h1 id="Partitioned-DP"><a href="#Partitioned-DP" class="headerlink" title="Partitioned DP"></a>Partitioned DP</h1><p>This partitioned DP 处理string和sequence， 且我们需要将string进行partition成k段substrings(subsequence) ，每段满足不同的条件.</p><h2 id="Problem-1-Palindrome-Partitioning"><a href="#Problem-1-Palindrome-Partitioning" class="headerlink" title="Problem 1: Palindrome Partitioning"></a>Problem 1: Palindrome Partitioning</h2><p>Given a string <code>s</code>, cut <code>s</code> into some substrings such that every substring is a palindrome. Return the <strong>minimum</strong> cuts needed for a palindrome partitioning of <em>s</em>.</p><p>Based on the last step principle, we can define dp[i] as the min-cut obtained by the string with the first i elements. Therefore, we could have the recurrence</p><pre><code class="hljs python">dp[i] = min(dp[i], dp[j] + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> isPalindrome(s[i:j+<span class="hljs-number">1</span>]))</code></pre><p>This indicates that we need to store the result of that whether every string s[i:j+1] is a palindrome or not. Then, we need O(n^2) space. </p><p>To shrink the space complexity, a good technique is to apply <strong>push</strong>, then we can decide if a substring is a palindrome and store its results while updating the dp values. Thus, the push technique shows the recurrence as follows </p><pre><code class="hljs python">dp[i+r] = min(dp[i+r], dp[i-r<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>) <span class="hljs-comment"># </span>dp[i+r+<span class="hljs-number">1</span>] = min(dp[i+r+<span class="hljs-number">1</span>], dp[i-r<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>) <span class="hljs-comment"># one is for odd palindrome, another is for even case</span></code></pre><p>where r represents the “radius” of the substring s[i-r, i+r].</p><h2 id="Problem-2-Copy-Books"><a href="#Problem-2-Copy-Books" class="headerlink" title="Problem 2: Copy Books"></a>Problem 2: Copy Books</h2><p>Given <code>n</code> books and the <code>i-th</code> book has <code>pages[i]</code> pages. There are <code>k</code> persons to copy these books. These books list in a row and each person can claim a continous range of books. For example, one copier can copy the books from <code>i-th</code> to <code>j-th</code> continously, but he can not copy the 1st book, 2nd book and 4th book (without 3rd book). They start copying books at the same time and they all cost 1 minute to copy 1 page of a book. What’s the best strategy to assign books so that the slowest copier can finish at earliest time? Return the shortest time that the slowest copier spends.</p><p>问题：n本书不同的页数，k个人负责抄书，每个人只能连续的抄书，求k个人中最慢的那个抄书的会花的最短的时间</p><p>分析：根据min max(f[0], f[1], f[2],…,f[k-1])，根据最后一步原理，假设最后一个人抄书的范围设定在[j,n-1]本，设dp[i][j]为前i人且第i人抄到第j本的最短时间，可得如下递归式子 </p><pre><code class="hljs python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(j):dp[i][j] = min(dp[i][j], max(dp[i<span class="hljs-number">-1</span>][k] , sum(pages[k+<span class="hljs-number">1</span>:j+<span class="hljs-number">1</span>])))</code></pre><p>Given this partitioned one, we can use the previously similar last step principle.</p><pre><code class="hljs python">dp[k][i] = min(max(dp[k<span class="hljs-number">-1</span>][j], sum(pages[j:i]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i))</code></pre><p>where dp[i] as the shortest time using by k workers with the first i books.</p><p>The abve recurrence equation also requires to deal with the summation in advance to lower the time complexity.</p><ul><li>Notice that sometimes based on the last step princeple, we might need to do additional computation to do the comparing, which probably could be done in advance and stored the results to lower the time complexity. <span style="color:red"><strong>(extra computation, comparing, do it ahead to store them)</strong></span>. </li></ul><h1 id="Interval-DP"><a href="#Interval-DP" class="headerlink" title="Interval DP"></a>Interval DP</h1><p>区间问题应该是最难的DP问题，不同于传统的DP问题，使用最后一步构成原理， 通常无法实现polynomial time的求解，因此，当我们使用最后一步无法求解的时候，我们需要考虑区间DP的特性，这就意味着将问题切割成更小的问题切用2D的方式表示，例如dp[i][j]，表示问题在区间[i,j]的解.</p><p>To be specific, the last step principle uses dp[i] with 1D index, where i is the last step. However, the interval dp typically uses dp[i][j] with 2D index, where i is the first step and j is the last step. It is kind of like divide and conquer. <span style="color:red"><strong>(2D index, dp[start][end])</strong></span>. </p><h2 id="Problem-1-Balloon-Burst"><a href="#Problem-1-Balloon-Burst" class="headerlink" title="Problem 1: Balloon Burst"></a>Problem 1: Balloon Burst</h2><p> Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a number on it represented by array <code>nums</code>. You are asked to burst all the balloons. If the you burst balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code> and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code> then becomes adjacent.</p><p>Find the maximum coins you can collect by bursting the balloons wisely.</p><p><strong>Note:</strong></p><ul><li>You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.</li></ul><p>分析：扎气球实际上permutation的问题，因此，最后一步构成原理可以由每个气球构成(n个中)。因此，定义dp[0][n-1]为使用第0-n-1个气球的cost，那么可得</p><pre><code class="hljs python">dp[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>] = max(dp[<span class="hljs-number">0</span>][i]+nums[<span class="hljs-number">0</span>]*nums[i]*nums[n<span class="hljs-number">-1</span>]+dp[i][n<span class="hljs-number">-1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, n<span class="hljs-number">-2</span>))</code></pre><p>由此，我们将问题切割为更小的区别子问题，代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ballonn</span><span class="hljs-params">(A)</span>:</span>    A.insert(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)    A.append(<span class="hljs-number">1</span>)    n = len(A)    dp = [[<span class="hljs-number">0</span>]*n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n)]     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>, n):            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>,j):                dp[i][j] = max(dp[i][j], dp[i][k]+A[i]*A[k]*A[j]+dp[k][j])<span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>]</code></pre><p>注意：消去型的题目，逆向考虑最后一步，答案如何得到。</p><h1 id="Game-Theory-DP"><a href="#Game-Theory-DP" class="headerlink" title="Game Theory DP"></a>Game Theory DP</h1><p> The geme theory dp problem deals with two playes with the optimal policy. So, we generally need to consider the two players together and solve the recurrence in a reversed manner.</p><p>博弈DP的特点是两个选手always采用最优策略。</p><h2 id="Problem-1-Coins-in-a-line"><a href="#Problem-1-Coins-in-a-line" class="headerlink" title="Problem 1: Coins in a line"></a>Problem 1: Coins in a line</h2><p>问题：有一排N个石子，Alice, Bob两人轮流取石子。每次一个人可以从最右边取走1个或2个石子。取走最后石子的人胜。 问先手Alice是否必胜 (先手必胜: true,先手必败: false)  </p><p>分析：博弈问题并不适合最后一步分析，因为是面临一个setting，所以一般来说，使用第一步分析，而我们要确认的是dp[0]的值，表示当前还剩下多少n个没有取走。有点逆向的感觉，那么可以显然看出，dp[n-1]和dp[n-2]一定是True。</p><p>博弈的递归关系可以对之前的状态取反写出来(<strong>最好举例确认逻辑关系</strong>)</p><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span> |= not(dp<span class="hljs-comment">[i+1]</span> and dp<span class="hljs-comment">[i+2]</span>)</code></pre><p>因此代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">coin</span><span class="hljs-params">(n)</span>:</span>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    dp = [<span class="hljs-literal">False</span>]*(n<span class="hljs-number">-2</span>) + [<span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>]     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n<span class="hljs-number">-3</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):        dp[i] = <span class="hljs-keyword">not</span>(dp[i+<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> dp[i+<span class="hljs-number">2</span>])    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>]</code></pre><h2 id="Problem-2-Coins-in-a-line-II"><a href="#Problem-2-Coins-in-a-line-II" class="headerlink" title="Problem 2: Coins in a line II"></a>Problem 2: Coins in a line II</h2><p>问题：There are n coins with different value in a line. Two players take turns to take one or two coins from <strong>left side</strong> until there are no more coins left. The player who take the coins with the most value wins.</p><p>分析：利用下一题的原理可以求解，</p><h2 id="Problem-3-Coins-in-a-line-III"><a href="#Problem-3-Coins-in-a-line-III" class="headerlink" title="Problem 3: Coins in a line III"></a>Problem 3: Coins in a line III</h2><p>题意：给定一个序列a[0], a[1], …, a[N-1]，两个玩家Alice和Bob轮流取数，每个人每次只能取第一个数或最后一个数， 双方都用最优策略，使得自己的数字和尽量比对手大，问先手是否必胜。如果数字和一样，也算先手胜。  </p><p>分析：利用第一步分析，且因为是博弈关系，我们考虑dp[0:n-1]不是算当前选手最大值，而是当前选手比对手多的值。递归关系有</p><pre><code class="hljs python">dp[<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>] = max(A[<span class="hljs-number">0</span>]-dp[<span class="hljs-number">1</span>，n<span class="hljs-number">-1</span>], A[n<span class="hljs-number">-1</span>]-dp[<span class="hljs-number">0</span>，n<span class="hljs-number">-2</span>]) <span class="hljs-comment">#Alice比bob多的值</span>dp[<span class="hljs-number">1</span>,n<span class="hljs-number">-1</span>]，dp[<span class="hljs-number">0</span>，n<span class="hljs-number">-2</span>] 是bob比alice多的值</code></pre><p>这样代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">conins</span><span class="hljs-params">(a)</span>:</span>    n = len(a)    dp = [[<span class="hljs-number">0</span>]*n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n)]    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, n<span class="hljs-number">-1</span>):            <span class="hljs-keyword">if</span> i == j:                dp[i][j] = a[i]            <span class="hljs-keyword">else</span>:            dp[i][j] = max(a[i]-dp[i+<span class="hljs-number">1</span>，j], a[j]-dp[i，j<span class="hljs-number">-1</span>])    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>] &gt;= <span class="hljs-number">0</span></code></pre><p>例子分析：</p><pre><code class="hljs python">输入： [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">233</span>, <span class="hljs-number">7</span>]输出： <span class="hljs-literal">True</span> （先手取走<span class="hljs-number">1</span>，无论后手取哪个，先手都能取走<span class="hljs-number">233</span>）<span class="hljs-number">1</span>: dp[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">7</span>    <span class="hljs-number">2</span>: dp[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">233</span>, dp[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = max(<span class="hljs-number">233</span>-dp[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>], <span class="hljs-number">7</span>-dp[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]) = <span class="hljs-number">226</span><span class="hljs-number">3</span>: dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">5</span>,   dp[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = max( <span class="hljs-number">5</span>-dp[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>], <span class="hljs-number">233</span>-dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) = <span class="hljs-number">228</span>, dp[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>] = max(<span class="hljs-number">5</span>-dp[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], <span class="hljs-number">7</span>-dp[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) = <span class="hljs-number">-221</span> <span class="hljs-number">4</span>: dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>,   dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = max(<span class="hljs-number">1</span>-dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], <span class="hljs-number">5</span>-dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) = <span class="hljs-number">4</span>, dp[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = max(<span class="hljs-number">1</span><span class="hljs-number">-288</span>,<span class="hljs-number">233</span><span class="hljs-number">-4</span>)=<span class="hljs-number">229</span>, dp[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>]=max(<span class="hljs-number">1</span>+<span class="hljs-number">221</span>,<span class="hljs-number">7</span><span class="hljs-number">-229</span>)=<span class="hljs-number">222</span></code></pre><h1 id="Double-Sequence-DP"><a href="#Double-Sequence-DP" class="headerlink" title="Double Sequence DP"></a>Double Sequence DP</h1><p>双序列DP问题一般的目标是基于两个串的特性的。例如，考虑一个问题P，有两个串A和B目标是(最大公共字串，将A变成B)。因此，根据最后一步原理，一般我们定义dp[i][j]表示目标去求解问题。</p><p>为了找到递推方程，一般利用pull的方法。首先，最重要的一点，假设前i个A和前j个B的<strong>子问题的目标</strong>已经实现，例如dp[i][j]对应的min/max值求出来了，也就是说对应的dp[i][j]的目标配置被完全实现。例如，最长公共子串问题，dp[i][j]不仅代表这个最长的值，也代表着A串已经完全转化到B了。基于这个目标，我们就需要反向推理如何获得dp[i][j]，有哪些可能的最后一步实现这个目标和配置。一般来说，相关的变量是dp[i-1][j]，dp[i][j-1]，dp[i-1][j-1]。</p><p>另一个很重要的点是，即使我们考虑了dp[i][j]的目标配置，当处理实际的 问题，例如(处理，原始A[0:i] and B[0:j] 需要改变配置到A&#39;[0:x], B&#39;[0:y]基于目标，但是我们的递推方程在建立的时候，还是需要考虑原始的string和index，以及其处理的orignial strings and index <span style="color:red"><strong>(A[i-1], B[j-1]), (A[i], B[j-1]), (A[i],B[j-1])</strong></span> rather than those settings ((A&#39;[0:x-1], B&#39;[0:y-1]), A&#39;[0:x], B&#39;[0:y-1]). </p><h2 id="Problem-1-Distinct-Subsequences"><a href="#Problem-1-Distinct-Subsequences" class="headerlink" title="Problem 1: Distinct Subsequences"></a>Problem 1: Distinct Subsequences</h2><p>题意：给定两个字符串<code>A[0..m-1]</code>，<code>B[0..n-1]</code>，问B在A中出现多少次（可以不连续）</p><pre><code class="hljs python">例子• 输入：A=“rabbbit”, B=“rabbit”• 输出：<span class="hljs-number">3</span>– rabbbit– rabbbit– rabbbit</code></pre><p>分析：之所以分析不出来，</p><ul><li>问题1：求多少种的时候，是＋，最后一步分类，再讨论分类用加号链接</li></ul><h2 id="Problem-2-Edit-Distance"><a href="#Problem-2-Edit-Distance" class="headerlink" title="Problem 2: Edit Distance"></a>Problem 2: Edit Distance</h2><p>Given two words <code>A</code> and <code>B</code>, find the minimum number of steps required to convert <code>A</code> to <code>B</code>. (each operation is counted as 1 step.) You have the following 3 operations permitted on a word:</p><ul><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ul><p>问题：编辑距离：</p><p>Since the conversion requires the permutation, we can define that dp[i][j] is the min step that we convert A[i] to B[j]. Based on the discussion above, by reasoning backward, the possible step to achieve the conversion is to either insert at pos i, delete the pos i, or replace the pos i. Hence, the recurrence equation is derivated as </p><pre><code class="hljs python">dp[i][j] = min(dp[i][j<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>,  \ <span class="hljs-comment"># insert after pos i  </span>               dp[i<span class="hljs-number">-1</span>][j] + <span class="hljs-number">1</span>,  \ <span class="hljs-comment"># delete the pos i</span>               dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>,\ <span class="hljs-comment"># replace the pos i</span>   dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])\ <span class="hljs-comment"># no operation A[i] = B[j]</span></code></pre><p>where the above cases are discussed:</p><ul><li>Case 1: inserting at pos i indicates in the problem dp[i][j] the new element insert after A[i] matches B[j], so that 1st recurrence holds. </li><li>Case 2: deleting at pos i indicates in the problem dp[i][j] A[i] is extra element and takes the extra step, so 2nd case holds</li><li>Case 3: replacing, easily understood</li><li>Case 4: no operation, easily understood. </li></ul><h2 id="Problem-3-Longest-Increasing-Common-Subsequence"><a href="#Problem-3-Longest-Increasing-Common-Subsequence" class="headerlink" title="Problem 3: Longest Increasing Common Subsequence"></a>Problem 3: Longest Increasing Common Subsequence</h2><p>Given 2 sequences of integers, we need to find a longest sub-sequence which is common to both the sequences, and the numbers of such a sub-sequence are in strictly increasing order.</p><p>Let dp[i][j] be the LICS of A[0:i] and B[0:j]. Based on the last step principle, consider the following cases:</p><ul><li>Case 1: B[j-1] is not in LICS, dp[i][j] = dp[i][j-1]</li><li>Case 2: A[i-1] is not in the LICS, dp[i][j] = dp[i-1][j]</li><li>Case 3: A[i-1] and B[j-1] are both in LICS, dp[i][j] = dp[i-1][j-1] + 1, where A[i-1] = B[j-1] and A[i-1] is larger than the last value in the setting of dp[i-1][j-1]. (missing some cases…)</li></ul><p>Notice that the difficulty in Case 3 is that we need to know the last value in the previous setting dp[i-1][j-1], which is in fact unknown. To solve the problem, I use the following technique 1. </p><h3 id="technique-1"><a href="#technique-1" class="headerlink" title="technique 1:"></a>technique 1:</h3><p><span style="color:red"><strong>If the information is unknown, compute it by introducing dp[i][j][1].</strong></span></p><p>Based on the technique, we extend the definition dp[i][j] to target both the maximal length LICS and the smallest ending number in the LICS.</p><ul><li>dp[i][j][0]: maximal length of LICS</li><li>dp[i][j][1]: smallest ending number of this LICS</li></ul><p>Thus, we go back to previous discussion.</p><ul><li>Case 1: dp[i][j][0] = dp[i][j-1][0], dp[i][j][1] = dp[i][j-1][1]</li><li>Case 2: dp[i][j][0] = dp[i-1][j][0], dp[i][j][1] = dp[i-1][j][1] </li><li>Case 3: dp[i][j][0] = dp[i-1][j-1][0] + 1 if A[i-1] = B[j-1] and A[i-1] &gt; dp[i-1][j-1][1], dp[i][j][1] = A[i-1]</li></ul><p>However, something is overlooked in Case 3. For A[i-1] = B[j-1], we need to update the dp[i][j] by comparing all the previously dp[i-1][0]…dp[i-1][j-1] to find the LICS, so we modify Case 3 to:</p><ul><li>Case 3: dp[i][j][0] =  max(dp[i][j][0], dp[i-1][k][0] + 1) if A[i-1] = B[j-1] and A[i-1] &gt; dp[i-1][k][1], for k in range(j-1).</li></ul><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LICS</span><span class="hljs-params">(A, B)</span>:</span>    dp = collections.defaultdict(int)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)+<span class="hljs-number">1</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(B)+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j == <span class="hljs-number">0</span>:                dp[i, j, <span class="hljs-number">0</span>], dp[i, j, <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, sys.maxsize                <span class="hljs-keyword">continue</span>                            dp[i,j,<span class="hljs-number">1</span>] = sys.maxsize            <span class="hljs-keyword">if</span> A[i<span class="hljs-number">-1</span>] == B[j<span class="hljs-number">-1</span>]:                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, j+<span class="hljs-number">1</span>):                    <span class="hljs-keyword">if</span> A[i<span class="hljs-number">-1</span>] &gt; dp[i<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> dp[i<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>] == sys.maxsize <span class="hljs-keyword">and</span> \                        dp[i,j,<span class="hljs-number">0</span>] &lt;= dp[i<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>:                            dp[i,j,<span class="hljs-number">1</span>], dp[i,j,<span class="hljs-number">0</span>] = A[i<span class="hljs-number">-1</span>], dp[i<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>                         <span class="hljs-keyword">if</span> dp[i,j,<span class="hljs-number">0</span>] &lt;= dp[i,j<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>]:                dp[i,j,<span class="hljs-number">1</span>] = min(dp[i,j,<span class="hljs-number">1</span>], dp[i,j<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> dp[i,j,<span class="hljs-number">0</span>] == dp[i,j<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>] <span class="hljs-keyword">else</span> dp[i,j<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>]                 dp[i,j,<span class="hljs-number">0</span>] = dp[i,j<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>]                                <span class="hljs-keyword">if</span> dp[i,j,<span class="hljs-number">0</span>] &lt;= dp[i<span class="hljs-number">-1</span>,j,<span class="hljs-number">0</span>]:                dp[i,j,<span class="hljs-number">1</span>] = min(dp[i,j,<span class="hljs-number">1</span>], dp[i<span class="hljs-number">-1</span>,j,<span class="hljs-number">1</span>]) <span class="hljs-keyword">if</span> dp[i,j,<span class="hljs-number">0</span>] == dp[i<span class="hljs-number">-1</span>,j,<span class="hljs-number">0</span>] <span class="hljs-keyword">else</span> dp[i<span class="hljs-number">-1</span>,j,<span class="hljs-number">1</span>]                dp[i,j,<span class="hljs-number">0</span>] = dp[i<span class="hljs-number">-1</span>,j,<span class="hljs-number">0</span>]                <span class="hljs-keyword">return</span> dp[len(A), len(B), <span class="hljs-number">0</span>]</code></pre><p>Based on the above logic, it is a O(n^3) time algorithm. In addtion, the logic is a little complicated due to we introduce the last value in the LICS. Thus, In the following we use the 2nd technique to solve it. </p><h3 id="technique-2"><a href="#technique-2" class="headerlink" title="technique 2:"></a>technique 2:</h3><p><span style="color:red"><strong>If the information is unknown, associating it with the index in dp[i][j].</strong></span></p><p>Based on this technique, it is obvious that we need to associate the last value of LICS of the index of dp[i][j]. Therefore, we redefine dp[i][j] to be the LICS of A[0:i] and B[0:j] where B[j-1] is the last value in this LICS. Therefore, the following recurrence can be derived easily.</p><ul><li>Case 1: dp[i][j] = max(dp[i][j], dp[i-1][j] if A[i-1] != B[j-1])</li><li>Case 2: dp[i][j] = max(dp[i][j], dp[i-1][k] if A[i-1] == B[j-1] and B[j-1] &gt; B[k] for k in range(j))</li></ul><p>With the above recurrence equation, we are able to clearly solve the problem in O(n^3) time. However, there are some space for us to improve it. That is, since A[i-1] = B[j-1] and B[j-1] is the largest value, we need to find maximal of all the dp[i-1][k] with B[k] smaller than A[j-1],</p> <pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LICS</span><span class="hljs-params">(A, B)</span>:</span>    dp = [<span class="hljs-number">0</span>]*(len(B))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):        max_i_minus_one = <span class="hljs-number">0</span>         <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(len(B)):            <span class="hljs-keyword">if</span> A[i] == B[j]:                dp[j] = max(dp[j], max_i_minus_one + <span class="hljs-number">1</span>)            <span class="hljs-keyword">if</span> A[i] &gt; B[j]:                max_i_minus_one = max(dp[j], max_i_minus_one)    <span class="hljs-keyword">return</span> max(dp)</code></pre><p>Therefore, the above algorithm is O(n^2) time with O(n) space.</p><h1 id="Hard-Problems"><a href="#Hard-Problems" class="headerlink" title="Hard Problems"></a>Hard Problems</h1><p>This sections presents some hard problems and discusses the important thoughts on solviing them.</p><h2 id="Problem-1-K-sum"><a href="#Problem-1-K-sum" class="headerlink" title="Problem 1: K sum"></a>Problem 1: K sum</h2><p>题意：给定数组A，包含n个互不相等的正整数, 问有多少种方式从中找出K个数，使得它们的和是Target  </p><p>分析：目标构成target，且是组合问题，根据最后一步构成原理，</p><p>到底是dp[i][k][target]，还是dp[i][target][k]，</p><pre><code class="hljs python">dp[i][k][target] = dp[i<span class="hljs-number">-1</span>][k][target] + dp[i<span class="hljs-number">-1</span>][k<span class="hljs-number">-1</span>][target-A[i]]</code></pre><p>代码是这样的</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kSum</span><span class="hljs-params">(A, k, target)</span>:</span>    dp = collections.defaultdict(int)    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(A)+<span class="hljs-number">1</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>):            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> range(target+<span class="hljs-number">1</span>):                <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> t == <span class="hljs-number">0</span>:                    dp[i][j][t] = <span class="hljs-number">1</span>                    <span class="hljs-keyword">continue</span>                dp[i][j][t] = dp[i<span class="hljs-number">-1</span>][j][t]                <span class="hljs-keyword">if</span> t &gt;= A[i<span class="hljs-number">-1</span>]:                    dp[i][j][t] += dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][t-A[i<span class="hljs-number">-1</span>]]    <span class="hljs-keyword">return</span> dp[len(A)][k][target]</code></pre><p>例子：</p><pre><code class="hljs python">输入：A=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], K=<span class="hljs-number">2</span>, Target = <span class="hljs-number">5</span>输出：<span class="hljs-number">2</span> (<span class="hljs-number">1</span> + <span class="hljs-number">4</span> = <span class="hljs-number">5</span>, <span class="hljs-number">2</span> + <span class="hljs-number">3</span> = <span class="hljs-number">5</span>)dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, ..., dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">0.</span>.., dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>dp[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, dp[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, ..., dp[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>    dp[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, dp[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dp[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1.</span>.., dp[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>][<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>之前自己推算dp[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>，还以为初始化错了。输入：A=[<span class="hljs-number">1</span>], K=<span class="hljs-number">0</span>, Target=<span class="hljs-number">1</span>输出：<span class="hljs-number">0</span>这个例子出错了，是因为dp[i][j][t] += dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>][t-A[i<span class="hljs-number">-1</span>]]，j<span class="hljs-number">-1</span>=<span class="hljs-number">-1</span>了。(需要引起注意，python <span class="hljs-number">-1</span> index问题)</code></pre><p>如果是定义dp[i][target][k]，使用上面相同的代码依然正确(交换target和k的维度)。</p><p>但是这个解的时间复杂度太高了。其实在是否选择当前第ith number的时候，我们可以记录选择了的个数。因此考虑这个信息。可以使用push的方式编写递推关系，这样有更好的效率。</p><pre><code class="hljs python"><span class="hljs-comment">#依然使用dp[i][t]的定义</span><span class="hljs-comment">#假设最初的值dp[0][0] = 1</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kSum</span><span class="hljs-params">(A, k, target)</span>:</span>    dp = collections.defaultdict(int)    dp[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>     <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(A)+<span class="hljs-number">1</span>):        tmp = collections.defaultdict(int)        <span class="hljs-keyword">for</span> j, t <span class="hljs-keyword">in</span> dp:            <span class="hljs-keyword">if</span> j&gt;k <span class="hljs-keyword">or</span> t&gt;target:                 <span class="hljs-keyword">continue</span>            tmp[j,t] += dp[j,t]            tmp[j+<span class="hljs-number">1</span>,t+A[i<span class="hljs-number">-1</span>]] += dp[j,t]        dp=tmp    <span class="hljs-keyword">return</span> dp[k,target]</code></pre><h2 id="Problem-2-Minimum-Adjustment-Cost"><a href="#Problem-2-Minimum-Adjustment-Cost" class="headerlink" title="Problem 2: Minimum Adjustment Cost"></a>Problem 2: Minimum Adjustment Cost</h2><p>To solve this problem, we start with the last step principle. We thus define dp[i] as the min-cost of adjustment for first i integers. Based on this defintion, we assume that A[i] is changed to B[i], where it holds that |B[i]- B[i-1]| &lt; target. </p><p>So, there are two important questions to answer. </p><ul><li>B[i-1] is unknow</li><li>Even it is known, how can we guarantee it is <strong>optimal</strong> to modify A[i] to B[i] within [B[i-1] - target, B[i-1] + target].</li></ul><p>Moreover, it is just a greedy way to caluate the cost .</p><p>Thus, we utilize the technique 3,</p><h3 id="technique-3"><a href="#technique-3" class="headerlink" title="technique 3:"></a>technique 3:</h3><p><span style="color:red"><strong>If the information is unknown, adding one dimension to have dp[i][k].</strong></span></p><p>So, due to this technique, we redefine the state dp[i][k], where k represents the value B[i]. Since k is bounded in [0, 100]. This yields the following recurrence equation.</p><pre><code class="hljs python">d[i][j] = min(d[i<span class="hljs-number">-1</span>][k] + abs(j-A[i]) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">101</span>) <span class="hljs-keyword">if</span> j- Target &lt;= k <span class="hljs-keyword">and</span> k &lt;= j + target)</code></pre><p>to be continued…</p><h2 id="Problem-3-K-Edit-Distance"><a href="#Problem-3-K-Edit-Distance" class="headerlink" title="Problem 3: K Edit Distance"></a>Problem 3: K Edit Distance</h2><p>Given Edit distance problem (modify, insert, delete), and K is max-cost, output the possible strings.</p><p>eg: </p><p>A = [“abc”, “abd”, “abcd”, “adc”], Target = “ac”, K = 1<br>Output： [“abc”, “adc”] </p><p>In fact, it is easy to see that this problem combines Trie and Edit distance.  We use the standard dp to solve the edit distance problem.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DP</span><span class="hljs-params">(string, target)</span></span><span class="hljs-function">    <span class="hljs-title">for</span> <span class="hljs-title">i</span> <span class="hljs-title">in</span> <span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-number">1</span>, len<span class="hljs-params">(string)</span>+<span class="hljs-number">1</span>)</span>:</span>    <span class="hljs-comment">#outer loop for input strings</span>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(target)+<span class="hljs-number">1</span>):<span class="hljs-comment">#inner loop for target string</span>            <span class="hljs-comment">#dp process recurrence equation</span></code></pre><p>To employ the Trie structure,  we store all the input strings in Trie and <strong>change the outer loop to a DFS traversal procedure</strong>, which is shown as follows</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">k_edit_distance</span><span class="hljs-params">(A, target, k)</span>:</span>    tree = Trie()    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> A:    tree.insert(word)    dp = [<span class="hljs-number">0</span>] + [sys.maxsize] * len(target)    res = []    dfs(tree, target, k, dp, res)    <span class="hljs-keyword">return</span> res <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(node, target, k, pre_dp, res)</span></span><span class="hljs-function"></span>    if node.isWord and pre_dp[len(target)] &lt;= k:        res.append(node.string)        <span class="hljs-keyword">return</span>    dp = [sys.maxsize] * (len(target) + <span class="hljs-number">1</span>)    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> node.children:        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(target)+<span class="hljs-number">1</span>):            <span class="hljs-keyword">if</span> c != target[j<span class="hljs-number">-1</span>]:                dp[j] = max(dp[j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>, pre_dp[j] + <span class="hljs-number">1</span>, pre_dp[j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>)<span class="hljs-keyword">else</span>:                dp[j] = max(dp[j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>, pre_dp[j] + <span class="hljs-number">1</span>, pre_dp[j<span class="hljs-number">-1</span>])        dfs(node.children[c], target, k, dp, res)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Disjoint Set</title>
    <link href="/2020/07/07/Disjoint-Set/"/>
    <url>/2020/07/07/Disjoint-Set/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Disjoint set data structure and its applications.</p></blockquote><a id="more"></a><h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><p>The following is the template for the disjoint set.</p><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFindSet</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__int__</span><span class="hljs-params">(self, n)</span></span>    self.parents = [i for i in range(n+1)]        self.ranks = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n+<span class="hljs-number">1</span>)]        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find</span><span class="hljs-params">(self, x)</span>:</span>        temp = x         <span class="hljs-keyword">while</span> x != self.parents[x]:            <span class="hljs-comment"># self.parents[x] = self.find[parents[x]] recursion path compression</span>            self.parents[x] = self.parents[self.parents[x]]            x = self.parents[x]                <span class="hljs-comment"># iterative path compression</span>        <span class="hljs-string">'''</span><span class="hljs-string">        while temp != x:</span><span class="hljs-string">            p = self.parents[temp]</span><span class="hljs-string">        self.parents[temp] = x</span><span class="hljs-string">            temp = p</span><span class="hljs-string">        '''</span>        <span class="hljs-keyword">return</span> x        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">union</span><span class="hljs-params">(self, x, y)</span>:</span>        rx, ry = self.find(x), self.find(y)        <span class="hljs-keyword">if</span> rx == ry:             <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> self.ranks[rx] &lt; self.ranks[ry]:            self.ranks[rx] = ry        <span class="hljs-keyword">elif</span> self.ranks[rx] &gt; self.ranks[ry]:            self.ranks[ry] = rx        <span class="hljs-keyword">else</span>:            self.ranks[ry] = rx            self.ranks[rx] += <span class="hljs-number">1</span>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sliding Window</title>
    <link href="/2020/06/25/Sliding-Window/"/>
    <url>/2020/06/25/Sliding-Window/</url>
    
    <content type="html"><![CDATA[<blockquote><p>A sliding window technique dealing with arrays.</p></blockquote><a id="more"></a><h1 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h1><p>Here we present a first template for sliding window problem.</p><pre><code class="hljs pytho">def sliding_window(A, window):    left, right, value &#x3D; 0, 0, 0    while right &lt; len(A):    value &#x3D; A[right] # always consider ther right element    right +&#x3D; 1    while left - right &gt; window: #shrink the window for the specific condition    temp &#x3D; A[left]            left +&#x3D; 1</code></pre><p>The sliding window technique can be used to some two pointer problems, which makes it easy to write the code.</p><p>However, when dealing with complex sliding window problem, we might need to move left pointers in the outer loop rather the right pointers in the outer loop. We therefore have the the following template.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sliding_window</span><span class="hljs-params">(A, window, start)</span>:</span>    cur_sum, min_len = <span class="hljs-number">0</span>, len(A)    <span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> range(len(A)):        <span class="hljs-keyword">while</span> right &lt; len(A) <span class="hljs-keyword">and</span> cur_sum &lt; start:            cur_sum += A[right]        <span class="hljs-keyword">if</span> cur_sum &gt;= start:            min_len = min(min_len, right - left)        cur_sum -= A[left]        <span class="hljs-keyword">return</span> min_len</code></pre><h1 id="Common-mistake"><a href="#Common-mistake" class="headerlink" title="Common mistake"></a>Common mistake</h1><ol><li>The common mistake that I usually make in the first template is that, since I fix where to increment the index <strong>right</strong>, when going to the while loop for shrinking the size of the window, the index <strong>right</strong> should point to <strong>right+1</strong>. In this case, if we would like to use <strong>right</strong>, it has already been changed and is not the original one, especially when referring to the array index by watching out if we really want to looking at <strong>nums[right]</strong> or <strong>nums[right+1]</strong>.</li></ol><p><img src="image-20200706224309985.png" srcset="/img/loading.gif" alt="image-20200706224309985"></p><ul><li>The next point is that we should be careful with the <strong>left index</strong> in the <strong>second while</strong> loop</li><li>To reasonably design where to compute the objective. As it shown in the figure, there might be two options to choose to put the object lines.</li></ul><ol start="2"><li>To correctly use the second template, we need to be careful of the condition in the inner loop. Taking the question (Subarray Sum II) for example. </li></ol><ul><li>We first consider to compute the minimal length for the subarray sum greater than or equal to the start value. This shows that if both cases are feasible (subarray sum &gt;= start), the correct index is <strong>right - 1</strong>.</li></ul><p><img src="image-20200706232631967.png" srcset="/img/loading.gif" alt="image-20200706232631967"></p><ul><li><p>Then, we consider the end side.  </p><ul><li><p>Consider Case 1: right &gt;= len(A) </p><ul><li><p>If <strong>cur_sum &lt;= end</strong>, the feasible index can be <strong>right-1</strong>.  </p></li><li><p>If <strong>cur_sum &gt; end</strong>, the feasible index can be  <strong>right-2</strong>.</p></li></ul></li><li><p>Consider Case 2: cur_sum &gt; end</p><ul><li>The feasible index can only be <strong>right-2</strong></li></ul></li></ul><p><img src="image-20200706232800001.png" srcset="/img/loading.gif" alt="image-20200706232800001"></p></li></ul><p>Combining those two cases, we have the following code.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subarraySumII</span><span class="hljs-params">(self, A, start, end)</span>:</span>        sum_right_min = sum_right_max = right_min = right_max = cnt = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> range(len(A)):                <span class="hljs-keyword">while</span> right_min &lt; len(A) <span class="hljs-keyword">and</span> sum_right_min &lt; start:            sum_right_min += A[right_min]            right_min += <span class="hljs-number">1</span>                <span class="hljs-keyword">while</span> right_max &lt; len(A) <span class="hljs-keyword">and</span> sum_right_max &lt;= end:            sum_right_max += A[right_max]            right_max += <span class="hljs-number">1</span>                <span class="hljs-comment"># feasible condition of right_min</span>        <span class="hljs-keyword">if</span> sum_right_min &gt;= start <span class="hljs-keyword">and</span> right_min &gt; left:            <span class="hljs-keyword">if</span> right_max &gt;= len(A) <span class="hljs-keyword">and</span> sum_right_max &lt;= end:                cnt += (right_max - <span class="hljs-number">1</span>) - (right_min - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>            <span class="hljs-keyword">else</span>:                cnt += (right_max - <span class="hljs-number">2</span>) - (right_min - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>                 <span class="hljs-keyword">if</span> right_min &gt; left:            sum_right_min -= A[left]        <span class="hljs-keyword">if</span> right_max &gt; left:        sum_right_max -= A[left]        <span class="hljs-keyword">return</span> cnt</code></pre><p>Of course, we can use some metric to optimize the logic but need to be careful enough.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subarraySumII</span><span class="hljs-params">(self, A, start, end)</span>:</span>        sum_right_min = sum_right_max = right_min = right_max = cnt = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> range(len(A)):                right_max = max(left, right_max)        <span class="hljs-keyword">while</span> right_min &lt; len(A) <span class="hljs-keyword">and</span> sum_right_min &lt; start:            sum_right_min += A[right_min]            right_min += <span class="hljs-number">1</span>                <span class="hljs-keyword">while</span> right_max &lt; len(A) <span class="hljs-keyword">and</span> sum_right_max + A[right_max] &lt;= end:            sum_right_max += A[right_max]            right_max += <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> sum_right_min &gt;= start <span class="hljs-keyword">and</span> right_min &gt; left:             cnt += (right_max - <span class="hljs-number">1</span>) - (right_min - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> right_min &gt; left:            sum_right_min -= A[left]        <span class="hljs-keyword">if</span> right_max &gt; left:        sum_right_max -= A[left]        <span class="hljs-keyword">return</span> cnt</code></pre><p>Or the following code.</p><p>def subarraySumII(self, A, start, end):</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">subarraySumII</span><span class="hljs-params">(self, A, start, end)</span>:</span>        sum_right_min = sum_right_max = right_min = right_max = cnt = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> range(len(A)):                right_min = max(left, right_min)        right_max = max(left, right_max)        <span class="hljs-keyword">while</span> right_min &lt; len(A) <span class="hljs-keyword">and</span> sum_right_min + A[right_min] &lt; start:            sum_right_min += A[right_min]            right_min += <span class="hljs-number">1</span>                <span class="hljs-keyword">while</span> right_max &lt; len(A) <span class="hljs-keyword">and</span> sum_right_max + A[right_max] &lt;= end:            sum_right_max += A[right_max]            right_max += <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> right_min &lt; len(A): <span class="hljs-comment"># or right_min &lt; right_max</span>            cnt += (right_max - <span class="hljs-number">1</span>) - (right_min) + <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> right_min &gt; left:            sum_right_min -= A[left]        <span class="hljs-keyword">if</span> right_max &gt; left:        sum_right_max -= A[left]        <span class="hljs-keyword">return</span> cnt</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Sliding Window</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Note</title>
    <link href="/2020/06/25/Python-Note/"/>
    <url>/2020/06/25/Python-Note/</url>
    
    <content type="html"><![CDATA[<Contents><h2 id="1-Memory-Management"><a href="#1-Memory-Management" class="headerlink" title="1. Memory Management"></a>1. Memory Management</h2><p>reference:</p><ol><li><a href="https://stackoverflow.com/questions/14546178/does-python-have-a-stack-heap-and-how-is-memory-managed" target="_blank" rel="noopener">https://stackoverflow.com/questions/14546178/does-python-have-a-stack-heap-and-how-is-memory-managed</a></li><li><a href="https://stackoverflow.com/questions/6931880/how-can-a-non-assigned-string-in-python-have-an-address-in-memory" target="_blank" rel="noopener">https://stackoverflow.com/questions/6931880/how-can-a-non-assigned-string-in-python-have-an-address-in-memory</a></li><li><a href="https://www.cnblogs.com/geaozhang/p/7111961.html" target="_blank" rel="noopener">https://www.cnblogs.com/geaozhang/p/7111961.html</a></li><li><a href="https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html" target="_blank" rel="noopener">https://www.cnblogs.com/vamei/archive/2012/07/10/2582795.html</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Notes</title>
    <link href="/2020/06/21/Java-Notes/"/>
    <url>/2020/06/21/Java-Notes/</url>
    
    <content type="html"><![CDATA[<Contents><h2 id="1-basic-operation"><a href="#1-basic-operation" class="headerlink" title="1. basic operation"></a>1. basic operation</h2><p>The first snippet is about the type of math operation.</p><pre><code class="hljs java"><span class="hljs-keyword">long</span> a = <span class="hljs-number">100000000L</span>;<span class="hljs-keyword">short</span> b = <span class="hljs-number">10</span>;<span class="hljs-keyword">byte</span> c = <span class="hljs-number">8</span>;System.out.print(a + b);<span class="hljs-comment">// should be a long type</span>System.out.print(b + c);<span class="hljs-comment">// should be an int type</span></code></pre><p>Then, we take a look at the operation i++ and ++i.</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<span class="hljs-keyword">int</span> b = a++;<span class="hljs-keyword">int</span> c = ++a;System.out.print(b);<span class="hljs-comment">// should output 1  </span>System.out.print(c);<span class="hljs-comment">// should output 3</span></code></pre><p>For the string, it has a difference depends where we put it.</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;System.out.print(<span class="hljs-string">''</span> + a + b);<span class="hljs-comment">// should output string 1020 </span>System.out.print(a + b + <span class="hljs-string">''</span>);<span class="hljs-comment">// should output string 30</span></code></pre><h1 id="2-Memory-Management"><a href="#2-Memory-Management" class="headerlink" title="2 Memory Management"></a>2 Memory Management</h1><p>The local primitive data type including int, float, char and others (8 in total) are stored in the stack memory. For example,</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">// the type, name, value of the variable is stored in the stack memory.</span></code></pre><p>In addition, the local variables which are all used to store the references of the objects. These variables are also stored in the stack memory. However, the objects are stored in the heap memory. For instance,</p><pre><code class="hljs java">Integer a = <span class="hljs-keyword">new</span> Integer();<span class="hljs-comment">// the type, name, represented reference of the variable a is stored in the stack memory, but key word new makes the oject Integer() in the heap memory.</span></code></pre><p>In addition, for the heap memory, there exists</p><ol><li>Young Generation</li><li>Old Generation</li><li>Permanent Generation</li></ol><p><img src="https://i.stack.imgur.com/eP0SJ.png" srcset="/img/loading.gif" alt=""></p><p>Notice that the string objects (if not declared by new) should be stored in the string pool in the permanent memory in the heap, which causes the following:</p><pre><code class="hljs java">String a = <span class="hljs-string">'abc'</span>;String b = <span class="hljs-string">'abc'</span>;System.out.println(a==b);<span class="hljs-comment">//should return True</span>String c = <span class="hljs-keyword">new</span> String(<span class="hljs-string">'abc'</span>);String d = <span class="hljs-keyword">new</span> String(<span class="hljs-string">'abc'</span>);System.out.println(a==b);<span class="hljs-comment">//should return False</span></code></pre><p>Please be careful that ‘’==’’ is a reference matching operator if the variables are not primitive data types.</p><p>Reference:</p><ol><li><a href="https://www.sololearn.com/Discuss/482015/why-is-the-output-show-false" target="_blank" rel="noopener">https://www.sololearn.com/Discuss/482015/why-is-the-output-show-false</a></li><li>[<a href="https://www.quora.com/Where-is-a-Java-string-stored#:~:text=The%20variables%20in%20the%20Java,reference%20variable%20in%20the%20stack.]" target="_blank" rel="noopener">https://www.quora.com/Where-is-a-Java-string-stored#:~:text=The%20variables%20in%20the%20Java,reference%20variable%20in%20the%20stack.]</a>(<a href="https://www.quora.com/Where-is-a-Java-string-stored#:~:text=The" target="_blank" rel="noopener">https://www.quora.com/Where-is-a-Java-string-stored#:~:text=The</a> variables in the Java,reference variable in the stack.)</li><li><a href="https://stackoverflow.com/questions/22779145/java-primitive-data-type-on-stack-or-heap" target="_blank" rel="noopener">https://stackoverflow.com/questions/22779145/java-primitive-data-type-on-stack-or-heap</a></li><li><a href="https://stackoverflow.com/questions/2129044/java-heap-terminology-young-old-and-permanent-generations" target="_blank" rel="noopener">https://stackoverflow.com/questions/2129044/java-heap-terminology-young-old-and-permanent-generations</a></li><li><a href="https://stackoverflow.com/questions/41120129/java-stack-and-heap-memory-management" target="_blank" rel="noopener">https://stackoverflow.com/questions/41120129/java-stack-and-heap-memory-management</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown Sheet</title>
    <link href="/2020/06/18/MarkDown-Sheet/"/>
    <url>/2020/06/18/MarkDown-Sheet/</url>
    
    <content type="html"><![CDATA[<Contents><h1 id="Markdown-Sheet"><a href="#Markdown-Sheet" class="headerlink" title="Markdown Sheet"></a>Markdown Sheet</h1><h2 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h2><p>title: # + ‘space’ + title</p><p>second title: ## + ‘space’ + title </p><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>bold: <strong>bot sides with double star signs</strong></p><p>italic: <em>both sides with one star sign</em></p><p>bold + italic: <strong><em>both sides with three star signs</em></strong></p><p>delete line: <del>both sides with double tilde signs</del></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p>‘&gt;’  + ‘space’ + my references</p></blockquote><h2 id="Dividing-line"><a href="#Dividing-line" class="headerlink" title="Dividing line"></a>Dividing line</h2><hr><hr><ol><li>three minus signs —</li><li>three star signs ***</li></ol><h2 id="Figure"><a href="#Figure" class="headerlink" title="Figure"></a>Figure</h2><p> " srcset="/img/loading.gif<img src="" alt=""></p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ol><li>number + ‘.’ + ‘space’</li><li>eg</li></ol><ul><li>unordered: ‘-‘ + ‘space’</li><li>eg</li></ul><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><ol><li><p>insert by Typora</p></li><li><p>“eg1|eg2|eg3”</p><p> “–|–|–”</p><p>“eg1|eg2|eg3”</p></li></ol><table><thead><tr><th>name</th><th>gender</th><th>birth</th></tr></thead><tbody><tr><td>Jack</td><td>Male</td><td>2000</td></tr></tbody></table><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre><code class="hljs python">​```pythoncode stuff</code></pre><p>to be continued</p>]]></content>
    
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Queue Using Stacks</title>
    <link href="/2020/05/11/Queue-Using-Stacks/"/>
    <url>/2020/05/11/Queue-Using-Stacks/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e2d0467675ce5961615d2f670f0e047940e3659d1cc7ba5739530954c2c6f2a0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linear Time Median Finding</title>
    <link href="/2020/05/07/Linear-Time-Median-Finding/"/>
    <url>/2020/05/07/Linear-Time-Median-Finding/</url>
    
    <content type="html"><![CDATA[<Contents><h2 id="1-Problem-statement"><a href="#1-Problem-statement" class="headerlink" title="1. Problem statement"></a>1. Problem statement</h2><p>Given an array of size n, find the median in linear time.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Majority Element</title>
    <link href="/2020/05/06/Majority-Element/"/>
    <url>/2020/05/06/Majority-Element/</url>
    
    <content type="html"><![CDATA[<Contents><h2 id="1-Problem-statement"><a href="#1-Problem-statement" class="headerlink" title="1. Problem statement"></a>1. Problem statement</h2><p>Given an array of size n and a number k, find all elements that appear more than n/k times.</p><p>In fact, there are several versions of this problem. For instance, the basic version is k = 2.</p><p>Assuming that the majority element appear x times， which meets that</p><p>$$\begin{equation}\label{eq1}<br> \frac{x}{n} &gt; \frac{1}{k}<br>\end{equation}$$</p><p>then, we subtract by one on both sides, which yields that</p><p>$$\begin{equation}\label{eq2}<br> \frac{x - 1}{n - k} &gt; \frac{1}{k}<br>\end{equation}$$</p><p>It is interesting to observe that after the number of majority element decrease by one the “dominating role” of the majority element keeps unchanged if we delete k numbers in the array simultaneously. Notice that the k numbers including the majority element should be different. In addition, as the elements appear more than n/k times, there will be at most k - 1 majority elements.</p><p>We come up with the algorithm that we pick k different numbers until the last round. The remaining in the last round are the candidates. We just check them again in a for loop, which identifies if each appear n/k times.</p><p>A good analogy that every round (not mean a round in for loop) we draw k different cards. To achieve that, we need counters for every drawing cards. This assures that we can find when the last round is. </p><p>So how to draw different cards with counters in each round? Taking k = 3 as an example. The code is shown in below.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_major_elements</span><span class="hljs-params">(nums)</span>:</span>        k = <span class="hljs-number">3</span>    candidates = [<span class="hljs-number">0</span>] * (k - <span class="hljs-number">1</span>)    cnt = [<span class="hljs-number">0</span>] * (k - <span class="hljs-number">1</span>)    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> nums:        <span class="hljs-keyword">if</span> candidates[<span class="hljs-number">0</span>] == e:            cnt[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> candidates[<span class="hljs-number">1</span>] == e:            cnt[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> cnt[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>:            candidates[<span class="hljs-number">0</span>] = e            cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> cnt[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:            candidates[<span class="hljs-number">1</span>] = e            cnt[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            cnt[<span class="hljs-number">0</span>] -= <span class="hljs-number">1</span>            cnt[<span class="hljs-number">1</span>] -= <span class="hljs-number">1</span>        res = []    <span class="hljs-keyword">if</span> cnt[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums.count(candidates[<span class="hljs-number">0</span>]) &gt; len(nums) / k:        res.append(candidates[<span class="hljs-number">0</span>])     <span class="hljs-keyword">if</span> cnt[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums.count(candidates[<span class="hljs-number">1</span>]) &gt; len(nums) / k:        res.append(candidates[<span class="hljs-number">1</span>])             <span class="hljs-keyword">return</span> res</code></pre><p>reference: </p><p>[1] <a href="http://www.crm.umontreal.ca/pub/Rapports/3300-3399/3302.pdf" target="_blank" rel="noopener">http://www.crm.umontreal.ca/pub/Rapports/3300-3399/3302.pdf</a><br>[2] <a href="https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html" target="_blank" rel="noopener">https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Eulerian Path</title>
    <link href="/2020/05/03/Eulerian-Path/"/>
    <url>/2020/05/03/Eulerian-Path/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Do you know what is <a href="https://www.youtube.com/watch?v=8MpoO2zA2l4" target="_blank" rel="noopener">Fleury&#39;s Algorithm for printing Eulerian Path</a>?</p></blockquote><a id="more"></a><h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><h2 id="Eulerian-Cycle"><a href="#Eulerian-Cycle" class="headerlink" title="Eulerian Cycle"></a>Eulerian Cycle</h2><p>考虑一个有向图，欧拉环存在的条件如下:</p><ul><li>Condition 1: 任意一个节点的出度等于入度</li></ul><h2 id="Eulerian-Path"><a href="#Eulerian-Path" class="headerlink" title="Eulerian Path"></a>Eulerian Path</h2><p>考虑一个有向图，欧拉路径存在的条件如下:</p><ul><li>Condition 1: 任意一个节点的出度等于入度</li><li>Condition 2: 仅存在一个节点(outdegree-indegree=1，<strong>起点</strong>)，和另一个节点(indegree-outdegree=1，<strong>终点</strong>)，其他节点(outdegree=indegree)。</li></ul><p>上述条件满足1个即可。</p><p>如果存在欧拉路径，寻找欧拉路径的方式如下:</p><ul><li>dfs(每个节点访问一个其邻居，该节点出度减1)进行遍历</li><li>dfs走到尽头的时候就是end node。然后会退到上一个节点，如果这个节点出度为0，其就定位倒数第二个点。</li><li>如此以往，回退到头就可以得到欧拉路径。</li></ul><h1 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1><h2 id="Reconstruct-Itinerary"><a href="#Reconstruct-Itinerary" class="headerlink" title="Reconstruct Itinerary"></a><a href="https://leetcode.com/problems/reconstruct-itinerary/" target="_blank" rel="noopener">Reconstruct Itinerary</a></h2><p>问题: Given a list of airline tickets represented by pairs of departure and arrival airports <code>[from, to]</code>, reconstruct the itinerary in order. All of the tickets belong to a man who departs from <code>JFK</code>. Thus, the itinerary must begin with <code>JFK</code>.</p><p><strong>Note:</strong></p><ol><li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li><li>All airports are represented by three capital letters (IATA code).</li><li>You may assume all tickets form at least one valid itinerary.</li><li>One must use all the tickets once and only once.</li></ol><p><strong>Example 1:</strong></p><pre><code class="hljs prolog"><span class="hljs-symbol">Input</span>: [[<span class="hljs-string">"MUC"</span>, <span class="hljs-string">"LHR"</span>], [<span class="hljs-string">"JFK"</span>, <span class="hljs-string">"MUC"</span>], [<span class="hljs-string">"SFO"</span>, <span class="hljs-string">"SJC"</span>], [<span class="hljs-string">"LHR"</span>, <span class="hljs-string">"SFO"</span>]]<span class="hljs-symbol">Output</span>: [<span class="hljs-string">"JFK"</span>, <span class="hljs-string">"MUC"</span>, <span class="hljs-string">"LHR"</span>, <span class="hljs-string">"SFO"</span>, <span class="hljs-string">"SJC"</span>]</code></pre><p><strong>Example 2:</strong></p><pre><code class="hljs prolog"><span class="hljs-symbol">Input</span>: [[<span class="hljs-string">"JFK"</span>,<span class="hljs-string">"SFO"</span>],[<span class="hljs-string">"JFK"</span>,<span class="hljs-string">"ATL"</span>],[<span class="hljs-string">"SFO"</span>,<span class="hljs-string">"ATL"</span>],[<span class="hljs-string">"ATL"</span>,<span class="hljs-string">"JFK"</span>],[<span class="hljs-string">"ATL"</span>,<span class="hljs-string">"SFO"</span>]]<span class="hljs-symbol">Output</span>: [<span class="hljs-string">"JFK"</span>,<span class="hljs-string">"ATL"</span>,<span class="hljs-string">"JFK"</span>,<span class="hljs-string">"SFO"</span>,<span class="hljs-string">"ATL"</span>,<span class="hljs-string">"SFO"</span>]<span class="hljs-symbol">Explanation</span>: <span class="hljs-symbol">Another</span> possible reconstruction is [<span class="hljs-string">"JFK"</span>,<span class="hljs-string">"SFO"</span>,<span class="hljs-string">"ATL"</span>,<span class="hljs-string">"JFK"</span>,<span class="hljs-string">"ATL"</span>,<span class="hljs-string">"SFO"</span>].             <span class="hljs-symbol">But</span> it is larger in lexical order.</code></pre><p>分析: 应用欧拉路径的dfs遍历方法，且因为对于path序列有要求，我们需要进行字典序升序的dfs遍历。因此，每个节点的邻居先排序即可。</p><p>对比不同的遍历序列方式:</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="image-20201004201417907.png" srcset="/img/loading.gif" alt="image-20201004201417907"></div><div class="group-image-wrap"><img src="image-20201004201446001.png" srcset="/img/loading.gif" alt="image-20201004201446001"></div></div></div><p>图中说明，先遍历的的节点，最后成为先到的点。</p><p>代码如下:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findItinerary</span><span class="hljs-params">(self, tickets: List[List[str]])</span> -&gt; List[str]:</span>    graph, res = collections.defaultdict(list), []    <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> sorted(tickets)[::<span class="hljs-number">-1</span>]:        graph[a].append(b)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">visit</span><span class="hljs-params">(node)</span>:</span>        <span class="hljs-keyword">while</span> graph[node]:            visit(graph[node].pop())        res.append(node)    visit(<span class="hljs-string">'JFK'</span>)    <span class="hljs-keyword">return</span> res[::<span class="hljs-number">-1</span>]</code></pre><ul><li>代码中，降序建立每个节点的邻居，这样在dfs的时候，利用pop邻居节点实现了先访问字典序小的节点。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Graph</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cycle Detection</title>
    <link href="/2020/05/03/Cycle-Detection/"/>
    <url>/2020/05/03/Cycle-Detection/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://en.wikipedia.org/wiki/Cycle_detection" target="_blank" rel="noopener">Cycle detection algorithms</a>. Given an array of n + 1 integers with each in [1, n], can you detect duplicates in O(1) space and O(n) time?</p></blockquote><a id="more"></a><h2 id="1-Find-the-element-that-appear-once"><a href="#1-Find-the-element-that-appear-once" class="headerlink" title="1 Find the element that appear once"></a>1 Find the element that appear once</h2><h3 id="1-1-Problem-statement"><a href="#1-1-Problem-statement" class="headerlink" title="1.1 Problem statement:"></a>1.1 Problem statement:</h3><p>Given an array of n + 1 integers with each in [1, n], can you detect duplicates in O(1) space and O(n) time?</p><h3 id="1-2-Solution"><a href="#1-2-Solution" class="headerlink" title="1.2 Solution:"></a>1.2 Solution:</h3><p>As all the integers are ranged in [1, n], there must be at least one duplicate due to the pigeonhole principle. The trick is to treat each integer as an index of the input array, such that it points to another integer in the input i.e. treat it as a <strong>pointer</strong>. </p><p>Then, we need to locate a starting point. In this case, if we consider the index starts from 0, the 1st integer cannot have any pointers going to it, since its position is smaller than any integers in the array. Of course, if the index starts from 1, it is intuitive to find the nth integer as the starting point as it is larger than any integer in the array. </p><p>After that, we can use Floyd&#39;s cycle-finding algorithm (Floyd&#39;s Tortoise and Hare).  </p> <img src="https://pic.leetcode-cn.com/9c5b49fc4678549f703bb997a9254e99a4d66f5ec0909f4aa2d88f14261673cc-file_1587171752327" srcset="/img/loading.gif" width="800" alt="" align=center /><p>L: the distance between the starting point and the cycle start.<br>C: cycle length<br>C’: distance between where hare stays in the cycle and the cycle start.</p><p>It holds that<br>$$\begin{equation}\label{eq1}<br>L = (N - 1) * C + (C - C’)<br>\end{equation}$$</p><p><img src="image-20200714174341849.png" srcset="/img/loading.gif" alt="image-20200714174341849"></p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findDuplicate</span><span class="hljs-params">(nums)</span>:</span>        slow = <span class="hljs-number">0</span>    slow = nums[slow]    fast = nums[slow]    <span class="hljs-keyword">while</span> slow != fast:        slow = nums[slow]        fast = nums[nums[fast]]    fast = <span class="hljs-number">0</span>    <span class="hljs-keyword">while</span> slow != fast:        fast = nums[fast]        slow = nums[slow]        <span class="hljs-keyword">return</span> slow</code></pre><h3 id="1-3-Add-the-offset"><a href="#1-3-Add-the-offset" class="headerlink" title="1.3 Add the offset."></a>1.3 Add the offset.</h3><p>We can add the offset to this array, for example:</p><p>Given an array of n integers with each in [1 + offset, n + offset], can you detect duplicates in O(1) space and O(n) time?</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findDuplicate_offset</span><span class="hljs-params">(nums, offset)</span>:</span>        slow = <span class="hljs-number">0</span> + offset    slow = nums[slow - offset]    fast = nums[slow - offset]    <span class="hljs-keyword">while</span> slow != fast:        slow = nums[slow - offset]        fast = nums[nums[fast - offset] - offset]    fast = <span class="hljs-number">0</span> + offset    <span class="hljs-keyword">while</span> slow != fast:        fast = nums[fast - offset]        slow = nums[slow - offset]        <span class="hljs-keyword">return</span> slow</code></pre><p>reference: <a href="https://www.jasondavies.com/duplicates/" target="_blank" rel="noopener">https://www.jasondavies.com/duplicates/</a></p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findDuplicate</span><span class="hljs-params">(nums)</span>:</span>        start = nums[<span class="hljs-number">0</span>] <span class="hljs-comment"># we can fix the start point</span>    slow = nums[start]    find = nums[nums[start]]    <span class="hljs-keyword">while</span> slow != fast:        slow = nums[slow]        fast = nums[nums[fast]]    fast = start <span class="hljs-comment"># equal to start point</span>    <span class="hljs-keyword">while</span> slow != fast:        fast = nums[fast]        slow = nums[slow]        <span class="hljs-keyword">return</span> slow</code></pre><p>For the duplicate problem, the start point can be that “start = nums[0]” or “start = 0”. If it is “start = nums[0]”, it indicates this is the second point along the path. Since the start point “0” has indegree equal to 0, the second point is also acceptable as the start point.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Bitwise Operation</title>
    <link href="/2020/05/02/bitwise-operation/"/>
    <url>/2020/05/02/bitwise-operation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers, every element appears k (k &gt; 1) times except for one, which appears p times (p &gt;= 1, p % k != 0). Find that single one.</p></blockquote><a id="more"></a><h2 id="1-Find-the-element-that-appear-once"><a href="#1-Find-the-element-that-appear-once" class="headerlink" title="1 Find the element that appear once"></a>1 Find the element that appear once</h2><h3 id="1-1-Problem-statement"><a href="#1-1-Problem-statement" class="headerlink" title="1.1 Problem statement:"></a>1.1 Problem statement:</h3><p>Given an array of integers, every element appears k (k &gt; 1) times except for one, which appears p times (p &gt;= 1, p % k != 0). Find that single one.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>example 1:    k = 2, p =1</li></ul><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_elements</span><span class="hljs-params">(nums)</span>:</span>    x1 = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> nums:        x1 ^= e    <span class="hljs-keyword">return</span> x1</code></pre><ul><li>example 2:    k = 3, p =1</li></ul><p>solution 1:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_elements</span><span class="hljs-params">(nums)</span>:</span>    x1 = <span class="hljs-number">0</span>x2 = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> nums:        x2 ^= x1 &amp; e        x1 ^= e        mask = ~(x2 &amp; x1)        x1 &amp;= mask         x2 &amp;= mask    <span class="hljs-keyword">return</span> x1 | x2</code></pre><p>We consider a 32-bit integer as 32 bits of individual numbers. Each bit corresponds a counter, which should start from 00 to 11.<br>So,  we can build the truth table.</p><table><thead><tr><th>high_bit</th><th>low_bit</th><th>input</th><th>high_bit_output</th><th>low_bit_output</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr></tbody></table><p>One way is that we can get hight bit and low bit formula from the truth table directly. Another way is that consider any bit, it is clear that the high_bit and low_bit runs as a binary counter. Therefore, we build the low_bit and high_bit as that </p><pre><code class="hljs python">high_bit = high_bit ^ (low_bit &amp; input)low_bit = low_bit ^ input</code></pre><p>But it cannot get to that 11. Therefore, we utilize the bitmask strategy to reset the counter. That is</p><pre><code class="hljs python">bitmask = ~ (high_bit &amp; low_bit)low_bit = low_bit $ bitmaskhigh_bit = high_bit $ bitmask</code></pre><p>Instead of using 32 counters for each bit, we just need to use x1 and x2 to represent them (x1: integer for all low bits, x2: integer for all high bits) as the computation for each bit is independent.  </p><p>solution 2:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_elements</span><span class="hljs-params">(nums)</span>:</span>    cnt = [<span class="hljs-number">0</span>] * <span class="hljs-number">32</span>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> nums:        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(cnt)):    cnt[i] += e &amp; <span class="hljs-number">1</span>e &gt;&gt;= <span class="hljs-number">1</span>    res = <span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(cnt)):        <span class="hljs-keyword">if</span> cnt[i] % <span class="hljs-number">3</span>:            res += <span class="hljs-number">1</span>&lt;&lt;i<span class="hljs-keyword">if</span> res &lt; <span class="hljs-number">2</span>**<span class="hljs-number">31</span>:        <span class="hljs-keyword">return</span> res    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> res - <span class="hljs-number">2</span>**<span class="hljs-number">32</span></code></pre><p>The reason for that “res - 2^32” is because the complement code of a negative integer is computed by the inverse code plus 1. Therefore</p><p>consider the negative integer -1 in 3-digit format. </p><pre><code class="hljs python"><span class="hljs-number">0001</span>    <span class="hljs-comment"># orignial integer of positive 1</span><span class="hljs-number">1110</span>    <span class="hljs-comment"># inverse code</span><span class="hljs-number">1111</span>    <span class="hljs-comment"># complement code : inverse one + 1 </span><span class="hljs-comment"># to calculate it</span>x = <span class="hljs-number">1111</span> - <span class="hljs-number">10000</span>x = <span class="hljs-number">-1</span></code></pre><p>So if we count that sign bit, the correspondiong positive interger has a distance between 2**32, the negative distance is the negative number.</p><h2 id="2-Find-two-elements-that-appear-once"><a href="#2-Find-two-elements-that-appear-once" class="headerlink" title="2 Find two elements that appear once"></a>2 Find two elements that appear once</h2><h3 id="2-1-The-code"><a href="#2-1-The-code" class="headerlink" title="2.1 The code"></a>2.1 The code</h3><p>The code is shown in below.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_elements</span><span class="hljs-params">(nums)</span>:</span>    diff = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> nums:        diff ^= e    diff &amp;= -diff    res = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> nums:        <span class="hljs-keyword">if</span> e&amp;diff == <span class="hljs-number">0</span>:            res[<span class="hljs-number">0</span>] ^= e        <span class="hljs-keyword">else</span>：            res[<span class="hljs-number">0</span>] ^= e    <span class="hljs-keyword">return</span> res</code></pre><h3 id="2-2-Bitwise-operation-on-x-amp-x"><a href="#2-2-Bitwise-operation-on-x-amp-x" class="headerlink" title="2.2 Bitwise operation on x &amp; -x"></a>2.2 Bitwise operation on x &amp; -x</h3><p>get rightmost set bit,</p><pre><code class="hljs python">x &amp; -x// <span class="hljs-keyword">or</span>x &amp; (~x + <span class="hljs-number">1</span>)</code></pre><p>unset rightmost set bit,</p><pre><code class="hljs python">x &amp;= x - <span class="hljs-number">1</span>// <span class="hljs-keyword">or</span>x -= x &amp; -x  // rhs <span class="hljs-keyword">is</span> rightmost set bit</code></pre><p>why it works</p><pre><code class="hljs python">x:                     leading bits  <span class="hljs-number">1</span>  all <span class="hljs-number">0</span>~x:           reversed leading bits  <span class="hljs-number">0</span>  all <span class="hljs-number">1</span>~x + <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> -x: reversed leading bits  <span class="hljs-number">1</span>  all <span class="hljs-number">0</span>x &amp; -x:                       all <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  all <span class="hljs-number">0</span>eg, let x = <span class="hljs-number">112</span>, <span class="hljs-keyword">and</span> choose <span class="hljs-number">8</span>-bit <span class="hljs-keyword">for</span> simplicity, though the idea <span class="hljs-keyword">is</span> same <span class="hljs-keyword">for</span> all size of integer.</code></pre><p>example for get rightmost set bit</p><pre><code class="hljs python">x:             <span class="hljs-number">01110000</span>~x:            <span class="hljs-number">10001111</span>-x <span class="hljs-keyword">or</span> ~x + <span class="hljs-number">1</span>:  <span class="hljs-number">10010000</span>x &amp; -x:        <span class="hljs-number">00010000</span></code></pre><p>example for unset rightmost set bit</p><pre><code class="hljs python">x:             <span class="hljs-number">01110000</span>x<span class="hljs-number">-1</span>:           <span class="hljs-number">01101111</span>x &amp; (x<span class="hljs-number">-1</span>):     <span class="hljs-number">01100000</span></code></pre><p>some references: <a href="http://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">http://graphics.stanford.edu/~seander/bithacks.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Bitwise Operation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Common Mistakes</title>
    <link href="/2020/04/14/My-Common-Mistakes/"/>
    <url>/2020/04/14/My-Common-Mistakes/</url>
    
    <content type="html"><![CDATA[<Contents><h1 id="1-“-”"><a href="#1-“-”" class="headerlink" title="1. “==”"></a>1. “==”</h1><p>check “==” sign which can not be shown in a single line. </p><h1 id="2-ctrl-v"><a href="#2-ctrl-v" class="headerlink" title="2. ctrl + v."></a>2. ctrl + v.</h1><p>if using this shortcut to copy code, watch the varibles, especially when we have left and right. (S and T)</p><h1 id="3-BFS"><a href="#3-BFS" class="headerlink" title="3. BFS"></a>3. BFS</h1><p>watch out for matrix if it is matrix[i][j] = ‘1’ or matrix[i][j] = 1.</p><p>While looping coordintates = [[0,-1], [0, 1], [-1, 0], [1, 0]], buid new x axis like:  new_x = x + e[0]. </p><h1 id="4-str-concatenation"><a href="#4-str-concatenation" class="headerlink" title="4. str concatenation"></a>4. str concatenation</h1><p>first build the list of strings, then use ‘’.join(ls) to get them.</p><h1 id="5-how-to-sort-and-return-sorted-indexes"><a href="#5-how-to-sort-and-return-sorted-indexes" class="headerlink" title="5. how to sort and return sorted indexes?"></a>5. how to sort and return sorted indexes?</h1><p>Leetcode </p><ol start="23"><li>Merge k Sorted Lists<br>mistake 1: didn’t think of the divide and conquer to merge the lists to improve the time complexity.<br>mistake 2: using heap, forget to update the list: like <pre><code class="hljs python">head.next = nodehead = head.next <span class="hljs-comment">#update it to make it proceed to next</span></code></pre></li></ol><ol start="53"><li>Maximum Subarray<br>mistake: overlook the order of dealing the cur_min and max_sum, max_min should be updated before updating cur_min<pre><code class="hljs python"><span class="hljs-keyword">for</span> loop:    cur_sum += e    max_sum = max(max_sum, cur_sum - cur_min)    cur_min = min(cur_min, cur_sum)</code></pre></li></ol><ol start="263"><li>Ugly Number<br>mistake: overlook the recursion depth</li></ol><h1 id="6-index-of-2D-Matrix"><a href="#6-index-of-2D-Matrix" class="headerlink" title="6 index of  2D Matrix"></a>6 index of  2D Matrix</h1><pre><code class="hljs python">Matrix[i][j] <span class="hljs-comment">#right !!!!</span>Matrix[i, j] <span class="hljs-comment">#wrong</span></code></pre><h1 id="7-index-of-Monotonous-stack"><a href="#7-index-of-Monotonous-stack" class="headerlink" title="7  index of Monotonous stack"></a>7  index of Monotonous stack</h1><pre><code class="hljs python"><span class="hljs-keyword">while</span> stack <span class="hljs-keyword">and</span> height[stack[<span class="hljs-number">-1</span>]] &gt; height[i]: <span class="hljs-comment"># !!! if the stack stores the index!!!!</span></code></pre><p>I usually forget that the stack is already used for storing the index, thus comparing the stack value with the array value like: stack[-1] &gt; height[i]</p><h1 id="8-prefix-Sum-Initialization"><a href="#8-prefix-Sum-Initialization" class="headerlink" title="8 prefix Sum Initialization"></a>8 prefix Sum Initialization</h1><p>When using prefix sum, we must initialize the first prefix sum with zero !!!</p><pre><code class="hljs python"><span class="hljs-comment">#Initialize with dictionary</span>prefixSum = &#123;<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>&#125; <span class="hljs-comment">#value is 0, index is -1</span><span class="hljs-comment">#Iniitalize with array</span>prefixSum = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)+<span class="hljs-number">1</span>)]prefixSum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span> <span class="hljs-comment">#set the first prefixSum to zero</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Breadth First Search</title>
    <link href="/2020/04/13/Breadth-First-Search/"/>
    <url>/2020/04/13/Breadth-First-Search/</url>
    
    <content type="html"><![CDATA[<blockquote><p>BFS and its applications</p></blockquote><a id="more"></a><h3 id="1-When-do-we-use-BFS"><a href="#1-When-do-we-use-BFS" class="headerlink" title="1. When do we use BFS?"></a>1. When do we use BFS?</h3><h4 id="1-1-Traversal-in-graph"><a href="#1-1-Traversal-in-graph" class="headerlink" title="1.1 Traversal in graph"></a>1.1 Traversal in graph</h4><ul><li><p>level order traversal</p></li><li><p>connected component</p></li><li><p>topological sorting</p></li></ul><h4 id="1-2-Shortest-path-in-simple-graph"><a href="#1-2-Shortest-path-in-simple-graph" class="headerlink" title="1.2 Shortest path in simple graph"></a>1.2 Shortest path in simple graph</h4><ul><li>simple graph, undirectional graph, every edge has a same length of 1.  </li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Divide Conquer</title>
    <link href="/2020/04/08/Divide-Conquer/"/>
    <url>/2020/04/08/Divide-Conquer/</url>
    
    <content type="html"><![CDATA[<Contents><h2 id="1-When-to-use-divide-and-conquer"><a href="#1-When-to-use-divide-and-conquer" class="headerlink" title="1 When to use divide and conquer?"></a>1 When to use divide and conquer?</h2><p>When the problem can be divided and the divided part can be solved based on the similar procedure, it is reasonable to use divide and conquer.  This also suggest that divide conquer can apply to some special data structures, like binary tree, which has the recursion structure. </p><p>Typically, we can solve the following problems by employing divide and conquer.</p><p>$$\begin{equation}\label{eq1}T(n) = 2T(n/2) + O(1) = O(n) \tag{1}<br>\end{equation}$$</p><p>$$\begin{equation}\label{eq2}<br>T(n) = 2T(n/2) + O(n) = O(n \log n) \tag{2}<br>\end{equation}$$</p><h2 id="2-Comparison-between-traverse-and-divide-conquer"><a href="#2-Comparison-between-traverse-and-divide-conquer" class="headerlink" title="2 Comparison between traverse and divide conquer"></a>2 Comparison between traverse and divide conquer</h2><ul><li>2.1 both can be implemented by recursion</li><li>2.2 result in parameter v.s. result in return value</li><li>2.3 top down v.s. bottom up</li></ul><h2 id="3-How-to-solve-the-related-problems"><a href="#3-How-to-solve-the-related-problems" class="headerlink" title="3 How to solve the related problems?"></a>3 How to solve the related problems?</h2><h3 id="3-1-The-basic-application"><a href="#3-1-The-basic-application" class="headerlink" title="3.1 The basic application"></a>3.1 The basic application</h3><p>Suppose we define a problem $P(root)$ which computes a target value in a binary tree. The problem $P(root)$ can be solved by divide and conquer if we can employ the same function to solve the subproblem like $P(root.left)$ and $P(root.right)$ and then merge the results to get the target value for $P(root)$. The peusudo code is shown in below.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Problem</span><span class="hljs-params">(root)</span>:</span>    <span class="hljs-comment"># boundary conditions</span>    left = Problem(root.left)    right = Problem(root.right)    <span class="hljs-keyword">return</span> Merge(left, right)</code></pre><h3 id="3-2-The-advanced-version"><a href="#3-2-The-advanced-version" class="headerlink" title="3.2 The advanced version"></a>3.2 The advanced version</h3><p>Similarly, suppose we define a problem $P(root)$ which computes a target value in a binary tree. The problem $P(root)$ actually can be solved by employing a different auxiliary function $P’(root.left)$ and $P’(root.right)$. This indicates that we should combine two problems $P(\cdot)$ and $P’(\cdot)$ together to solve the problem. The peusudo code is shown in below.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Problem</span><span class="hljs-params">(root)</span>:</span>    <span class="hljs-comment"># boundary conditions</span>    left0, left1 = Problem(root.left)    right0, right1 = Problem(root.right)    <span class="hljs-keyword">return</span> Merge0(left0, right0), Merge1(left1, right1)</code></pre><h3 id="3-3-The-boundary-conditions"><a href="#3-3-The-boundary-conditions" class="headerlink" title="3.3 The boundary conditions"></a>3.3 The boundary conditions</h3><p>This needs a precise design. According to my experience so far, we summarize a few examples. </p><pre><code>      root      /    node1    / node2  /None</code></pre><p>​      </p><ul><li>Case 1: If the $P(root)$ needs to return a value 3, the boundary condition is designed as: </li></ul><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Problem</span><span class="hljs-params">(root)</span>:</span>    <span class="hljs-comment"># boundary condition</span>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>    <span class="hljs-comment"># return condition</span>    <span class="hljs-keyword">return</span> Merge(left, right) + <span class="hljs-number">1</span></code></pre><ul><li>Case 2: If the $P(root)$ needs to return a value 2, the boundary condition is designed as:</li></ul><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Problem</span><span class="hljs-params">(root)</span>:</span>    <span class="hljs-comment"># boundary condition</span>    <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>    <span class="hljs-comment"># return condition</span>    <span class="hljs-keyword">return</span> Merge(left, right) + <span class="hljs-number">1</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium WebDriver</title>
    <link href="/2020/04/08/Selenium-WebDriver/"/>
    <url>/2020/04/08/Selenium-WebDriver/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Good tool for web crawler. I actually use it to grade the homework, as the students sumbit their turing code. Selenium is really easy to use by just getting the id of the element.</p></blockquote><Contents><p>The simple version of my code is shown in below.</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">runOnineTuringMachine</span><span class="hljs-params">()</span>:</span>    driver = webdriver.Chrome(<span class="hljs-string">'C:\chromedriver_win32\chromedriver.exe'</span>)      driver.get(<span class="hljs-string">'http://morphett.info/turing/turing.html'</span>)    driver.maximize_window()    elem = driver.find_element_by_id(<span class="hljs-string">'InitialIput'</span>)    elem.clear()    elem.send_keys(<span class="hljs-string">'1100'</span>)        <span class="hljs-keyword">with</span> open(<span class="hljs-string">r'test_machine.txt'</span>) <span class="hljs-keyword">as</span> f:        content = f.readlines()    content = [x.strip() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> content <span class="hljs-keyword">if</span> len(x) != <span class="hljs-number">0</span>]    elem = driver.find_element_by_id(<span class="hljs-string">'Source'</span>)    elem.clear()      <span class="hljs-keyword">for</span> x  <span class="hljs-keyword">in</span> content:        elem.send_keys(x)        elem.send_keys(Keys.RETURN)        elem = driver.find_element_by_id(<span class="hljs-string">'ResetButton'</span>)    elem.click()    elem = driver.find_element_by_id(<span class="hljs-string">'RunButton'</span>)    elem.click()    time.sleep(<span class="hljs-number">5</span>)     elem = driver.find_by_id(<span class="hljs-string">'ActiveTape'</span>)    text = elem.text    driver.quit()<span class="hljs-keyword">return</span> text</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Web Crawler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Binary Search</title>
    <link href="/2020/04/05/Binary-Search/"/>
    <url>/2020/04/05/Binary-Search/</url>
    
    <content type="html"><![CDATA[<blockquote><p>The key idea of binary search.</p></blockquote><a id="more"></a><h1 id="1-Introduction-to-binary-search"><a href="#1-Introduction-to-binary-search" class="headerlink" title="1. Introduction to binary search"></a>1. Introduction to binary search</h1><p>The key idea of binary search starts from the time complexity, which comes from the following equation.</p><p>$$\begin{equation}\label{eq1}<br>T(n) = T(n/2) + O(1) = O(\log n) \tag{1}<br>\end{equation}$$</p><p><font color=Red>Suggestion</font>: If there exists an algorithm run in $O(n)$ time, the potential way to optimize it is to introduce binary search to do it in $O(\log n)$ time.</p><p>An interesting equations is given below.</p><p>$$\begin{equation}\label{eq2}<br>T(n) = T(n/2) + O(n) = O(2n) \tag{2}<br>\end{equation}$$</p><h1 id="2-Time-complexity-to-different-problems"><a href="#2-Time-complexity-to-different-problems" class="headerlink" title="2. Time complexity to different problems"></a>2. Time complexity to different problems</h1><table><thead><tr><th>time complexity</th><th>possible problems</th></tr></thead><tbody><tr><td>$O(1)$</td><td>rare</td></tr><tr><td>$O(\log n)$</td><td>almost binary search</td></tr><tr><td>$O(\sqrt n)$</td><td>factorization</td></tr><tr><td>$O( n)$</td><td>all</td></tr><tr><td>$O(n^2)$</td><td>array, enumerate, DP</td></tr><tr><td>$O(n^3)$</td><td>array, enumerate, DP</td></tr><tr><td>$O(2^n)$</td><td>combination</td></tr><tr><td>$O(n!)$</td><td>permutation</td></tr></tbody></table><h1 id="3-Template-for-binary-search"><a href="#3-Template-for-binary-search" class="headerlink" title="3. Template for binary search"></a>3. Template for binary search</h1><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findPos</span><span class="hljs-params">(nums, target)</span>:</span><span class="hljs-keyword">if</span> nums <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> len(nums) == <span class="hljs-number">0</span>:<span class="hljs-keyword">return</span><span class="hljs-comment">#</span>start, end = <span class="hljs-number">0</span>, len(nums) - <span class="hljs-number">1</span><span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:mid = start + (end - start) // <span class="hljs-number">2</span> <span class="hljs-comment"># for out of bounds </span><span class="hljs-comment"># nums[mid] ==, &lt;, &gt;</span><span class="hljs-keyword">if</span> nums[mid] == target:<span class="hljs-keyword">return</span> mid<span class="hljs-keyword">elif</span> nums[mid] &lt; target:start = mid<span class="hljs-keyword">else</span>: <span class="hljs-comment"># nums[mid] &gt; target </span>end = mid<span class="hljs-comment"># nums[start], nums[end] ? target </span><span class="hljs-keyword">if</span> nums[start] == target:<span class="hljs-keyword">return</span> start<span class="hljs-keyword">if</span> nums[end] == target:<span class="hljs-keyword">return</span> end<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></code></pre><h1 id="4-Applications"><a href="#4-Applications" class="headerlink" title="4. Applications"></a>4. Applications</h1><ul><li>example 1. the first/last position to be satisfied.  </li><li>example 2. search big sorted array with no end.</li><li>example 3. search in rotated sorted array.</li></ul><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h2><p>to be continued…</p><h2 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h2><p>Consider the problem 2. The idea is similar to exponential backofff. The code is given below.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">searchInBigSorted</span><span class="hljs-params">(ArrayReader, target)</span>:</span>        start = <span class="hljs-number">0</span>    end = <span class="hljs-number">2</span>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:        mid = (start + end) // <span class="hljs-number">2</span>        val = ArrayReader[mid]        <span class="hljs-keyword">if</span> val &gt;= target:            end = mid        <span class="hljs-keyword">else</span>:            temp = start            start = mid            end = temp + (mid - temp) * <span class="hljs-number">4</span>       <span class="hljs-keyword">if</span> ArrayReader[start] == target:        <span class="hljs-keyword">return</span> start      <span class="hljs-keyword">if</span> ArrayReader[end] == target:        <span class="hljs-keyword">return</span> end        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></code></pre><h2 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h2><p>Consider the problem 3. We observe that it is not a standard sorted array. However, it has a property indicating that we can cut it in half. This means that  <font color=Red>the orginial problem can be partitioned to two half problems that has the same property as the orginial one</font>.</p><p>As it shown in Fig. 1(a), we can use the first element and last element to decide in which sorted part the current middle number is.  In particular, if it is mid&gt;end, it is in the 1st part. Otherwise, it is in the part I. Consider that the mid is in the 1st part I. It must satisfy mid&gt;target&gt;=start, it can follow the binary search to make end = mid. If mid is in the 2nd part, it must satisfy mid&lt;target&lt;=target so that it can follow the binary search to make start= mid.  </p><table><thead><tr><th align="center"><img src="rsa.png" srcset="/img/loading.gif" alt="hello" title="Fig. 1(a) rotated sorted array"></th><th align="center"><img src="mrsa.png" srcset="/img/loading.gif" alt="hello" title="Fig. 1(b) modified rotated sorted array"></th></tr></thead></table><p>Similar to the discussion above, we can solve the modified version. The code is given below.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">searchInRotatedSorted</span><span class="hljs-params">(nums, target)</span>:</span>    <span class="hljs-keyword">if</span> nums <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> len(nums) == <span class="hljs-number">0</span>:<span class="hljs-keyword">return</span>    start, end = <span class="hljs-number">0</span>, len(nums) - <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> start + <span class="hljs-number">1</span> &lt; end:        mid = start + (end - start) // <span class="hljs-number">2</span> <span class="hljs-comment"># for out of bounds </span>        <span class="hljs-comment"># nums[mid] ==, &lt;, &gt;</span>        <span class="hljs-keyword">if</span> nums[mid] == target:            end = mid        <span class="hljs-keyword">elif</span> nums[mid] &gt;= nums[start]:  <span class="hljs-comment"># case1: mid is green</span>            <span class="hljs-keyword">if</span> nums[mid]&gt; target <span class="hljs-keyword">and</span> target &gt;= nums[start]:                end = mid            <span class="hljs-keyword">else</span>:                start = mid        <span class="hljs-keyword">elif</span> nums[mid] &lt;= nums[end]:    <span class="hljs-comment"># case2: mid is yellow</span>            <span class="hljs-keyword">if</span> nums[mid]&lt; target <span class="hljs-keyword">and</span> target &lt;= nums[end]:                start = mid            <span class="hljs-keyword">else</span>:                end = mid        <span class="hljs-keyword">else</span>:                           <span class="hljs-comment"># case3: mid is red</span>            <span class="hljs-keyword">if</span> nums[mid] &lt; target:                <span class="hljs-keyword">if</span> target &lt; nums[start]:                     start = mid                <span class="hljs-keyword">else</span>:                    end = mid            <span class="hljs-keyword">else</span>: <span class="hljs-comment"># nums[mid] &gt; target </span>                <span class="hljs-keyword">if</span> target &gt; nums[end]:                    end = mid                <span class="hljs-keyword">else</span>:                    start = mid    <span class="hljs-comment"># nums[start], nums[end] ? target </span>    <span class="hljs-keyword">if</span> nums[start] == target:<span class="hljs-keyword">return</span> start    <span class="hljs-keyword">if</span> nums[end] == target:<span class="hljs-keyword">return</span> end<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span></code></pre><p>Notice that in the middle part, we need to compare <font color=Red>the target and mid </font> firstly to divide the cases in half. </p><h3 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h3><p>Find the median in two sorted arrays.</p><p>The key idea is to sperate the two arrays in two parts. Assuming len(A) &lt; len(B), where m = len(A) and n = len(B).</p><ul><li><p>if (m + n) % 2 == 1, the first part (smaller part, part of A and part of B) contains (m+n+1)/2 number.</p></li><li><p>if (m + n) % 2 == 0, the first part contains (m+2)/2 number.</p></li></ul><p>So, we set the first part to have (m+n+1)//2 number. eg. if total is 15, the 1st part has 8. If total is 16, the 1st part is 8.</p><p>To cut A into two subparts, we use index i to represent cutting point of A</p><pre><code>| A[0] | A[1] | ... | A[i-1] | A[i] | ... |A[m-1] |</code></pre><p> i  =   0         1         2 … i-1         i           … m-1         m               </p><p>Thus, the index i is in [0, m]. So the cutting point j of B is that j = (m+n+1)//2 - i. Then, two conditions are going to be discussed.</p><pre><code class="hljs python"><span class="hljs-keyword">if</span> A[i<span class="hljs-number">-1</span>] &gt; B[j]:  <span class="hljs-comment"># first condition</span>    end = i - <span class="hljs-number">1</span><span class="hljs-keyword">if</span> A[i] &lt; B[j<span class="hljs-number">-1</span>]:  <span class="hljs-comment"># second condition</span>start = i + <span class="hljs-number">1</span></code></pre><p>Note that </p><ul><li>For the 1st condition, we need to guarantee that i &gt; 0 and  j &lt; n. </li><li>For the 2nd condition, we need to guarantee that i &lt; m and j &gt; 0.</li></ul><p>The last step to make sure is that the break condition is </p><pre><code class="hljs python"><span class="hljs-keyword">while</span> start &lt;= end:</code></pre><p>This is because when start = end, we need to do another computation to obtain the index i = (start + end)//2</p><p>So the coding is shown as:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">two_sorted_arrays</span><span class="hljs-params">(A,B)</span></span><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-title">len</span><span class="hljs-params">(A)</span> &gt; <span class="hljs-title">len</span><span class="hljs-params">(B)</span>:</span>        A, B = B, A    m, n = len(A), len(B)        start, end = <span class="hljs-number">0</span>, m    <span class="hljs-keyword">while</span> start &lt;= end:        i = (start + end) // <span class="hljs-number">2</span>        j = (m + n + <span class="hljs-number">1</span>)//<span class="hljs-number">2</span> - i        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j &lt; n <span class="hljs-keyword">and</span> A[i<span class="hljs-number">-1</span>] &gt; B[j]:            end = i - <span class="hljs-number">1</span>            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> i &lt; m <span class="hljs-keyword">and</span> j &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> A[i] &lt; B[j<span class="hljs-number">-1</span>]:            start = i + <span class="hljs-number">1</span>            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">break</span>        left = -sys.maxsize     <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>: left = max(left, A[i<span class="hljs-number">-1</span>])    <span class="hljs-keyword">if</span> j &gt; <span class="hljs-number">0</span>: left = max(left, B[j<span class="hljs-number">-1</span>])        <span class="hljs-keyword">if</span> (m+n)%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> left        right = sys.maxsize    <span class="hljs-keyword">if</span> i &lt; m: right = min(right, A[i])    <span class="hljs-keyword">if</span> j &lt; n: right = min(right, B[i])    <span class="hljs-keyword">return</span> (left+right)/<span class="hljs-number">2</span></code></pre><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ol><li>wood cut <a href="https://yeqiuquan.blogspot.com/2017/03/lintcode-183-wood-cut.html" target="_blank" rel="noopener">https://yeqiuquan.blogspot.com/2017/03/lintcode-183-wood-cut.html</a></li><li>copy books <a href="https://yeqiuquan.blogspot.com/2017/03/lintcode-437-copy-books.html" target="_blank" rel="noopener">https://yeqiuquan.blogspot.com/2017/03/lintcode-437-copy-books.html</a></li><li>search a 2D Matrix II <a href="https://leetcode.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="noopener">https://leetcode.com/problems/search-a-2d-matrix-ii/</a></li><li>search-for-range <a href="https://yeqiuquan.blogspot.com/2016/03/search-for-range.html" target="_blank" rel="noopener">https://yeqiuquan.blogspot.com/2016/03/search-for-range.html</a></li><li>count-of-smaller-number <a href="https://www.lintcode.com/problem/count-of-smaller-number/description" target="_blank" rel="noopener">https://www.lintcode.com/problem/count-of-smaller-number/description</a></li><li>recover Rotated Sorted Array <a href="https://www.lintcode.com/problem/recover-rotated-sorted-array/description" target="_blank" rel="noopener">https://www.lintcode.com/problem/recover-rotated-sorted-array/description</a></li><li>rotate string <a href="http://www.lintcode.com/problem/rotate-string/" target="_blank" rel="noopener">http://www.lintcode.com/problem/rotate-string/</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sorting Algorithm</title>
    <link href="/2020/04/04/Sorting-Algorithm/"/>
    <url>/2020/04/04/Sorting-Algorithm/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Can you write mergeSort and quickSort? In-place mergeSort? In this blog, we talk about the popular sorting algorithms, quickSort, mergeSort and so on. We then compare them from various aspects.</p></blockquote><a id="more"></a><h2 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h2><p>先给出快排的代码，如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(nums, start, end)</span>:</span>&#123;    <span class="hljs-keyword">if</span> start &gt;= end:        <span class="hljs-keyword">return</span>        pivot = nums[random.randint(start, end)]         <span class="hljs-comment">#this is to partition the array </span>    left, right = start, end    <span class="hljs-keyword">while</span> left &lt;= right:        <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[left] &lt; pivot:            left += <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[right] &gt; pivot:            right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> left &lt;= right:            nums[left], nums[right] = nums[right], nums[left]            left += <span class="hljs-number">1</span>            right -= <span class="hljs-number">1</span>    quickSort(nums, start, right)    quickSort(nums, left, end)   &#125;</code></pre><p>注意推出while loop的两个cases:</p><ul><li>left - right = 1</li><li>left - right = 2 </li></ul><h3 id="Important-observations"><a href="#Important-observations" class="headerlink" title="Important observations"></a>Important observations</h3><ol><li><p>为什么使用left &lt;= right?</p><p>因为在下一层递归调用quicksort的时候，我们需要考虑增加还是减少<strong>right</strong>和<strong>left</strong>.</p><p>Otherwise, 代码写成quickSort(nums, start, right-1)和quickSort(nums, left + 1, end)，太复杂了。</p></li></ol><ol start="2"><li><p>为什么使用nums[left] &lt; pivot和nums[right] &gt; pivot而不使用=?</p><p>第一，不使用等号，当我们nums[i] = pviot, 我们也<strong>移动 (swap)</strong> pivot相同的值.</p><p>第二，如果使用=， 在一些的特殊的case里pivot = max value或者pivot = min value. 例如： pivot为最大值, 我们会将left从左移动到右边, 然后导致right<strong>停留不动</strong>, 最终使得dead loop当我们再次调用 quickSort(nums, start, right)，因为right一直没动。</p><p>具体的例子： </p><p>从而导致 quickSort(nums, 0, r) 死循环。</p><pre><code class="hljs python"><span class="hljs-comment">#initial  0  1  3  2  3  x</span><span class="hljs-comment">#         l           r     </span><span class="hljs-comment">#final    0  1  3  2  3  x</span><span class="hljs-comment">#                     r  l</span></code></pre></li><li><p>两个情况推出循环，需要记忆.</p><ul><li><p>right + 1 = left</p></li><li><p>right + 2 = left</p><p>在Case 2中，元素nums[(right+left)/2] 一定时 pivot，</p><p>具体的例子：</p></li></ul><pre><code class="hljs python"><span class="hljs-comment">#initial  0  1  3  2  3  x</span><span class="hljs-comment">#               r  p  l</span></code></pre><p>  pivot一定在之间。</p></li></ol><ol start="4"><li><p>当完成partition之后：</p><ul><li><p>index&lt;=right的，一定&lt;=pivot </p></li><li><p>index&gt;=left  的， 一定&gt;=pivot</p></li><li><p>注意，nums[right]可能不等于pivot, nums[left]同理。</p></li></ul></li></ol><ol start="5"><li><p>在下一层递归调用quickSort(nums, start, right)，可能出现 “right &lt; start” 和”left &gt; end”</p><p>因为, 当 满足”right + 2 = left” 退出且 right退出前满足right =  start, 或者left=end</p></li></ol><h2 id="Quick-Select"><a href="#Quick-Select" class="headerlink" title="Quick Select"></a>Quick Select</h2><p>代码如下：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(self, nums, start, end)</span>:</span>      left, right = start, end    pivot = nums[random.randint(start, end)]    <span class="hljs-keyword">while</span> left &lt;= right:        <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[left] &lt; pivot:            left += <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[right] &gt; pivot:            right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> left &lt;= right:            nums[left], nums[right] = nums[right], nums[left]            left, right = left + <span class="hljs-number">1</span>, right - <span class="hljs-number">1</span></code></pre><p>快速选择，是将一个数组分成左右2或者3部分：</p><ul><li>[start, right]</li><li>[right+1, left -1] </li><li>[left, end]</li></ul><h3 id="Important-observations-1"><a href="#Important-observations-1" class="headerlink" title="Important observations"></a>Important observations</h3><ol><li><p>如果需要将数据分为两段：第一段 &lt;= target，第二段&gt;target:</p><p>只需要修改比较pivot的代码如下：</p><pre><code class="hljs python"><span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[left] &lt;= pivot:</code></pre><p>相应的，如果要分为：第一段&lt;target, 第二段&gt;=target:</p><p>及只用修改如下</p><pre><code class="hljs python"><span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[right] &gt; pivot:</code></pre></li></ol><h3 id="kth-largest-number"><a href="#kth-largest-number" class="headerlink" title="kth largest number"></a>kth largest number</h3><p>第k大的数，代码如下</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kthLargestElement</span><span class="hljs-params">(self, k, A)</span>:</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> A <span class="hljs-keyword">or</span> k &lt; <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> k &gt; len(A):        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>    <span class="hljs-keyword">return</span> self.partition(A, <span class="hljs-number">0</span>, len(A) - <span class="hljs-number">1</span>, len(A) - k)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(self, nums, start, end, k)</span>:</span>    <span class="hljs-string">"""</span><span class="hljs-string">       Since it starts with start &lt;= k &lt;= end, it's guaranteed start &lt;= k &lt;= end</span><span class="hljs-string">    """</span>    <span class="hljs-keyword">if</span> start == end:        <span class="hljs-keyword">return</span> nums[k]    left, right = start, end    pivot = nums[random.randint(start, end)]    <span class="hljs-keyword">while</span> left &lt;= right:        <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[left] &lt; pivot:            left += <span class="hljs-number">1</span>        <span class="hljs-keyword">while</span> left &lt;= right <span class="hljs-keyword">and</span> nums[right] &gt; pivot:            right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> left &lt;= right:            nums[left], nums[right] = nums[right], nums[left]            left, right = left + <span class="hljs-number">1</span>, right - <span class="hljs-number">1</span>                <span class="hljs-keyword">if</span> k &lt;= right:        <span class="hljs-keyword">return</span> self.partition(nums, start, right, k)    <span class="hljs-keyword">if</span> k &gt;= left:        <span class="hljs-keyword">return</span> self.partition(nums, left, end, k)    <span class="hljs-keyword">return</span> nums[k]</code></pre><ol><li><p>the kth largest number problem, 递归出口 “start == end” at the beginning, why?</p><p>因为quickSelect, 出现right &lt; start的时候，一定是nums[start]=pivot, 这样退出的时候满足：</p><p>right = start - 1</p><p>end  = start +1</p><p>nums[start] = pivot</p><p>这样根据我们的判定条件:</p><ul><li>如果k在[start+1, end]之内的函数，一定满足start&lt;=end的关系。</li><li>如果k = start, 则直接最后一个else退出，不会走start&gt;end的递归函数。</li></ul></li></ol><h3 id="Medium-of-two-sorted-arrays"><a href="#Medium-of-two-sorted-arrays" class="headerlink" title="Medium of two sorted arrays"></a>Medium of two sorted arrays</h3><h2 id="Three-Color-Sort"><a href="#Three-Color-Sort" class="headerlink" title="Three Color Sort"></a>Three Color Sort</h2><p>三色排序：</p><ul><li>两次partition完成</li><li>标准三色排序代码完成</li></ul><p>下面是标准三色排序代码</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_3_color_sort</span><span class="hljs-params">(A, pivot)</span>:</span>    cur, left, right = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, len(A)<span class="hljs-number">-1</span>    <span class="hljs-keyword">while</span> cur &lt;= right:        <span class="hljs-keyword">if</span> nums[cur] &lt; pivot:            nums[left], nums[cur] = nums[cur], nums[left]            cur += <span class="hljs-number">1</span>            left += <span class="hljs-number">1</span>        <span class="hljs-keyword">elif</span> nums[cur] &gt; pivot:            nums[right], nums[cur] = nums[cur], nums[right]        right -= <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            cur += <span class="hljs-number">1</span></code></pre><h3 id="Important-observations-2"><a href="#Important-observations-2" class="headerlink" title="Important observations"></a>Important observations</h3><ol><li><p>left维护&gt;pivot, right维护&lt;pivot, cur遇到等于pivot跳过</p></li><li><p>为什么right交换后，只用right–而不能cur++?</p><p>因为，和right交换后的数据可能还是1，所以cur不能动，还需要和left再交换，而left并不会出现这样一个问题。</p></li><li><p>为什么最后是cur&lt;=right退出循环？</p><p>因为，cur=right的时候，还可能需要再次和left交换。</p></li><li><p>三色排序reverse的话，只用对调第一个if condition和第二个elif的大于和小于符号。</p></li></ol><h2 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h2><p>Then, we take a look at the mergeSort.</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(nums, start, end, temp)</span>:</span>&#123;    <span class="hljs-keyword">if</span> start &gt;= end:        <span class="hljs-keyword">return</span>        mid = (start + end) // <span class="hljs-number">2</span>    mergeSort(nums, start, mid, temp)    mergeSort(nums, mid + <span class="hljs-number">1</span>, end, temp)    mergeArray(nums, start, mid, end, temp)   &#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeArray</span><span class="hljs-params">(nums, start, mid, end, tmp)</span>:</span>&#123;    i = start     j = mid + <span class="hljs-number">1</span>    index = start    <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">and</span> j &lt;= end:        <span class="hljs-keyword">if</span> nums[i] &lt;= num[j]:            temp[index] = num[i]            index += <span class="hljs-number">1</span>            i += <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            temp[index] = num[j]            index += <span class="hljs-number">1</span>            j += <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> i &lt;= mid:        temp[index] = num[i]        index += <span class="hljs-number">1</span>        i += <span class="hljs-number">1</span>    <span class="hljs-keyword">while</span> j &lt;= end:        temp[index] = num[j]        index += j        j += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(start, end + <span class="hljs-number">1</span>):        nums[k] = temp[k]&#125;</code></pre><p>MergeSort使用临时temp数组在初始化的时候，比在mergeArray里每次申请一个临时数组节约空间。</p><p>MergeSort包含了一个很重要的思想：</p><ul><li><strong>分治</strong></li></ul><p>所以在解决问题的时候可以利用分治去思考如何拆分问题形成左右子问题。</p><h3 id="Important-observations-3"><a href="#Important-observations-3" class="headerlink" title="Important observations"></a>Important observations</h3><ol><li><p>为什么采用[start, mid]以及[mid+1, end]两段分开的递归出口时start&gt;=end？</p><p>因为，当最后只剩下，[start, end] = [0,1]的时候，mid为0，这样再次调用mergeSort(0,0)和mergeSort(1,1)才会直接退出，从而不陷入递归无法退出。</p><p>所以，如果第二段调用的时mergeSort(nums, mid, end, temp)那么对应mergeSort(0,1)就完了，陷入递归栈溢出。</p></li></ol><p>小结一下：</p><ol><li>QuickSort是top-down approach而mergeSort是bottom-up approach. </li><li>MergeSort稳定排序. QuickSort非稳定排序。</li></ol><h2 id="Counting-Sort"><a href="#Counting-Sort" class="headerlink" title="Counting Sort"></a>Counting Sort</h2><p>下面是代码</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countingSort</span><span class="hljs-params">(A)</span>:</span>    lo, hi = min(A), max(A)    buckets = [<span class="hljs-number">0</span>]*(hi-lo+<span class="hljs-number">1</span>)    offset = lo    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> A:        buckets[e-offset] += <span class="hljs-number">1</span>    i, res = <span class="hljs-number">0</span>, [<span class="hljs-number">0</span>]*len(A)    <span class="hljs-keyword">for</span> val, cnt <span class="hljs-keyword">in</span> enumerate(buckets):        <span class="hljs-keyword">if</span> cnt &gt; <span class="hljs-number">0</span>:        res[i:i+cnt] = [val+offset]*cnt        i += cnt    <span class="hljs-keyword">return</span> res</code></pre><p>在给定范围的数据排序可以用，时间复杂度O(n+c)，这里c是整数范围。</p><h2 id="Bucket-Sort"><a href="#Bucket-Sort" class="headerlink" title="Bucket Sort"></a>Bucket Sort</h2><p>下面代码是leetcode 164</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bucketSort</span><span class="hljs-params">(A)</span>:</span>        lo, hi = min(A), max(A)    buk_len = max(<span class="hljs-number">1</span>, (hi-lo)//(len(A)<span class="hljs-number">-1</span>))    buckets_size = (hi-lo)//buk_len + <span class="hljs-number">1</span>    buckets = [[<span class="hljs-number">0</span>, sys.maxsize, -sys.maxsize] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(buckets_size)]     <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> A:        idx = (e-lo)//buk_len         buckets[idx][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>        buckets[idx][<span class="hljs-number">1</span>] = min(buckets[idx][<span class="hljs-number">1</span>], e)        buckets[idx][<span class="hljs-number">2</span>] = max(buckets[idx][<span class="hljs-number">2</span>], e)            max_gap, pre_max = <span class="hljs-number">0</span>, lo    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(buckets)):        <span class="hljs-keyword">if</span> buckets[i]:            max_gap = max(max_gap, buckets[i][<span class="hljs-number">1</span>] - pre_max)            pre_max = buckets[i][<span class="hljs-number">2</span>]     <span class="hljs-keyword">return</span> max_gap</code></pre><p>使用了bucketSort和鸽巢原理，</p><ol><li><p>为什么buk_len是max(1, (hi-lo)//(len(A)-1))？</p><p>因为，要求最大的gap，使用bucketSort最大gap要么出现在bucket内部，要么出现在buckets之间。最大gap出现在内部不方便求(需要内部排序)，于是我们调整buk_len使得最大gap出现在buckets之间。</p><p>于是，我们将<strong>len(A)-2</strong>个数(除去max, min)放在至少<strong>len(A)-1</strong>个buckets内，根据鸽巢原理，必然由一个bucket是空的，这一确保max_gap出现在buckets之间。也就是满足ceiling((hi-lo)//(len(A)-1)))，因为是至少，所以我们取整数也不影响。</p><p>使用max(1, (hi-lo)//(len(A)-1))时为了因为至少为1变成countingSort.</p></li><li><p>why计算buckets_size = (hi-lo)//buk_len + 1？</p><p>因为要考虑max所在的bucket。</p></li><li></li></ol><p>例子1如下:</p><pre><code class="hljs python"><span class="hljs-comment"># min, max = 0, 9, buk_len = 3, A = [0, 1, 8, 9]</span>    <span class="hljs-number">0</span>            <span class="hljs-number">1</span>            <span class="hljs-number">2</span>            <span class="hljs-number">3</span>(extra) -------      -------      -------      -------     |       |    |       |    |       |    |       |  |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span> |    |       |    |   <span class="hljs-number">8</span>   |    |   <span class="hljs-number">9</span>   |   |       |    |       |    |       |    |       |    -------      -------      -------      -------     [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)      [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)        [<span class="hljs-number">6</span>, <span class="hljs-number">9</span>)       [<span class="hljs-number">9</span>, <span class="hljs-number">12</span>)</code></pre><p>例子2如下:</p><pre><code class="hljs python"><span class="hljs-comment"># min, max = 0, 8, buk_len = 2,  A = [0, 1, 3, 8]</span>    <span class="hljs-number">0</span>            <span class="hljs-number">1</span>            <span class="hljs-number">2</span>            <span class="hljs-number">3</span>(extra)     <span class="hljs-number">4</span>(extra) -------      -------      -------      -------      -------     |       |    |       |    |       |    |       |    |       |  |  <span class="hljs-number">0</span>  <span class="hljs-number">1</span> |    |   <span class="hljs-number">3</span>   |    |       |    |       |    |   <span class="hljs-number">8</span>   |   |       |    |       |    |       |    |       |    |       |    -------      -------      -------      -------      -------     [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)      [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)        [<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)       [<span class="hljs-number">6</span>, <span class="hljs-number">8</span>)       [<span class="hljs-number">8</span>, <span class="hljs-number">10</span>)</code></pre><h2 id="Radix-Sort"><a href="#Radix-Sort" class="headerlink" title="Radix Sort"></a>Radix Sort</h2><p>下面是代码</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(A)</span>:</span>        exp = <span class="hljs-number">1</span>    hi = max(A)    <span class="hljs-keyword">while</span> hi // exp &gt; <span class="hljs-number">0</span>:        buckets = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)]        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> A:              buckets[(e//exp)%<span class="hljs-number">10</span>].append(e)        A = [e <span class="hljs-keyword">for</span> buk <span class="hljs-keyword">in</span> buckets <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> buk]        exp *= <span class="hljs-number">10</span>             <span class="hljs-keyword">return</span> A</code></pre><p>例子：</p><pre><code class="hljs python"><span class="hljs-comment">#  21 22 11 12</span><span class="hljs-comment">#1:21 11 22 12</span><span class="hljs-comment">#2:11 12 21 22</span></code></pre><p>另一种实现：</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(A)</span>:</span>        exp, hi = <span class="hljs-number">1</span>, max(A)    <span class="hljs-keyword">while</span> hi // exp &gt; <span class="hljs-number">0</span>:        buckets = [<span class="hljs-number">0</span>] * <span class="hljs-number">10</span>        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> A:            buckets[e//exp%<span class="hljs-number">10</span>] += <span class="hljs-number">1</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(buckets)):            buckets[i] = buckets[i<span class="hljs-number">-1</span>]        temp = [<span class="hljs-number">0</span>]*len(A)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):            buckets[A[i]//exp%<span class="hljs-number">10</span>] -= <span class="hljs-number">1</span>            temp[buckets[A[i]//exp%<span class="hljs-number">10</span>]] = A[i]        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(A)):            A[i] = temp[i]        exp *= <span class="hljs-number">10</span>    <span class="hljs-keyword">return</span> A</code></pre><p>如果第三个for loop不倒叙的话，例子：</p><pre><code class="hljs python"><span class="hljs-comment">#  21 22 11 12</span><span class="hljs-comment">#1:11 21 12 22</span><span class="hljs-comment">#2:12 11 22 21</span></code></pre><p>是乱序的，因为我们是按照count倒数赋值，所以count–，必须降序赋值。</p><p>复杂度为O(n+c)，c是bit位数</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>new chapter</title>
    <link href="/2020/04/04/new-chapter/"/>
    <url>/2020/04/04/new-chapter/</url>
    
    <content type="html"><![CDATA[<p>what is it?</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Add new post</title>
    <link href="/2020/04/04/hello-world/"/>
    <url>/2020/04/04/hello-world/</url>
    
    <content type="html"><![CDATA[<Contents><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>too young naive</title>
    <link href="/2020/04/04/Too-Young/"/>
    <url>/2020/04/04/Too-Young/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="b28c5ceedcf65c5b981cc74adbb64a5730af1e1a466091095e556dad134e1238">edf05eb56663bdf657fd8164c8736bcb40793aab37e11993acf6cdf3e829da41460f81276bd1bfac9cef8c686115b3560b2e6851568e9f627c8e9fd3206c6da363d57c6633a6b3751bf6dd0bfc7d548922dd6aaf41d9c5270d6727e2020298ff37b7a5beb22fbfdda989cbfb84b165926b5e00b1b1cb0bd6e236cc36cee3324441bcd8ca6ab6c03d1ffea3efe8a7037fb76b02d7ff7802ae06ea387923c8bea952dfde94a284f724817349bafbf10fd75c54184b7ba6068ef393cfd89f1498ed60cf4255db30a1759c93c6eb281d973a2cfe94e02a3850ff3f779a6170f8c705ef2b0fc5f17f09acd64c9418a3b64e5cde657700b690577ec029bb0d1b840214ffce9232b03fb5da0ca8be4735918013f93cfcbd26803483f2bc81c15fab8b4efb104a5489d4c00f2778450975a526a22ea9caaac328c559e26359e1907f16f68b19938ec80ec1d9bcceae134779ffa4c7c72e284eadbc4a47ff3cdb4ab1a49d47c1d4227d254a28fbe39e36bcdc33c6ac8fbb7ceeb59478164ac19805beb174c818a04104ae0d7437eb2f3aa7ded67cfe96936053e2d4fb56630e087ac67e9b8b2f88e6f9b605cb44f83c1f16240fa5c42c34321766e98855fc3e3469406b8828f7322abeb545bc5b470cd7cde4b7b1a5c06a0ebf03549cc3b2ca924702f9d44fc4b9986fe40fe3bf3213945222017bb392258252b88454820f028a45425b9b6b6412a34f4abc6451af3494611631e972dc5376191fe0966621107247f53a6b32eb18f1ea5b082e8728541f0301ac3bc771d71673f726afa92853d3eb6045ba32596e9779ab17e433b9d5fe847c8088e7f8609eca42c31e0548328d63052d5c7992f79024817200fbb2886883fd6537f82e87f4e2d6b4bacb2c50d36c76939533377ccea29b80634af49426fd8f1a9b5cb0bdc3441e96c8b92f6eebb289d611bb1e3f45aefbf2ce6d348c6cfdb4e9b61232f8203bdb4f29e74325e61036ab4fe147c1d290bfe3b8ef659a439204981ac7f2bf4daf0fe268629593316f4f6d9034b54da6388a17a83a801629e6b99c90c83886fb2016432f3356b1ec7d7a9f742ad1f94d8b0b3a55a14082c21ebb8c1acb6fba92c028c9913205778618370659194dfe06f50cdfbc2c4ce368ad967c0a5d071e87fa32a910cbf119004bfb165647e1295595c3160d43cd5255e3810c234a7a2a49433328e4dca514fa29b2ab899de699d8fabf784240d2cc7a17341b85204833f1b49e53ac3554990eff79e1b778a083320589613036059dff690c2a0ef7e650f61e3fe18dce5969d8f4ca277372ff0bba0422bc72a9bd1557ec7e637f36468bb1cf40cb407f6fcfd5f32a40ad48fb94b5e175d8317ffa4e61c3551f00ed33ecf66270459299aff914e2a0de2175d9ccfed78c880b0363fb4b4d2f441e531d8a532d6bddc8c4795affb0bd2c13763060ea25808e3e0ad2d905e095e51aac36e42cf23b58496f5c382f589de4613c7695acc3dfbfc6f7856002649db310f33c190f0e7ee5143fc1ac7f965dc5a220613823e277d9aca21d9dbae7cd55f86db218e152412f3295126701d35b8e0a75f35a388c5b609d3cc36fe9840a29b8076b229a8cbe2da9065ff4989acfe163cd4f38fc1b8e22e03019891dc1a6d3a2ad0f61f98ccdbe2538bf8cbec571e10960d2e998282d8ec831bb643dd09652209ed639335591f086d055d574079e5535ae5ffbf47065af37bd209111711f03cad644c0ea6efbaa7cb27f8474939f956de0977f639ac00d8f75b04f10e585ac7a50ea447ed8ce2296d670e7581f2dfe2ca504f380b02e939ecff1d388d7b883d90da04d60f508376e7feeb2b613e032c9fb659a138bd46f7b3e3b0f43cd23b8498be82db2409d275e22bb04420c629d17582b931934e408fd0cef6f5408a4d52377c31b4aa051ee5ad65e13e26aaf7412bbfed34d71cbc1bf9445be52f5f8df978efba1aac0a33dcd1d2230172f4aa0b5c452368a8e5bed7dcd5f5f95e33b27533418411c642787233e8952d207e26fe737b25f1459e10b3063dc3c7a4482390029bb500ed6988cbf297896394473cece1b65f6a9e7e3553c8efbf12c5d4854d9afeefcfb31f68a22987db1ce0e2296260931f957f50772e0adc9e7b2158d0288c66594fe6ce700c597d7c6f648a7abf07ba943f994d5ad8811ced4e79bf5f0ce6b164e3aa4b12a933130f9cf52350456bc8a73eddc9d3f87cf13576b5bb69120fca011b24382a88594f12385037472d49d861ddbfc841b535978860f2d1aeea45cce7d601be8ed78ed67e09c9a76b300d53d42594e613858b1d4c9c492fb0979cd585656d75ec588d00d4def435d4b4e3043c09d2aa9afadb32534157d2f18c490425da186c1ac7e0ca4d5064baaaff7e099acb688f752c49fd465915e06d2c7ee9080fdf9698ff8cadb8e123e656be8c577dde8c014d9b167e55b886b42c4bb1a11d17c6fcd896c3d0fefac267809ecc5f16319067ca1c75e99e1d678d42aae223a6b2d68cf987bbe358b411ba4415f4d5c97e64293c8e0165dd2943471d7a60e2d16a171bb2e18f5cde021fac797aa626aadbae07c195162fd2a5875006ad59aac8e5952d0db5f2025632aeb991ab2446013cde6a2c001be3f2d022620b2e782ddbecc5b4a9115def5fcffbb168b202b299cc542583a46ca2d586c09f4901b456dc8e1fcfec5549af6299f7d4ec314f84e311738f10ea2d31f22ddf4073d566f3f2e15d5d899cc38dc89e4733f310e8fc879d12c0d4072d160ffaea970c7ca379f6ddd02dfae75b512b574b9b1a3545feadcadcc05ac010a4c1496685f600f4634b52397a73249c6b0ccd05d560cea472174b5efd3923bda3a1c0a7f806fb042d4304733cdf08dc6855883aa656a2ea825f9777239029fb3a49c09d4ad08cb71b3d67a8da75bd5e0681948e27c1a77460dd3706ea2cb9f42be8537b4f910b9fe1ab2af531d79863f79f279529de4b1b246e607372b84c5cd059ffc31c7f323beeb13df0d8e1b760a5fe6523b6f6478cac8b67bb8e382ac42a2c5d9760d63d49d7b33ae2b51f013ea4fd2a47abb5bdecfd1d6cf0a78da2ec95db6aa07412920623b6f5ed2fca3ddd53fb7c9f5cb5d17e1a5b9e8c4eae578eb51452a5f3efe36ad5002aeacfd62a0689bb3f4b366478fb480fdff578b92a5b6cd149c943ca8031515dd12fa3aacd1ca5503026652c76b84aa49e48e9ba6eba9b9d2dd5196cdb0d5e0acb2900269c1870697aebabfd679eb1ae4dbd34f458b178b33730ec14a056264a4dff3da4054e3b886770540ff7fa9a6964f58aa4b569af8411beeb2273a6ccf16cd7044fc7827741478861b7191daea886a6048514cf23d1da4277e8f516a25e2100b53d0e9575a100de7a65ededb96f0e7d141c2f4d6d00b67813d15df9f7321a9ee9ca48554930b34256bbd5848306d13616555587db6eb1155e4e6e70a0fbdce30219525ae28b215a1cde355cf2d41055f3e453be829f58b4fd176cce5b8ebbcaaea96eb6e28c5e297742dc5a2b96fa44280e51c967eeb3f51346993f08388a5ae462bebf748ed8e5a58640edfe8e76d95f7dcfd28e89b4ea30aa6357d5da0af1b8754f3654e74186f13c35b5010e00a80b887160cd3e2f389ec3d770ce1b873d1e57d63f5aa223b0fdc0c141a680b0221acff02c19270a08f73f63c1264e8b8edb475ec002f67ea0aa181625751aa93aa468189ecc4bd4fe1b4cdce47df1b1dfcbb99ae2f0a47f017411547019312f185c2926e4b0c8c9088e83bc155e03d0ec1f8a4ffe75d571acda70f649916732fee4ca76cda6e6245642f440fa02854b631fef773356e80d1d12f24360e3a33c9d7ed8a6009352e16859f2be341d6e43f624b55ada2c5760ace351629179df44eef43abe910bb3e7cc1d71d60bc3e9956e39417588ad52ca81672d09223e9a4a9f9c1d3aa1c0a18fbd669ac9d09b21369b966e9eaa653099dbbf3888e431080ae557ec43c4c9f85367507721bcf720f9d331a8b8a387b705673013bb6640fe739c836d84d0445984e6df2d2632ffe1d2bc498659782528d787c6bf28c993182120eedb39d6dc762352ccaf65b132bec1c59aa1295d95a50fcf2fb97afdc9d8b85534a8733e735ab232c361eb1a4bbc7da48a6918d720c9965b9422203a64d17d5100b835c879fc6d6dc519bcb44b43d2af4357bb4e4b7769f2b91658c84898f44a0a0c5cb8176613740e993b220ce3a75ec68a813148f9087e6bc3f0f9c170c57689ce0bc67cad680ad91eb8e8c7e9fa5b855f5d8491f883b749a7d201e84e56714705d9797e6c61371bdc57fa4e5467af94346dd139af84703a84866b2e2ceda2a83b3dc7d425252678b95ee95f5d7dbc75e9bd2977b6209c005da820d2de452af12c5208c1897293af3501f9275ed659d14db75061114e795badd40153cd7ceefb15531fb7c2c3443144194548bc270d4951c8348d34c9be66a8ab43f48f79033e26eddf9ebce01989a5280945de39fd3fbe95b11d836097c9a1f8024f56088d3a93e6a56a7125d3c4c0914c4d4ba92e0bc97569ea141039a37c969b91c28a452fc83b96a8d5799f0df08868a4327cafbc98a9aeda7e6abed3b0d160e12fb161fddd5675b2a8ec5bbced19b3958ed499b7e9c66a8596c6f01c91eb02942261afb01658b34bb4ee0cf9a39473ccae34748c694b150a4d829a50deef3388c76527d7d6d577973e171575567844d6dd9377eea45e3ebe5a4d9d7bc807fde86febe17003dd8eba1ab98bc123ea258b8a7dc9dd496e4bd66c7d3951ec2d3ed9812fc30f5e94e84b66ec83120525e0118f4f569877d022e4132010f3e17be25ea8d50f1cd4db2f69fc47eec1a771fe1a25c7abc1f8a1bb204316306330046a26086b2becf5937899b263f3bac846e815a3d53be1d0b0d7b6d9910fb9ad4fa2c4da9770d68b343a718b70a8a96673f468a01c9a1a0160f9e043104bfac9446df47009e90d93a7642ba78c0c47e004d579806934ac288bc55d02c6bc110b85fa147ad586dd524cce8812d1c340335beef773e9c08f1e4bf5589f269058269f8803b92b907d4fde4d270d71efceec9ff91e354ef06083656f7ed5256d094c31a68ce523078efef06f3f2c889196f859f8196e456b461d5106bf97d97c298397aa818c8142d27086d548d8ac3135d681ea04e3b28d875713c11581b5c8df2e68a17b99f763975b7234bb7cd4dbb9aadcf3915a2a3ba03d76a30becbb780bb0ce9d13873a6b278fd614654e6cb3c980cd1816d677a2577b109e509818c83b7f51d026f64539a75be59481b03e44abfe6770f608b0d72f74165d8961b4ad99d0ce32a8120ad2a1b041f0f9155f0130477fe732963a5325e8ba76372eab0db72d80908a56180b5802abe769ceabd1ed6efe2779638a3cf130ac060b45b062e902cccff81f684d0ad8409029c170d093fcd45610a24cb0832dd5313ce86a9fe86b77b134fbfb7e855f4fa667c3f58c251723ef55ec2151c21286db15370260f1409955cfcd0ecb0fdb8f77f813b2199c41c311f4c7a5541240e665db770dfe1747575c31698b74b7073d9215b63facebbf91fb2e32326961bd13b853622821738e73e2880d3fde3d9b12482cb05f5c72ad87a99a8a48fb87149be1c0d6b15220f1eaa92e5fc22a295ac57136509336b1de2189beaaea3410081a4f66c04aad672ab20863cce33ca8f5c6f7ba9c9e3a106219953295c9b08c899f0e3ae6717ffb4a7f3b318e33acf96bf3ccf635c9550a2e266c9c2275deb99ffbe3a9d11a72284abb28c86dc8e06f00f565eb6b452df8e0f18505caad35b3a8aeec889ffd9caca10ce6bc73b82089b69035d69aa52a7a78d9ff46cdd4c4b299ccbb5fdd8ec1d64bb3567ca9bea9fcd61edfece7faffc7b94c8c7f1a5cb30d4c960b868c15443c87ba157f48d7d025256d62b3c7c79881a6ac15f000e90083846cc586b549123ca1c1b0d4dc3aaf06969ec41a7cf2be471900da6152eb7992f2436af5b2154e624e6c78e1b48c459ecbc3c102d274f0df5d7e89efc1fd68c5c84d89d1645828291f3a1cd257b20fe174c4940a38cb70ec06d6fb1300a0512a932b253b50c8aac63cd83c9525fa193905f2f14e51fed743f4f2ab395465773474b2f17218556d454fb6e9a9dbac02beb75c0a2d840db67fdb0ef2060a37825d83a738dae162fb73cf71f224bf78367254dc3d5d3c5c5fdb9388143aa6e318906923dbc4a55b99646ec91864ec335a52b925465ab0f8a05635341b9263ffae6124728c1d7e9a72fcf837ab61675de81cb55f947146d9f5ca8abe1029d2691bcb8d65bfc99c7db5d3cf33826e744575a04cb107428fbaaa71dfdba56c1a5abba30cbde9f9ae1dce5211dd368e5fc6980158f7917b9c9752235bd522362f18332c2fd82cf197c0644e80ae7ec1ff0a27f0c68538ac7faa6d00f9d54c9490581e66a7a02e869331f9f3f0c7c9a81ceaa551bfed3b8228ea99c2775d39821aa0e8861f71db12d8d26fe00d36bceebebee667486f6f2a9ca0392b7a98e85ad7a036ad864c9de0823fded78bd1cfacc25491ed17a86db4203348e6f20f6064ffd79165d3ee9776d06fbcb42a8e3dc29e3a905ec88572c6cf80f1f87f4a97b612c02a844300e766907a4cb5bd74658457fb3e6a02d936dfbcd955a6032a22b08c1f4810ca689a44a6efad73e9d817296daf82054d6b3ae3ca0c710bb49c24936a52c94d1f58e9aced78afba102208003b9d18b1185b832aae6991c22a98061b33903ae678934ec3fec646201c9ff6cf17ea3dcf4c7e50230227ac6a7e8bae876229b3d16a37389b802da2ae45f0ec96a63348230f0c8ad46585a6ab1ce4e8620637041b12ddeea02709a5cde9d35538d372ff4d76a559a12000e0eff196021bc15abf51f9ab5f09a9f257aa4ad26143662f4404323ca9a0b1eb8332d700e9c2b698c096d4f9f374d3d8daa90feefc2c84c0b1e5eefd46e783f99ce7e99f99a4f3f545160af8e453285e14ef49120b21821f09b1b5015ec38a3f432d6c43f36821ce9ff18fb444cd078d1b5757e7cd012130650da10d012b0652c79f0bb050d94ae7671292a71ea95c9d060c1361bfdc929bae5fd0a937351914c7660823cb954702589b9f00cc012af781ffb32bf39071d8fed464c356ed4ba678b60ac851e6cea728ce79e7a6bab0a9257c502d8de4c15fa90bc68bf09816ec7c23ab2da2c0078922dd684b8db6b9d1ad44b86ce9bebcaf9de3e037b876a24023cbfd8c52b3e992568109ccf60feb6a301b14e9b917ea1bfc444a2d847e200e9d80380134eff5a3369b27241972e50b9b647264e49a964e50027d1f0cbb818361898b1066258eea6482db0e1cf391cb55ed67b2889aa4914a13ac0cdd1a917ac1a456b3b454e6df84997c9d872601a36283c2a761c67ca1166ad9fa9e5f1746440d7c3a751a13bff55458f684b94557542790698c5056c0796029bd9655b427366942727e01dfadfce26deebc9985f4f2b8690961faced96a73169060bb3cf6f2597cb2b624276d0e13d1baa898e99afd89543b98cf26832a45c01526223ba949739e87c5a697e9fb5fa1668663844767959202abc63795361c0983e125ed071c89212bc75b5ef3a9b6374b0476fbdd6ba0a923f883939157405629f60fc5c7a469595c1629d73993dc08f18d4977574a5c8c199a36d3c300615bfabdafd8b9316e459adf175fd0e8f583e6869d1597911cf2c9a9eb10173bb93f63da8dfa943dff20fab91c2b5fd7ec8cff23d47f69fd92258f7a7bcae5b988ada33ddf82c9d468fb011b1d11c35f55d8650fd26268c3ef5a416c7806dd67add502697f6d8671edc128394062bbe5a5fdc407735d750d5825cf618e2e833a4a921fcf7aaa429dfcbf977618acd793c95210802dac543fc1ad843fb9df0a6d27acfadc6308f0a0796c142ac28116becc7ace3cd1e7a500f9e9d3c6b6ca36cb977a6da1122523687d9a7d139fdaab2649de3b1efc66fb4c9836171c8084b77ec97c41898d7b24c4be494d268f9d4c56f5bd75a1fec6da5fa90abbe7dbe36aa769a98ed55a328d3034b287c5865557288c5c8379ebc5d0698489956f475ed7907423b2c1eabbaf37af30d9ad579cae58b59f1b8c1ea4368c79eef109ae7260a7deac729261ebb456b6934b473d650a1c261d71b02b4a4c2aff7570153f02f2861f7b6f4e53fa97d5457d1cefd7c918a4ccc7180dc40b3e8874f2d296ff86f3a24e5c5aa3d50c3b194d0622fb38c8a8ef5210f2a6eb33bfd97ecd301b7c059a18b2d1841a0f3fa68e7fe393474df4bc5efc90edfb60216a06e9066a7bc35aa2ad71d366f738f8eb4b18ab9ecf6b48c93193579b8a661a7d5ea3f5560237e4f612430e285d6996ef6967fe97643442f779a8e27ce45dbecf1ac9845fcb79d4b53b0958616bbd76848c7958b91c8249b24d9ceea76cdf8fd9738fca47ffe26e852401de5e924f60559238a21100902de2f3c49c58788ea6ba67881f60344e60658d1133d3f56816da9737cce1de79a216c65ad7ec69612d64c6c1b0666869fbc24e3934772ef62aacd5cae751885e97b8c536a0ba953cc7d050ef8fa276c779f958fa73594e92be1e3af872188f4f1a565819b548dd702527f45701d3aec89e827637fc49467529c8b29cea1bea6a2ea10d77d57781cacd0afe510bb63650d5fcb3e34882040a3f7e6a26cf4b342fe0c65cd01c1134ca97adb35fe20a1addaa4304189b69d85172491bf185127531fec15b6092665d1cc62c36110981801967caddd1d2ab87d833fe8bf8f3bdc216ebcc9d563836b76e50192d809bf721a40311fc56dd22e4821fd82d22ae6883d17ec5009a2b34da0210c71e59e70aa1f97d0eafbea45388cff7729bbf1e17a774f334c7466e1d660b1488545af6be70bd38b1ca5de77130e74f52a72a28bfd9292ac319aa3fd6a4aa70aea6aa6c17df294445c690b8e650d6cd7f89654dbaa62edb79fc24bab48fdd0d542ddc6e87551da1d74039db20f6f23e09906f878af299e411a2b021468c4157fff24c68869b78b4377d2281a8b893346b7d0186daccad26334665ffb10972deb57494dec1abdc1f95d36caa6bdcf90784c3ee0b7ae888c696291d5d23de84c8d62eb94d5e130f4a433a92a5a884d4fe267e154060d835aa1185c8dbcf86111d8884650aeed6e2cb52f3f4da77f4bdff5496d674e81c446ce28cd58820cf916462d0739cd097047025c9cbfd335b051aeaf355e942406acee45b78f325df6b80c553de2ee7bba631de1cf23fde63cbc9a95464e0c2f5765e9a3f6f52275b5ca99832276257cfc461b49c19103525b354adf8c772660c3adf664b1d8f57a56ca9960da0e37f751a45d770cc6ccbdb02f178b34e85d84c656bd321c4187620525df863c6edd280ffa8566f45fe4e9868c2f55aaa9dfad46e2e39eb63006e92e3a980bb8f16260952b7169d230b5f3b1497a2a476cb2153d774268b4fd2cdc79d6ecafc1dc5786b6d5c86066d32375be55b275f55443d5a2d2bda79116a833670d01734610fc9d2df0de775e1816d6b76aec624426aa735c9ee341570c782d5e9e3956667b67b7f41468a718466ccd134cfbd8992f4cbddc3c03a7efb9f2c1039e6665073446222076ac65d0246470b445c3153b4c093ff8ba735f70c2d040e6edacbb4c6e14e45032db848ba45de722bc31c6ce901851696991aee25bd6079f885f2a57de91ebcdd9b266209f586eb5008646eed33474376af6e3f16599c98c8f2491be4301d51a33c73be44fa1fe66ab0ebfba34be39aefce6a95762481a1ae96a6bb79fcb7d22042a5cdb17f39eaa1e29260ec4f84de219d3be8dc078a1daea536d486a0b4e20024751deb0793e94817a3ad1434913017394413043992f1b8d704cae2f1b0627274d5ac8c9db09c63acfb7eddfc12f1598ebc3054760e11fc90a7e6099d6f0916a4a0ba415f6b092594dd1440434fea73a1891f6b91b027a04262e7b2577b0ec4bfb9b36c459ff7d2361583e203c8cb555d47dd79a99eaea06afb1c16bfb12107647418ee9ef475f195169e2dc6104a63c8f2a2f8567fdb855bd7298658b2bac29a4222113c195cdb7102ee4c5909d0cba38f8dd59160ddd1298cefc6525bb834d5cd2d7bbf443b59b94fb479425ca42a4f3e5316cf3068eb21c5dd1ae2a69b3241cb25ac76322fa5d9db79b8fbb2d86751658fc6fe8c0d70a009c2c4872238b69fcfa1706b805418baf44b136efe4a5427d2cda6248f2d1db4458f9add8ef6463c460039781a98d2dab6929b785fafea71a3b1fb94450526d2e80acb721eebcbdef4be47052ee09ab92f517b5b99713885ddccc99603fd066ded848a2a5ba37e1ac101d86f73494d626d71891fac18269d4257c25d6cc984fa2cbb456c42ea24772453d0aed43ad0ad948b4c44a0013ad0418f5dfa726be7689a557b76e50659673b8d98d51dd4f2bd439f83244c1de67b7cd8338320014b88d3f87520b15a3b1097785f205bcc7855bea61f8b6154091d6873217fd71ea02f38bfe25ca19aeb6831e261ead274c4787adf5c0b2bd166a4f2ae5bff198a7058c7fb0b7b131d03c0e3b1b35a6cbea0b898c7be6ec855e1e8f8c8bdffd2f4a99d4954a92a4c40ac6908a9618f1c3df3836eecf6eaf0dbf8e3d6d0c3f2d2ccae9994b6a2039d0bd26aa29a5b728161dbf9f6e304b94a59d03b6ca624ea1569f97863727203945cbb53bf1e0a3ddc54cfa40797c8609dd651dffc05f4fdcef11cd974345f7906c99688abbd0ffc8469151b4aaf67b86b63b10bdb491c573a640abcdc7ec2ac8e4118ea7d71823563b18bec31fb765236af326176150bb09003738c745ab0cd3acc29a9970d626b9b1056d75adfa68d2cc7049f9096906c6a78f9fe3aebb7e95a29b8ef18f2d61b2c953c70c2bcd85caa5857077f5055315b33c5003ed043e0f5261acfcd7adc49f7ca583e27695c9a3ad6e693f5826d7d1064b2a32fa965a24dde83bcfac012fcc4ab679914f176d8dab899fa340d297ab4c8cfdb54636702b3c654d4133ddf97a02a7c9ae8752a0b32ad8b62055247dcbb0a7b6f1951e4d9040025db6f935eb926b68892e59c1f5367a6ae0c87c6fde733c3a7b3a28629232ae8064c5872f3a7cfc810153e4eb57b6da910f52092c4b1794c85e0f1cd5771aaf5cc3fc05858111a50aa0af77fda46719cdd469329fa7c3d725c5d12f106220f99e2d6b5637eb028eae0edca4549c196c989435f7d192af6c5498b725da54cb6cf19adea278e757c2d0f5d6e1151481983e17080b58b7d56616015588e52912b2f7f8bd48d087d317a02e6ce9520bb3b804e491cdddfed83fbab30003e07f32c1c273d4a78fc28268e226d537dfb9cb6171ab886a7d012943684d96a7caea3183d4e3b3b6a0c07370928657809cad3863627a4d873ad3e2404f7d776587b5eaf4a2632d4a18158ccfa77f61d84c0138893082c3068bfb6a137184e006c6343048371a6b0c8f1a6cf61acec13472c3ef8963d098818e1e83f6590295a4ef3d073670c4bbb022fb6e30541351b2f36809e18aea0f19dc04ff3a4e846e858fd4e423185807bf818dd921ff246f5c0545795610c64ec146de0e5c9e0d830f527a2b9c6ca0ec78bcc1a26ca612b45caace6591c4853ed1a0dd1bc3e6115b28cbe92e3a0c8a78500438b9cb82d6f8f66922c6a36d38b961d400c8c1c065ae1765f2528764aece1e5be6070e1bdf2e27fffda9bf01a068785ded60240550bf785e5facdf39bdad91e2f11678437bd9baabbbbaf0e84beeca4ab8914d3f0c1cf0ed687450984641e0e84e7b97a98adb86fd325c7902a2cd7481b34e4b7d4e0621d4bb465502ee3acb8d8d958bc2ea0163ad57b3b146c65d550385357704ca34b55279c014b5b9f13c25f21b4f9787b279b6b495e9f3caf91b0d1c6a79bc6c8a4921c4614a02906077e2652f3d33026593694f4b06a1fccb8a1461799d2e96cda50d566685d39b01483cc453cf4b1b972bd89b4c379e4dd9b938e91a7b9ccd2dd0090a0e2558f38100427ce698899c4e8133824c237fa09784e1431dbb7ce060ae87bde79e43eaa2d904c27e4f41b453489301c2edba57bb3f442cc25d015086fe29541fa5b38dea9991648a3d214d414f604a7fc35393b4ae1badab882da604b91462209d67621129567ac350673ee9faa5a5350a7f99a0757314783eee5a6c220bc9e7e5d4dec2cc9644f463a1eff42d741e0bb297cc9a53306ea84caf6ac5e97c409d3b9108735b9b1f8d65c44b4d658746d3752b6dc3852c1cb5d2949b1313432d6d58d7d55d5ab42fae057b7723721bb30dceb2ef0bd072ae433c0374cc301b532ee85dca59d9ea82a6911d60842fbd31e566924c3bf2c4025807771a4cd3f39cd09f9abf5f67a77fc5c86c32d4325eb411013a11c1dd241d97f1002a1a8e57d40daff7140f6a7f35ba40083d8bc0d103f3cd19149a4d7118bfeab90afbe6d4ff02f66742157d1a8e62870343ca400872e5e65f40da437ea948f64b04a0f3858dbf9d321889e3a8552ca4070349773b17598f24153331f0e6c6ad718bacab4757ddba71818e6915be00d23a731bfdfa07129e2d423405aa4c2dc58fdf8a4f95b464755ded0603a6e59cbfef00ed6e12af13567c75a5306c64c65760b93db29ff5169604389b122c1d42aa206476d91f02348aa79cba31d279ae182f2343d9de66e9d312d24de1f93bb036e272974bfeb4068a9cb420141e1496439768d2fb7e75c87bf86d18747eb787c4bed69c8c9968281602ea3576997f4b4dc4fbc459e87ac1214e9e0febfb5be3b46799722f44a80a90e74ef33cdef60a0eeddac24a87ceb8af13f30c70789ca91521500a68a432c67557da61ef2034aabd5a1ce68f4eee8e4ae9323f1d3bd47e32eafe64c376800c8b98e539c83ce1343b8baf1ed5df980998ebb6109ba03fbd8fa2a799b25c3285360ce0ce72f6d48f16733aab06247f7e48ae186210452d29fae5bf58792b9a7cabdf9a59831d7ebaf971c6ae6fd174b541397575d24fd0dcaf2caa1827d3fab78714ac80f032af1f2021a0c0cb8b57c5046dee99d9c551650dc02940b62b3d00c77d0ebb03ebffd65c32051dadc0e8a754f37b895ba66ca55244919e6739d35625b88932a38eb7d901043a5717b2e78a5130067088a0afc3611161469776109f9e97c11a6d895fe5eb9f1032cd950d4b58990ea8113bd5bc89602eff41920df4138788ec38b253052d812236c1bf52aa9b0a8d84f1b505e0865026f110749fdc830e646147f3694277f3f1302d6200c5da668acb3066c17b6aa0a17bc9cf274920a295653c7961feca335ad9c14e437a38689fd3903dd7c24fc3577d7b74d62bec65ef8f42ffa28a813eabb9f6bde692197847367c28378b0591a7c11db01a708e8bf54dcad62b83c1e774d024935d3161410a8ddc0251a60cea93840dab14960644d4016b500bc2ce6c382964fce2d3d9b15df434983c873dbf2a0986aaede7cf2305697e90e62c64f6b53d2f432559fb1079bbadb3939c9df98288aab730e774d3834e3c3bc73fe22f3a85485eeed465ea085f33c56f8c5a2e6e1b6fade785326ea8783eac06397e9c75e05b646a5c8e1020241bd7e2f6c77d2ddbf3d325c6cfbde8727fd5957b1a5a3727ebd4fd203463ca180beec618cbf8508e982634ab51bcca2eb254abbc3de34ef697cfa9ed7f1bde2c3cfddb6064b4c1cd30ed7bad70cef31917e99831a0cdcaec0c5bc2b525a8f1b98c07e8d33ff3b63760c1bde76cb55da24173bc2b9650f26ee24749835812f7c608dd47810f446d45fb13cdc425d81e1b1f75255ca94307536b1af12953d80b89666d5e1305d465c4bc2dbfb392516f12a3fe3c00402796fc4ab317534684ac272f1dd69c9511a6cde48f650a6312343c78642a1729dd3e0fd5f8e2e4052eb8c05cd95ce24e326ab71483fbed8f3ca1de7651a735553707dd2b38f343175566e3273c1eaf5692b034fa752905d646e0a488e10e8a7f53f5ea4cc3e416cf62fac231ddb8f311cee731b9496358bd24078f5a593880743bd2af616388da32996273859a6903e4f54118aff850b8607ec951d7b08d9fe48a92640307ca0dd55dffbb90e71b9c84ee7655b9667e86905934f49239ae11cde5bd2328ef667900578044fe4e337ea203491aeae10b344614260a39eda9052a2d74ad45fb965fb3b99e650c7109caa4a922b3385121c15cdb190c266d8b2a64ee4590c15ef81ee7d0bef69d95645bbb97b844cdaa41377aaee0743c918c09b8a7cb58899f0750ffeaf455d56462f06a42d5b4cf250ca9ab295e516bf946be1d93e59aa6bda13cca844e136da3d800b9e4bdfac82205718953a157a3ebbf27f91c2aa79e482ebf7f511c6b77aa8451a2be3be4600e7c0384689ec523da0fb503ba6a83415eb1666af03046ce4b4cb9a1c7c17e6163850da13b4abb0d6cfbc9a0ffc4a0c67b8ab13a727d41309299a3aa57291c4cbb471a2f45bfdfb4d82cf84f6b943f26f1fe5e4f13040d2a298a1155dd97f9eaa2818c18a182a93021de34ee38850f080bc027c8664fc77de51b0796050b56eb7e54a17f166065bcbe4cb0614201753247d971eba45bac3a2a9547bed9eb5e6a3c351055f918fe5750df5190b40ededa8183f10b8e3b81662814cb9311535517bc62162a3104bd9d877c669747577f8b724011bbfa031b4612db830b65285cfc196bb24a62b6bd7c674727f6a350f89c7fc0e09bd7d67234abe5560d32b2e5781e0d1e0988f1202edf1d4e6738e2afcc36fa74f6cafc4bc05c55a4b891271b3b4b8e291d9710895b883377399359d43a9b59ebcadbb9a8caa07aaa0b7bd1a1286821ab6522846701fc64c965fbfdb02526b952e1cdf485da074b78f5bd0f2f7ad863bd02d343fd4e1380287feb5f5cc2a25f4674c36e0f929322435d5acc095c77203336123a139ef8d35ef5c8c500a42c47a6f5171b6d87d9d65a7cc7a181223bf589f666f8e6f2da3d7bc9ad9735f3fb8d3644c33693ad4e75f2e580b2fd9ba4a20aeb19cb78b9f82ff5e2d5e62ad44ff96310b6ffd0c02b9d7b729224f1b3cf638d77fa23c252d82a0a0309233bc98561c6550659a41523995aecb3c3ec53e320da3cef6f922ce69aae0d3bc51373dbc798a725c796ff4d713971512a1b056d6c6377b13b2ec6b3d51701b32194446a9626d094e7b99391cd97b85d06a3ec61b6f588d887adf184cc5163299234edd22fb33798a108f6ca33f5028b566b8696b91fe6f96e09b2f91da308119e3320596e65375eb8d2eca1ca6f968fd067849faecbca6dd74958e46b7a394841a7ebe2282b7f9f237328fd7ab0199923fc5055d73da46f0a4db69f26a57886b4d614e581d0fdd2631e0cf7e2f30942ebaabd7b2537fae409fe969074b291fac6be8f94bf186c9234cdcce3f17f37b657ea0fd02daeecbf865007e643d402658f878a43818e5cc12e668eabe53fa0a53006e9cb238ffbe0c59d9ee08e2d56cf521e03ec417a7da0e9913875da77f9e8d04486e8839a0a69339efad6b64e91b1a0f78d3eea0b377a9055768a006869396ea1a37e92c38273b9441bb34b3f44fc7a1264b4558b41b92e18ed47b26e60fcea1443004ddd719d754b4a2a05cc12925e8e3303d59dd22b70288a21c60ac0ba3102da44123dae7441d426c01240d2027e11a27ed8ae1536f92a31c2ef83a97f9c5cdccd5c47a0e652415176dec27405a4c3853890021f8102d03ad6d16dcd787d776182c7a39db4293b0ba0cfbb0e2876dc32034e6fbf9d081b4f4fb10c96014e16072e900b008ac3e7549ac1ed7242e41e29d047f3ad5fe8315f089617f1cac159e1abfe958839bec96048da60ef86f0fce8fd6f7f1f019b21030cc51f2529508221664e7b8a2c614b6e44a8da3ff568d7e9a5d7e8bdc39ae54c5381d7ae24e74d2e8145889e8272598b33c4fc88894c2f2ea7c19c91a771aaf46866b57d00e231f806318df8f3ed7784cc64d4c7bacac70d6d2a14871c9bb04c6307d0043a0109b2ea1ca7217ca42392fa374cff814cd28caac1233b49207fb2375fabea964fe48e931812d56c79b427394da634e4c54aaa4db2b29962a382fd4d2d82517e6ba3c3a210c9f69ad054418b6776b336cfc886088b728384d84e5d94f9faa089d23c2d1c76893f997572b65eeede1b0ca10eab9b0ba9683d8acb17c15c928db13619719897f7a00d3781d677708ff295e371e6189cd8d8ef99a075d80a7f316fa6c93b90c2e64db55c26a3a07da26ada5ec23459fc7979bb601b320067a03edab4c505e8f8f17eb967291a3799345e9366bc20b83a9255a708458b77c59b6c0fe57db9075081e7edd51e56b500fd73ae901885f79973788a33a9a43f611f7f3802966f5731f9d1bb36eb74a65d9ccec3f277771207b443fea29eaab99ddbdf068b4be4cd0e4ce0aaa904cbf93ce5973fd5dc469d11a41803404f0a5338bf9f2bea5249700548df03bfb2d8b8250ba2bec5f9f384d2ccb57970ab51925d6a95474f97a7164dd32218cc53210857cfafe4ae0495e7d9f2ab912911c05290d9d910c58accbb7bbcb55d9a35431cb2dab01730a4773b9e53f04017de70bc747c5a0faf56f52b8b25de99764860e8a992b36d4d14bc2c946ab7490a6900d5e08ccbce8769e531ebab27987b3fe806ed2e3c22b58c7007c1331a6bacd10aa5fdeb5e445db16395327107bf32b8da12997299e60b64127e704018da3077b794b0e756b87d4a4f0ab472e4fefaa53d2e1ea77b50ebdb90c5308b0af5a34b765477c85a55b86150941d2d9edfe2cc87486b41b538fe17ab90ba113a8f92deab2d39c433a9757085581dc073995ced66a9e4bd869ad8c1855349cc5ad07a01a723746445788c53b6dcf7492028e7bc5fbc922bb1a9fdcba98845181a9a5e699ca29eef72b5fc8c90b2a2a42a53a9bb6bb0c95998f553eece733d389e323a1f05c3aed97bb489ca0f0eb6cab629787ef93d7d8372ce1b15bfb8e1d6ea10beea78dec4ace443b5b6897d5308080e2a1f95af58318f62937da1efeea5f4bd3146fdeb0aac3f7e62a7a7c3b56d77f9aec41116b385c0335127e92c8d4c0e8a6660b9b4af5153222a856471aa115430df3286f6d97df10672580bc4aeb5f44101df2242960fad739d76afe828eff9eb12c21dd0f77f5f3f3e41e1216943e00cefc75bf88e0d867f599df36635c30863d367211cbb2e5ffbfbed9ee8228abc8ac6a4e1402d5c01914d8d03309f1bc9fed3f0bc8b0f3368cc1803705558e974d2615acea425a82933beba3d2d0f0fad39b78e295f2ec1292f4733d05bf2300dc16423cb651e77ddbc07329d789acdc07ce31594dc55497935fced5cb932ddb9889b92c5413bc17a806bf6b31daeec92cfff07732402ff87e6fc53d4eae55830ea24810a892446077da4664ae070e804ced19e775b3081f6648c4f8c9940761ac4eab92c577e3c299f1cde7d048a869847264f84171e7899f8be664a09e5ba163fc745be720d42d90e5290351cfc336b1abba3ec98ec81450b36ffec9a9fee904cfed53abec37cef4051efc6344445294a9b50489aafca7e6392c9db3d7d4ebaf48039c286f105ebaaa7ed80b57fa5aa17d5b084ab37aa9d03624ba19103591875e63b6b212baf50ee802c6bf569d8fb08f61a63a99da15424291fb815c390eadbec755364e317b5d12322c3af101621a186844dc92f66f1f0d1ef94514e7d540cd99f182bf68d17e945f892fd7e795dbfd0682e5f74dd26cc6bd15d87c9c8f0b08b4d8c2fc9ee8684795bbd73d266cb0ebde5f694c68c4bc2b9feb9fa64351c0cd502e9a5840d710930127f2d46b2d7816eb8cb9090465fb8eec937ba8d14518c75d223dcbde75079676c3beef9e6af768c2bac76138557036da8963ccef91957dcc61c74d7ba0a32cd25424a6a402afefb6507bccd005dd39b152d8b4ab77b61e781752f44045ee5e06441bed32ac1d533f68d2e52db70268f4c49a21dd44d8f21e6efce061d10e9c2befe6988f8dc4baa0025e40eaa6ba0b79ccb94d9aa3db22594c0aa7342c7c1dba5c5fc6bdcf879c9050bf092f0af6c2c19d802a700e994652162d6a76ee8a5dda789479818b8dee7f3271eed81720c7e8198724584b6360c6bca4368fd44c2a71a3e1077bf9427a2587631156748b6f90746b7fb142d1fb123501fbf42e83a3b4f3f78b487358e1a5df295238a07c7ad38869032517d510ddfdfc6bb5645b98fbc47e6c51f131fa2c18af8705d7155b8da6405678239b658bb6cb4700b69811d269748a91f927dc5a729a506be14621e4af3d4e925843abf0274fb366c8938d9c03751fb07c095161a717480528c2e084441b664db5c8995e9b122ff3a231c1bcfa3e3cf65e12a31fc9748f611586040f9ff10b694ea781b6f312719a723e1bac91b0d66a968dd987fc3c808aa5012aa7f82997b38048660cc6750399afaf6fd81f66d55ef2dc9a3659b5e45d602b4a0f024f5b040c8be349064bc14e2e98fd93747e6b569d1d08de637afd42d65c8b1ceac71160df87c3e5452c052a61aecb52557cb5924dbd310678a3c4c1858f71f25ddb52e94223dbcbb165f9e93590de3e104d47213ed3413de83aab52777e295c07461c35db3972e551d1feee376cf633fe8fe9d4e8942d33662bc516fe2f33d585112fc662a43d335edf113553a35d1ead961d970e3f19cf1ecc2613a8a45e85858ccb770351a0993ea798df91690bcdcde9afb86868c21ab5952f23882d54d3f7d6708cf1a291b2d3e6002fb71faacd2a4f9f1a068c7439553f66eb221237cb979dc055dd4c9c94c13afe38af3ae7c1865d74a4d49bf31aaeef62d31984db9acbfa8c0c520dc5cc9393de89267d590cc28b3213f80757ff0bbd4f2482049f0718a4c1a181f89e063fc08289ed620b5d5edba2add06545858a9e7c3175e58f927dd511fd32c0490a3575aaaaac9e5b1f27a532fe024b8ce1d9249348830e47ca8cdb79ae7335d4965e4dfc4e15ebae6f685aa88088348fbd0fea93a536004786663496f360576fc2421068a8f56125497c3e41967da906eb32aa76fc57566bd57182ea65c286a4af8e96ed2c393dca8195f7b140b3e97f2c3ca7760c4690402ba7fbedbd8b313d36a1e58ada6b8b9e9e56ba6b5a3f539aa55a290627717f8662e5dffd8eb3566110f36a689be171f05dcf6e40cf9f5f55cc1b86dbffccd09843894d9605ef16d95349b9ab3b24d0bd7dfd55fb41e93b886f72b66efbc500e9d42d2ede7761f1b420bec0d7bc7c32d9d51885f1846c0ead39e93462f3219615a5d56d65ca72e901af81d643887b30dc75f39f2ffcc63583041651c72d6b8ec1dbd03fe3ef1067c4b9fab614a31ba6b528d5b525f7742c0a990a564baae967c17030bd8ee24c57485fdb9f465cb532334bc4bea7c7e258e7d59491605be85bc84e28ee1acd24ff88fa13672e5d2237252090dc5010f405e46885ac8343845d0d0698371dfb8ce38b3e4ff76713ce999ca4754431b37aea085f639d50e5a998e27c5f2034573ce846da607df0ab8168570bb0e47947c5e0e5cf55c1fe3f00148a77bf352dc331389d4b0890b0a201f329b6d5bca7d63d3253fce8918d338ddbe787f737565b9b3f59f4a7ca8ce4e9024b349870be66c1f80901189ef20af52d6725b78af5abd1e581faa0deae240a26c55bb17ea79cf1629f19c3eebc2e29a80d53f0e9d0e8c732f6d1c36142b80e34347ece7c6a8b745de42dbe7b40d9ea1bfec0c61abbf621ec8502b8258c5d442ea4a42d3a3c60516082f36b145c673721c6499d8579d2e107369f171e711b567415fb7a9d5b34d37a6e02fe060df352e7119873b996f8352834a19d0aad662830d7f7b9081f7c505db9f6135ef839fbfd3cdac7f22242e71ec1612cc6a23d47a5c001c1ef80209ada0bcfa99db2b7f7edb14dacf772af96f46ad0c47bf15932f5bc12744a4e2bb38dae866248cd2ac35338834f26cccd78a5ff91a71569b6a43fa72229fdb18ec05eb33b4c1e158ed602d27ab41d54e710c707f8aafb26c3ab25cfc47c8e000eba4e788bbc4cc65c20542b99a8ed3c52d8c96de42fcf2bc27cdcc6d58296f2a33cb5845e08bdd5c9e81bbf9f775ad5af71ae473e9d1bbe0d98ba9346daaa3f19915afb993ff2443dd33f26bc94d4189991f04239b4f6957b153c47f16f5ff75b3a43dcee5314a647aedf0cd4e56f4f122f4cddd20f9cb4e69e4f4b0b47a067bfb05a4d049deafe46495ceafa107fac25a4583f013d8efcf984881a69eaa8fb6275c405c6a849c4cfd25dddfbe3b292e27bc2887a29ffefb3e35e91ded76cf6dfe5c3ca3285bf2df93e0687c31e3ff5b26d8330fb05813e30fb134af2ac579128fbf02fba53dd63fbccbdfa1940e67f0efe26cc5e96fe145cafd1189c5aced11359d471ae4b06435961ffae61c7a41ca4bccf3947bf48f2e3562c90e740e1db06ade01100ae85af170e4871e57b65228564257f35d6d617d70ea08aaec12a95cb31bea9839cae287a0d39a6d6b16172e0fbf539929b816419070309e43e82bee1f6a4898ea40c075ff368573f615a047e3bd563c4aeead7a6d6a49b34b27e6eb0160c63dce442fe756ff5a362948d6e0d48927c26cf45d763ecd345ad6021c3f6786114a1d933a92c9b9369a5769e798c1ba589817ac44a0b3b2ca8c4c44cab1b42b1c2fb092e919050053d4956ccb4a9ac11f6909466f3e3027192cd4bfb3f5ad6478033b5d963113de0fb8f715de855d8a7a543c7ac754a38ba24bab440df891768f558354eb46576cbec85eaaacae7b191ca6701d03b45dd25a425a744bdea5b6c65b7d74ca168ad35630c77002cfd7ec5061cbc05211794e0385cceda14597e42ba704ec6d09e1112e5cf7f57d57eafa5fd561e64a53714b5fcea849f4fc622df0fa5b83644964afb07f00ea63efb3f13ef4548c6df1f663d929194ff7d5376adb0ce7c96d17ef6b1b1cff422c6911f0dc51afe518abf9f0933186c74c5fb1636fc5e393aed7a3f1987a7308daac342653149d339fc26269ec0d4ca19be7cd0444992bfc2a6fe59cc27a0c506576294381fb7996f0e47028bf234471780d162acf8decc09097721e6852fe69d06b60f3049d8384730b36b9cf198449312ef136642472a46613919c3de1d4e36d172665f04a3d16d0a6a33250b03832ff9b7bf2f74c3181225dde63e0fd7746bbf8304805a2926c2faa2d11aa963059cc36c6eef0e44b8c82d31f48559c6b2b8f3727ea</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
